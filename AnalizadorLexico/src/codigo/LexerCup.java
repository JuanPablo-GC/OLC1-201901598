/* The following code was generated by JFlex 1.4.3 on 15/09/22 09:39 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/09/22 09:39 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\44\2\0\1\3\22\0\1\52\1\0\1\32\1\0"+
    "\1\37\1\61\1\0\1\35\1\55\1\56\1\16\1\14\1\50\1\15"+
    "\1\31\1\17\4\2\6\41\1\0\1\47\1\0\1\13\1\46\2\0"+
    "\1\27\1\57\1\26\1\22\1\6\1\5\1\45\1\12\1\4\1\54"+
    "\1\1\1\7\1\20\1\25\1\21\1\23\1\53\1\34\1\10\1\24"+
    "\1\51\1\33\1\11\1\1\1\60\1\1\1\62\1\0\1\63\1\0"+
    "\1\30\1\0\1\27\1\57\1\26\1\22\1\6\1\5\1\45\1\12"+
    "\1\4\1\54\1\1\1\7\1\20\1\25\1\21\1\23\1\53\1\34"+
    "\1\10\1\24\1\51\1\33\1\11\1\1\1\60\1\1\1\40\1\0"+
    "\1\42\u1f9a\0\1\36\1\43\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\7\1\1\3\4\4\15\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\1\1\13\1\14"+
    "\3\0\1\15\11\0\1\16\3\0\1\17\1\20\1\21"+
    "\1\0\1\1\5\0\1\22\12\0\1\23\5\0\1\24"+
    "\1\2\3\0\1\25\16\0\1\4\4\0\1\26\5\0"+
    "\1\27\3\0\1\30\22\0\1\31\2\0\1\32\1\0"+
    "\1\33\20\0\1\34\5\0\1\35\1\36\1\37\2\0"+
    "\1\40\16\0\1\25\2\0\1\41\13\0\1\42\3\0"+
    "\1\43\20\0\1\44\16\0\1\45\1\0\1\46\1\47"+
    "\4\0\1\50\1\40\1\0\1\51\1\52\1\0\1\53"+
    "\2\0\1\54\3\0\1\55\2\0\1\56\3\0\1\57"+
    "\2\0\1\60\4\0\1\61\4\0\1\62\1\63\5\0"+
    "\1\64\7\0\1\65\1\0\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\64\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\u05b0\0\u02a4\0\64\0\64\0\150"+
    "\0\u05e4\0\u0618\0\150\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\150\0\u0820\0\u0854\0\u0888"+
    "\0\64\0\64\0\64\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\150\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u04ac\0\64\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\64\0\u0618\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\150"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\150\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u0bc8\0\u127c\0\u12b0\0\u12e4\0\64\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\64\0\u16c0\0\u16f4\0\150\0\u1728\0\150\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\150"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\150\0\u1ba0\0\150"+
    "\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u1f14\0\150\0\u1f48\0\u1f7c\0\64\0\u1fb0\0\u1fe4\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\150\0\u21ec\0\u2220\0\u2254\0\150\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\150\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\150\0\u28a0\0\u28d4\0\150"+
    "\0\u2908\0\u293c\0\u2970\0\u29a4\0\64\0\64\0\u29d8\0\150"+
    "\0\150\0\u2a0c\0\150\0\u2a40\0\u2a74\0\150\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\150\0\u2b44\0\u2b78\0\64\0\u2bac\0\u2be0\0\u2c14"+
    "\0\64\0\u2c48\0\u2c7c\0\64\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c"+
    "\0\64\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\64\0\64\0\u2e50"+
    "\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\64\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u3058\0\u308c\0\64\0\u30c0\0\64\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\34\1\35\1\2"+
    "\1\36\1\4\1\37\1\2\1\5\1\3\1\2\1\40"+
    "\1\41\1\3\1\5\2\3\1\42\1\43\1\44\1\3"+
    "\1\45\1\46\1\47\65\0\2\50\1\0\7\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\1\50"+
    "\1\4\1\0\7\50\5\0\10\50\1\0\1\52\1\0"+
    "\2\50\4\0\1\4\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\1\5\40\0\1\5"+
    "\5\0\1\5\12\0\2\50\1\0\1\50\1\53\5\50"+
    "\5\0\1\54\4\50\1\55\2\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\1\56\6\50\5\0"+
    "\7\50\1\57\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\60\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\3\50\1\61\1\62\2\50\5\0\5\50"+
    "\1\63\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\1\50\1\64\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\1\65\1\50\1\66\4\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\6\50\1\67\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\7\50"+
    "\1\70\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\16\0\1\71"+
    "\1\72\62\0\1\71\1\0\1\72\30\0\1\73\30\0"+
    "\1\71\63\0\1\71\2\0\1\74\1\75\45\0\2\50"+
    "\1\0\1\76\1\50\1\77\4\50\5\0\1\50\1\100"+
    "\5\50\1\101\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\1\102\2\0\1\50"+
    "\1\103\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\2\50"+
    "\1\104\4\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\1\50\1\105"+
    "\5\50\1\106\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\1\50\1\107\6\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\110\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\1\50\1\111\5\50\1\112\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\5\50"+
    "\1\113\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\114\1\0\7\114\5\0\11\114\2\0\2\114\4\0"+
    "\1\114\3\0\1\114\3\0\1\114\1\0\2\114\2\0"+
    "\2\114\3\0\32\115\1\116\31\115\1\0\2\50\1\0"+
    "\2\50\1\117\4\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\2\50\1\120\4\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\1\121\2\0\7\121\5\0\10\121\3\0\2\121\10\0"+
    "\1\121\3\0\1\121\1\0\2\121\2\0\2\121\42\0"+
    "\1\122\25\0\2\50\1\0\7\50\5\0\1\50\1\123"+
    "\6\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\61\0\1\124"+
    "\7\0\1\125\36\0\1\125\23\0\2\50\1\0\7\50"+
    "\5\0\3\50\1\126\4\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\1\127\6\50\5\0\10\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\130\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\5\50\1\131\2\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\3\50\1\132\3\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\5\50\1\133\2\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\4\50"+
    "\1\134\2\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\10\50\1\135"+
    "\2\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\4\50\1\136\3\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\2\50\1\137\4\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\140\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\1\141\6\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\4\50\1\142\2\50\5\0\6\50\1\143\1\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\3\0\16\74\1\144"+
    "\1\0\44\74\44\75\1\0\17\75\1\0\2\50\1\0"+
    "\2\50\1\145\4\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\4\50"+
    "\1\146\1\147\2\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\7\50\5\0\2\50\1\150\5\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\1\50"+
    "\1\147\13\0\1\151\54\0\2\50\1\0\7\50\5\0"+
    "\10\50\1\152\2\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\4\50\1\153\3\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\10\50\3\0\1\50\1\154\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\7\50\5\0\4\50\1\155\3\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\1\156\7\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\1\157\4\50"+
    "\1\160\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\2\50\1\161\5\50\3\0"+
    "\1\50\1\162\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\2\50\1\103\5\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\114\1\0\7\114\5\0\10\114"+
    "\1\163\2\0\2\114\4\0\1\114\3\0\1\114\3\0"+
    "\1\114\1\0\2\114\2\0\2\114\4\0\2\50\1\0"+
    "\7\50\5\0\10\50\3\0\1\50\1\164\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\3\50\1\165"+
    "\1\166\3\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\40\0"+
    "\1\167\66\0\1\170\24\0\2\50\1\0\7\50\5\0"+
    "\1\50\1\171\6\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\7\50\5\0\10\50\3\0\1\50"+
    "\1\172\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\6\50\1\173\1\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\10\50\3\0"+
    "\1\50\1\174\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\10\50\1\175\2\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\4\50\1\176\2\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\6\50\1\177\1\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\2\50\1\53"+
    "\4\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\7\0\1\200\15\0\1\201\42\0\2\50\1\0\7\50"+
    "\5\0\1\50\1\202\6\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\6\50\1\203"+
    "\1\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\204\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\3\50\1\134\3\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\4\50\1\205\3\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\2\50\1\206"+
    "\4\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\22\0\1\2\45\0\2\50\1\0\7\50\5\0\5\50"+
    "\1\207\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\1\50\1\210\6\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\1\50\1\211\6\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\7\0\1\212\66\0\1\213\55\0\2\50\1\0"+
    "\2\50\1\214\4\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\7\50"+
    "\1\215\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\2\50\1\216\4\50\5\0\10\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\1\50\1\217\6\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\7\50\5\0\10\50\1\220\2\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\221"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\2\50"+
    "\1\222\4\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\7\50\1\223"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\2\50\1\224\5\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\2\50\1\225\4\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\1\50\1\226\6\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\44\0\1\227\23\0\2\50"+
    "\1\0\3\50\1\230\3\50\5\0\10\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\1\231\6\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\1\232\6\50\5\0\10\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\2\50\1\233"+
    "\4\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\10\0\1\234\2\0\1\235\7\0\1\236\2\0\1\237"+
    "\41\0\2\50\1\0\7\50\5\0\1\50\1\240\6\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\1\241\6\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\50\0\1\242\22\0\1\243\60\0\2\50\1\0"+
    "\7\50\5\0\5\50\1\244\2\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\10\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\245"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\5\50\1\246\2\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\7\50"+
    "\1\247\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\10\50\3\0\1\50\1\250\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\4\50"+
    "\1\251\3\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\2\50\1\252\5\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\10\50\3\0\1\50\1\253\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\24\0\1\254\43\0\2\50\1\0\7\50\5\0\5\50"+
    "\1\255\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\3\0\1\50\1\256"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\26\0\1\257\7\0\1\260\34\0"+
    "\1\261\60\0\2\50\1\0\7\50\5\0\5\50\1\262"+
    "\2\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\6\50\1\263\1\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\7\50\1\264\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\4\50\1\265\3\50\3\0"+
    "\2\50\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\10\50\3\0\1\50\1\266\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\1\267\36\0\1\267\23\0\2\50\1\0\2\50"+
    "\1\270\4\50\5\0\10\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\1\271\7\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\1\50\1\272\6\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\4\50\1\273\2\50"+
    "\5\0\10\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\54\0"+
    "\1\274\16\0\1\275\1\0\1\276\61\0\1\277\1\0"+
    "\1\300\104\0\1\301\35\0\2\50\1\0\7\50\5\0"+
    "\1\50\1\302\6\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\54\0\1\303\17\0\1\304\57\0\2\50\1\0\7\50"+
    "\5\0\6\50\1\305\1\50\3\0\2\50\4\0\1\50"+
    "\3\0\1\50\3\0\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\4\0\2\50\1\0\7\50\5\0\4\50\1\306"+
    "\3\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\10\50\1\307\2\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\10\50"+
    "\3\0\1\50\1\310\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\1\50\1\311\6\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\10\50\1\312\2\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\33\0"+
    "\1\313\34\0\2\50\1\0\7\50\5\0\6\50\1\314"+
    "\1\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\1\50\1\315\6\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\32\0\1\316\63\0\1\317\61\0"+
    "\1\320\37\0\2\50\1\0\7\50\5\0\7\50\1\315"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\4\0\2\50\1\0"+
    "\7\50\5\0\4\50\1\321\3\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\2\50"+
    "\1\322\5\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\1\323\6\50\5\0\10\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\5\50\1\324\2\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\45\0\1\325\22\0\2\50\1\0\7\50\5\0\7\50"+
    "\1\326\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\1\327\6\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\7\50"+
    "\1\330\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\30\0\1\331"+
    "\103\0\1\332\24\0\1\333\101\0\1\334\73\0\1\335"+
    "\30\0\2\50\1\0\7\50\5\0\5\50\1\336\2\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\32\0\1\337\42\0"+
    "\1\340\56\0\2\50\1\0\2\50\1\341\4\50\5\0"+
    "\10\50\3\0\2\50\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\4\0\2\50"+
    "\1\0\7\50\5\0\7\50\1\342\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\56\0\1\343\11\0\2\50\1\0\7\50"+
    "\5\0\7\50\1\344\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\24\0\1\345\70\0\1\346\36\0\2\50\1\0\1\347"+
    "\6\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\37\0\1\350\36\0\1\351\102\0\1\352\36\0\2\50"+
    "\1\0\2\50\1\353\4\50\5\0\10\50\3\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\2\50\1\354"+
    "\4\50\5\0\10\50\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\4\0\2\50\1\0\7\50\5\0\10\50\3\0\1\50"+
    "\1\355\4\0\1\50\3\0\1\50\3\0\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\4\0\2\50\1\0\7\50"+
    "\5\0\7\50\1\356\3\0\2\50\4\0\1\50\3\0"+
    "\1\50\3\0\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\46\0\1\167\21\0\2\50\1\0\7\50\5\0\5\50"+
    "\1\315\2\50\3\0\2\50\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\3\0\1\50\1\357"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\10\50\3\0\1\50\1\360\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\31\0"+
    "\1\361\106\0\1\362\37\0\1\363\57\0\1\364\71\0"+
    "\1\365\43\0\1\366\110\0\1\367\30\0\2\50\1\0"+
    "\4\50\1\370\2\50\5\0\10\50\3\0\2\50\4\0"+
    "\1\50\3\0\1\50\3\0\1\50\1\0\2\50\1\51"+
    "\1\0\2\50\4\0\2\50\1\0\7\50\5\0\10\50"+
    "\3\0\1\50\1\371\4\0\1\50\3\0\1\50\3\0"+
    "\1\50\1\0\2\50\1\51\1\0\2\50\54\0\1\372"+
    "\13\0\2\50\1\0\4\50\1\373\2\50\5\0\10\50"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\33\0\1\374\54\0"+
    "\1\375\43\0\2\50\1\0\7\50\5\0\7\50\1\376"+
    "\3\0\2\50\4\0\1\50\3\0\1\50\3\0\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\32\0\1\377\55\0"+
    "\1\u0100\76\0\1\u0101\30\0\2\50\1\0\7\50\5\0"+
    "\10\50\3\0\1\50\1\315\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\3\0\1\50\1\176"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\4\0\2\50\1\0\7\50\5\0"+
    "\10\50\3\0\1\50\1\u0102\4\0\1\50\3\0\1\50"+
    "\3\0\1\50\1\0\2\50\1\51\1\0\2\50\4\0"+
    "\2\50\1\0\7\50\5\0\10\50\1\u0103\2\0\2\50"+
    "\4\0\1\50\3\0\1\50\3\0\1\50\1\0\2\50"+
    "\1\51\1\0\2\50\7\0\1\u0104\104\0\1\u0105\62\0"+
    "\1\u0106\61\0\1\u0107\47\0\1\u0108\63\0\1\u0109\61\0"+
    "\1\200\104\0\1\u010a\56\0\1\u010b\77\0\1\u010c\35\0"+
    "\1\u010d\102\0\1\u010e\57\0\1\u010f\76\0\1\u0110\50\0"+
    "\1\u0111\67\0\1\u0112\62\0\1\u0113\45\0\1\u0114\75\0"+
    "\1\u0115\52\0\1\u0116\101\0\1\u0117\65\0\1\u0118\60\0"+
    "\1\u0119\73\0\1\u011a\53\0\1\u011b\45\0\1\u011c\65\0"+
    "\1\u011d\61\0\1\366\104\0\1\u011e\70\0\1\u011f\54\0"+
    "\1\u0120\72\0\1\u0121\50\0\1\u0122\66\0\1\u0123\43\0"+
    "\1\u0124\67\0\1\u0125\102\0\1\u0126\55\0\1\u0127\51\0"+
    "\1\u0128\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\21\1\6\11\2\1\2\11"+
    "\3\0\1\1\11\0\1\1\3\0\3\11\1\0\1\1"+
    "\5\0\1\1\12\0\1\11\5\0\1\11\1\1\3\0"+
    "\1\1\16\0\1\1\4\0\1\1\5\0\1\1\3\0"+
    "\1\11\22\0\1\11\2\0\1\1\1\0\1\1\20\0"+
    "\1\1\5\0\3\1\2\0\1\1\16\0\1\1\2\0"+
    "\1\11\13\0\1\1\3\0\1\1\20\0\1\1\16\0"+
    "\1\1\1\0\2\1\4\0\2\11\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\2\0\1\11\3\0"+
    "\1\11\2\0\1\11\4\0\1\11\4\0\2\11\5\0"+
    "\1\11\7\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return new Symbol(sym.Incremental, yychar, yyline, yytext());
          }
        case 56: break;
        case 26: 
          { return new Symbol(sym.Para, yychar, yyline, yytext());
          }
        case 57: break;
        case 38: 
          { return new Symbol(sym.Imprimir, yychar, yyline, yytext());
          }
        case 58: break;
        case 53: 
          { return new Symbol(sym.Parametros, yychar, yyline, yytext());
          }
        case 59: break;
        case 42: 
          { return new Symbol(sym.Ejecutar, yychar, yyline, yytext());
          }
        case 60: break;
        case 40: 
          { return new Symbol(sym.FinPara, yychar, yyline, yytext());
          }
        case 61: break;
        case 19: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 62: break;
        case 51: 
          { return new Symbol(sym.FinFuncion, yychar, yyline, yytext());
          }
        case 63: break;
        case 16: 
          { return new Symbol(sym.OperadorIncremento, yychar, yyline, yytext());
          }
        case 64: break;
        case 6: 
          { return new Symbol(sym.LLaveC, yychar, yyline, yytext());
          }
        case 65: break;
        case 39: 
          { return new Symbol(sym.Ingresar, yychar, yyline, yytext());
          }
        case 66: break;
        case 46: 
          { return new Symbol(sym.FinSegun, yychar, yyline, yytext());
          }
        case 67: break;
        case 45: 
          { return new Symbol(sym.Retornar, yychar, yyline, yytext());
          }
        case 68: break;
        case 36: 
          { return new Symbol(sym.Funcion, yychar, yyline, yytext());
          }
        case 69: break;
        case 37: 
          { return new Symbol(sym.Repetir, yychar, yyline, yytext());
          }
        case 70: break;
        case 14: 
          { return new Symbol(sym.Si, yychar, yyline, yytext());
          }
        case 71: break;
        case 31: 
          { return new Symbol(sym.Hacer, yychar, yyline, yytext());
          }
        case 72: break;
        case 27: 
          { return new Symbol(sym.Como, yychar, yyline, yytext());
          }
        case 73: break;
        case 13: 
          { return new Symbol(sym.Reservadas, yychar, yyline, yytext());
          }
        case 74: break;
        case 28: 
          { return new Symbol(sym.Booleano, yychar, yyline, yytext());
          }
        case 75: break;
        case 54: 
          { return new Symbol(sym.DeloContrario, yychar, yyline, yytext());
          }
        case 76: break;
        case 22: 
          { return new Symbol(sym.Not, yychar, yyline, yytext());
          }
        case 77: break;
        case 7: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 78: break;
        case 30: 
          { return new Symbol(sym.Hasta, yychar, yyline, yytext());
          }
        case 79: break;
        case 11: 
          { return new Symbol(sym.CorcheteA, yychar, yyline, yytext());
          }
        case 80: break;
        case 34: 
          { return new Symbol(sym.Metodo, yychar, yyline, yytext());
          }
        case 81: break;
        case 9: 
          { return new Symbol(sym.ParentesisA, yychar, yyline, yytext());
          }
        case 82: break;
        case 50: 
          { return new Symbol(sym.ImprimirSalto, yychar, yyline, yytext());
          }
        case 83: break;
        case 20: 
          { return new Symbol(sym.LLamada, yychar, yyline, yytext());
          }
        case 84: break;
        case 43: 
          { return new Symbol(sym.Mientras, yychar, yyline, yytext());
          }
        case 85: break;
        case 32: 
          { return new Symbol(sym.OperadorRelacional, yychar, yyline, yytext());
          }
        case 86: break;
        case 25: 
          { return new Symbol(sym.OSi, yychar, yyline, yytext());
          }
        case 87: break;
        case 23: 
          { return new Symbol(sym.Variable, yychar, yyline, yytext());
          }
        case 88: break;
        case 21: 
          { return new Symbol(sym.Global, yychar, yyline, yytext());
          }
        case 89: break;
        case 4: 
          { return new Symbol(sym.OperadorAritmetico, yychar, yyline, yytext());
          }
        case 90: break;
        case 41: 
          { return new Symbol(sym.Entonces, yychar, yyline, yytext());
          }
        case 91: break;
        case 44: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 92: break;
        case 15: 
          { return new Symbol(sym.OperadorAtribucion, yychar, yyline, yytext());
          }
        case 93: break;
        case 52: 
          { return new Symbol(sym.FinMientras, yychar, yyline, yytext());
          }
        case 94: break;
        case 29: 
          { return new Symbol(sym.Segun, yychar, yyline, yytext());
          }
        case 95: break;
        case 17: 
          { return new Symbol(sym.Asignacion, yychar, yyline, yytext());
          }
        case 96: break;
        case 24: 
          { return new Symbol(sym.Caracter, yychar, yyline, yytext());
          }
        case 97: break;
        case 12: 
          { return new Symbol(sym.CorcheteC, yychar, yyline, yytext());
          }
        case 98: break;
        case 18: 
          { return new Symbol(sym.OperadorLogico, yychar, yyline, yytext());
          }
        case 99: break;
        case 10: 
          { return new Symbol(sym.ParentesisC, yychar, yyline, yytext());
          }
        case 100: break;
        case 35: 
          { return new Symbol(sym.TipoDato, yychar, yyline, yytext());
          }
        case 101: break;
        case 47: 
          { return new Symbol(sym.HastaQue, yychar, yyline, yytext());
          }
        case 102: break;
        case 5: 
          { return new Symbol(sym.LLaveA, yychar, yyline, yytext());
          }
        case 103: break;
        case 1: 
          { /*Ignore*/
          }
        case 104: break;
        case 3: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 105: break;
        case 8: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 106: break;
        case 33: 
          { return new Symbol(sym.FinSi, yychar, yyline, yytext());
          }
        case 107: break;
        case 2: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 108: break;
        case 49: 
          { return new Symbol(sym.FinMetodo, yychar, yyline, yytext());
          }
        case 109: break;
        case 48: 
          { return new Symbol(sym.ConValor, yychar, yyline, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
