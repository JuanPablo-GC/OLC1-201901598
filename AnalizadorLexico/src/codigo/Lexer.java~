/* The following code was generated by JFlex 1.4.3 on 19/09/22 08:19 PM */

package codigo;
import static codigo.Tokens.*;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/09/22 08:19 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\47\1\0\1\26\1\0"+
    "\1\35\1\56\1\0\1\34\1\52\1\53\1\10\1\6\1\44\1\7"+
    "\1\25\1\11\1\2\11\37\1\0\1\43\1\0\1\5\1\42\1\61"+
    "\1\0\1\23\1\54\1\21\1\14\1\17\1\31\1\41\1\46\1\22"+
    "\1\51\1\1\1\32\1\12\1\20\1\13\1\15\1\50\1\30\1\33"+
    "\1\16\1\45\1\27\2\1\1\55\1\1\1\57\1\0\1\60\1\0"+
    "\1\24\1\0\1\23\1\54\1\21\1\14\1\17\1\31\1\41\1\46"+
    "\1\22\1\51\1\1\1\32\1\12\1\20\1\13\1\15\1\50\1\30"+
    "\1\33\1\16\1\45\1\27\2\1\1\55\1\1\1\36\1\0\1\40"+
    "\101\0\1\61\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\20\1\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\2\1\1\20\1\21\1\22\2\0\1\2"+
    "\1\23\1\24\1\25\1\0\1\26\5\0\1\27\17\0"+
    "\1\30\10\0\1\31\5\0\1\32\1\0\1\33\22\0"+
    "\1\34\3\0\1\35\5\0\1\36\5\0\1\37\3\0"+
    "\1\40\2\0\1\41\5\0\1\42\24\0\1\43\1\0"+
    "\1\44\27\0\1\45\2\0\1\46\1\0\1\47\1\50"+
    "\1\0\1\51\15\0\1\35\11\0\1\52\23\0\1\53"+
    "\6\0\1\54\2\0\1\55\1\0\1\56\1\57\1\0"+
    "\1\44\1\60\3\0\1\61\1\62\1\63\2\0\1\64"+
    "\6\0\1\65\5\0\1\66\1\67\5\0\1\70\6\0"+
    "\1\71\1\0\1\72\3\0\1\73\4\0\1\74\1\0"+
    "\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\62\0\62\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\62\0\62\0\62\0\62\0\u04e2"+
    "\0\62\0\62\0\u0514\0\u015e\0\62\0\62\0\62\0\144"+
    "\0\u0546\0\u0578\0\62\0\62\0\62\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\144\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u03b6\0\62\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\144\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\62\0\u0c4e\0\144\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u0992\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\62\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\62\0\u12c0\0\u12f2\0\u1324\0\62\0\u1356\0\u1388\0\144"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\144\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\144\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\144\0\u1d7e\0\u1db0\0\144"+
    "\0\u1de2\0\144\0\u1e14\0\u1e46\0\144\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\144\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\62\0\u22c4\0\u22f6\0\u2328"+
    "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648"+
    "\0\144\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\144"+
    "\0\u27a6\0\u27d8\0\144\0\u280a\0\144\0\144\0\u283c\0\62"+
    "\0\144\0\u286e\0\u28a0\0\u28d2\0\u2904\0\144\0\144\0\u2936"+
    "\0\u2968\0\62\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94"+
    "\0\62\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\62\0\62"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\62\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\62\0\u2de6\0\62\0\u2e18"+
    "\0\u2e4a\0\u2e7c\0\62\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\62"+
    "\0\u2f76\0\62\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\2\1\26\1\27"+
    "\1\30\1\31\1\3\1\32\1\33\1\2\1\34\1\4"+
    "\1\35\1\3\1\2\1\36\1\37\1\3\1\40\1\5"+
    "\2\3\1\41\1\42\1\43\1\3\1\44\1\45\1\46"+
    "\1\47\63\0\2\50\7\0\12\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\1\50\1\4\7\0\12\50\1\0"+
    "\1\52\1\0\5\50\3\0\1\4\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\7\0\1\5"+
    "\43\0\1\5\17\0\1\53\1\54\60\0\1\53\1\0"+
    "\1\54\32\0\1\55\24\0\1\53\61\0\1\53\2\0"+
    "\1\56\1\57\51\0\2\50\7\0\1\50\1\60\3\50"+
    "\1\61\2\50\1\62\1\63\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\12\50\1\64\2\0\1\50"+
    "\1\65\3\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\5\50\1\66\4\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\1\50\1\67\7\50\1\70\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\6\50"+
    "\1\71\3\50\3\0\4\50\1\72\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\1\50\1\73\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\1\50\1\74\10\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\1\75\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\1\50\1\76\7\50\1\77\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\1\100\5\50\1\101\3\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\6\50\1\102\3\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\103\7\0\13\103\2\0\5\103\3\0\1\103"+
    "\1\0\1\103\3\0\2\103\1\0\2\103\2\0\2\103"+
    "\4\0\26\104\1\105\33\104\1\0\2\50\7\0\5\50"+
    "\1\106\4\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\5\50\1\107\4\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\10\50\1\110\1\111"+
    "\3\0\3\50\1\112\1\50\3\0\1\50\1\0\1\50"+
    "\3\0\1\113\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\4\50\1\114\1\115\2\50\1\116"+
    "\1\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\1\117"+
    "\10\0\12\117\3\0\5\117\1\0\1\120\3\0\1\117"+
    "\3\0\2\117\1\0\2\117\2\0\2\117\5\0\2\50"+
    "\7\0\11\50\1\121\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\1\50\1\122\10\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\1\50\1\123\57\0\1\124\10\0\1\52"+
    "\34\0\1\52\22\0\10\56\1\125\1\0\50\56\4\57"+
    "\1\0\55\57\1\0\2\50\7\0\2\50\1\126\7\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\4\50\1\127\1\50\1\130\3\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\5\50\1\131\4\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\12\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\1\50\1\130\37\0"+
    "\1\132\27\0\2\50\7\0\12\50\1\133\2\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\4\50\1\134"+
    "\5\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\3\0\1\50\1\135\3\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\4\50\1\136\5\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\12\50"+
    "\1\137\2\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\5\50\1\140\4\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\4\50\1\65\5\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\1\141"+
    "\11\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\1\142\5\50\1\143\3\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\2\50\1\144\7\50"+
    "\3\0\1\50\1\145\3\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\3\50\1\146\6\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\10\50\1\147\1\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\150\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\2\50\1\65\7\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\103\7\0\12\103\1\151\2\0\5\103\3\0"+
    "\1\103\1\0\1\103\3\0\2\103\1\0\2\103\2\0"+
    "\2\103\5\0\2\50\7\0\12\50\3\0\1\50\1\152"+
    "\3\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\3\50"+
    "\1\153\1\154\5\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\6\50\1\155\3\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\12\50\3\0"+
    "\3\50\1\156\1\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\1\50\1\157\10\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\6\50\1\160\3\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\12\50"+
    "\3\0\1\50\1\161\3\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\12\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\162\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\40\0\1\163\63\0\1\164\24\0\2\50\7\0\7\50"+
    "\1\165\2\50\3\0\4\50\1\166\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\1\50\1\167\10\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\4\50\1\170"+
    "\5\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\4\0\10\56"+
    "\1\125\1\171\50\56\1\0\2\50\7\0\1\50\1\172"+
    "\10\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\1\50\1\173\10\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\6\50\1\174\3\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\26\0\1\175\71\0\1\176"+
    "\30\0\2\50\7\0\5\50\1\177\4\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\11\50\1\200"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\1\50\1\201\10\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\20\0\1\202\5\0\1\203\40\0\2\50\7\0\7\50"+
    "\1\204\2\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\5\50\1\205\4\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\1\50\1\206\10\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\12\50\1\207\2\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\210\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\5\50\1\211\4\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\11\50\1\212\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\12\50"+
    "\3\0\1\50\1\213\3\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\7\50\1\214\2\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\12\50\3\0\1\50"+
    "\1\215\3\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\2\50\1\216\7\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\5\50\1\217\4\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\1\50\1\220"+
    "\10\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\1\221\2\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\12\50\3\0\4\50\1\222\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\11\50\1\223\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\7\50"+
    "\1\224\2\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\10\50\1\225\1\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\12\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\1\226\1\50\1\0"+
    "\2\50\1\51\1\0\2\50\43\0\1\227\23\0\2\50"+
    "\7\0\5\50\1\230\4\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\4\50\1\231\5\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\12\50"+
    "\3\0\3\50\1\232\1\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\5\50\1\233\4\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\2\50\1\234\7\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\12\50\3\0\1\50\1\235\3\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\4\50\1\236\5\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\17\0\1\237\47\0\2\50\7\0"+
    "\6\50\1\240\3\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\6\50\1\241\3\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\26\0\1\242\100\0\1\243\21\0"+
    "\2\50\7\0\12\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\1\244\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\12\50\3\0\1\50\1\245"+
    "\3\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\21\0\1\246\11\0\1\247"+
    "\54\0\1\250\40\0\2\50\7\0\6\50\1\251\3\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\7\50\1\252\2\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\10\50\1\253\1\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\10\50\1\254"+
    "\1\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\5\50\1\255\4\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\11\50\1\256\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\4\50\1\257"+
    "\5\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\3\0\1\50\1\260\3\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\16\0\1\261\2\0\1\262\13\0\1\263\1\0"+
    "\1\264\27\0\2\50\7\0\1\50\1\265\10\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\4\50"+
    "\1\233\5\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\10\50\1\266\1\50\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\6\50\1\267\3\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\6\50\1\270\3\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\1\271\34\0\1\271\23\0\2\50\7\0\12\50"+
    "\3\0\1\50\1\272\3\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\11\50\1\273\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\5\50\1\274\4\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\2\50\7\0\1\50"+
    "\1\275\10\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\5\0"+
    "\2\50\7\0\12\50\1\276\2\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\12\50\3\0\1\50\1\277"+
    "\3\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\30\0\1\300\36\0\2\50"+
    "\7\0\7\50\1\301\2\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\7\50\1\302\2\50\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\35\0\1\303\75\0\1\304"+
    "\15\0\2\50\7\0\4\50\1\305\5\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\1\50\1\233"+
    "\10\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\27\0\1\306"+
    "\61\0\1\307\56\0\1\310\42\0\2\50\7\0\11\50"+
    "\1\233\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\4\50\1\311\5\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\1\312\11\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\1\50\1\313"+
    "\10\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\3\0\4\50\1\314\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\2\50\1\315\7\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\10\50\1\316"+
    "\1\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\6\50\1\317\3\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\23\0\1\320\2\0\1\321\62\0\1\322\103\0"+
    "\1\323\33\0\1\324\2\0\1\325\40\0\2\50\7\0"+
    "\1\50\1\326\10\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\12\50\3\0\5\50\3\0\1\50"+
    "\1\0\1\233\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\1\327\34\0\1\327\1\117\22\0\2\50"+
    "\7\0\12\50\1\330\2\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\11\50\1\331\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\17\0\1\332\47\0\2\50\7\0\11\50"+
    "\1\333\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\25\0\1\334"+
    "\41\0\2\50\7\0\10\50\1\335\1\50\3\0\5\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\5\50\1\336"+
    "\4\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\23\0\1\337"+
    "\65\0\1\340\37\0\2\50\7\0\11\50\1\341\3\0"+
    "\5\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\34\0\1\342\63\0\1\343"+
    "\50\0\1\344\41\0\2\50\7\0\5\50\1\345\4\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\10\50\1\346\1\50\3\0\5\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\11\50\1\347\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\5\0\2\50\7\0\5\50\1\350\4\50"+
    "\3\0\5\50\3\0\1\50\1\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\5\0\2\50\7\0"+
    "\12\50\3\0\1\50\1\351\3\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\11\50\1\352\3\0\5\50\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\22\0\1\353\62\0\1\354\72\0\1\355"+
    "\51\0\1\356\102\0\1\357\21\0\2\50\7\0\6\50"+
    "\1\360\3\50\3\0\5\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\44\0"+
    "\1\117\71\0\1\361\12\0\2\50\7\0\6\50\1\233"+
    "\3\50\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\30\0\1\362"+
    "\36\0\2\50\7\0\12\50\3\0\4\50\1\363\3\0"+
    "\1\50\1\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\17\0\1\364\47\0\2\50\7\0\11\50"+
    "\1\365\3\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\3\0\4\50\1\366\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\34\0\1\367\63\0\1\370\30\0\2\50\7\0\12\50"+
    "\3\0\1\50\1\371\3\50\3\0\1\50\1\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\27\0"+
    "\1\372\51\0\1\373\76\0\1\374\32\0\2\50\7\0"+
    "\12\50\3\0\1\50\1\233\3\50\3\0\1\50\1\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\5\0\2\50\7\0\12\50\3\0\1\50\1\375\3\50"+
    "\3\0\1\50\1\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\5\0\2\50\7\0\12\50\3\0"+
    "\1\50\1\376\3\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\5\0\2\50"+
    "\7\0\12\50\3\0\1\50\1\222\3\50\3\0\1\50"+
    "\1\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\5\0\2\50\7\0\12\50\3\0\1\50\1\377"+
    "\3\50\3\0\1\50\1\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\17\0\1\u0100\66\0\1\u0101"+
    "\64\0\1\u0102\57\0\1\u0103\105\0\1\u0104\61\0\1\u0105"+
    "\36\0\1\203\57\0\1\u0106\60\0\1\u0107\54\0\1\u0108"+
    "\77\0\1\u0109\50\0\1\u010a\43\0\2\50\7\0\12\50"+
    "\1\u010b\2\0\5\50\3\0\1\50\1\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\20\0\1\u010c"+
    "\63\0\1\u010d\65\0\1\u010e\57\0\1\u010f\60\0\1\u0110"+
    "\60\0\1\u0111\63\0\1\u0112\60\0\1\u0113\54\0\1\u0114"+
    "\67\0\1\u0115\54\0\1\u0116\76\0\1\u0117\44\0\1\u0118"+
    "\76\0\1\u0119\47\0\1\u011a\61\0\1\u011b\62\0\1\u011c"+
    "\74\0\1\u011d\52\0\1\u011e\56\0\1\u011f\64\0\1\u0120"+
    "\55\0\1\370\72\0\1\u0121\51\0\1\u0122\74\0\1\u0123"+
    "\56\0\1\u0124\44\0\1\u0125\64\0\1\u0126\65\0\1\u0127"+
    "\72\0\1\u0128\51\0\1\u0129\51\0\1\u012a\100\0\1\u012b"+
    "\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\24\1\4\11\1\1\2\11"+
    "\2\1\3\11\2\0\1\1\3\11\1\0\1\1\5\0"+
    "\1\1\17\0\1\11\10\0\1\1\5\0\1\11\1\0"+
    "\1\1\22\0\1\1\3\0\1\1\5\0\1\11\5\0"+
    "\1\11\3\0\1\11\2\0\1\1\5\0\1\1\24\0"+
    "\1\1\1\0\1\1\27\0\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\1\1\15\0\1\1\11\0\1\11\23\0"+
    "\1\1\6\0\1\1\2\0\1\1\1\0\2\1\1\0"+
    "\1\11\1\1\3\0\3\1\2\0\1\11\6\0\1\11"+
    "\5\0\2\11\5\0\1\11\6\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { lexeme=yytext(); return Parametros;
          }
        case 63: break;
        case 33: 
          { lexeme=yytext(); return Para;
          }
        case 64: break;
        case 44: 
          { lexeme=yytext(); return Funcion;
          }
        case 65: break;
        case 57: 
          { lexeme=yytext(); return ImprimirSalto;
          }
        case 66: break;
        case 54: 
          { lexeme=yytext(); return FinSegun;
          }
        case 67: break;
        case 45: 
          { lexeme=yytext(); return Mientras;
          }
        case 68: break;
        case 32: 
          { lexeme=yytext(); return OSi;
          }
        case 69: break;
        case 16: 
          { lexeme = yytext(); return CorcheteA;
          }
        case 70: break;
        case 4: 
          { lexeme=yytext(); return Linea;
          }
        case 71: break;
        case 49: 
          { lexeme=yytext(); return Imprimir;
          }
        case 72: break;
        case 11: 
          { lexeme = yytext(); return LLaveC;
          }
        case 73: break;
        case 27: 
          { lexeme=yytext(); return Módulo;
          }
        case 74: break;
        case 31: 
          { lexeme=yytext(); return ComentarioMultilinea;
          }
        case 75: break;
        case 39: 
          { lexeme=yytext(); return Hacer;
          }
        case 76: break;
        case 56: 
          { lexeme=yytext(); return FinMetodo;
          }
        case 77: break;
        case 18: 
          { lexeme = yytext(); return Interrogacion1;
          }
        case 78: break;
        case 26: 
          { lexeme=yytext(); return LLamada;
          }
        case 79: break;
        case 59: 
          { lexeme=yytext(); return FinMientras;
          }
        case 80: break;
        case 14: 
          { lexeme = yytext(); return ParentesisA;
          }
        case 81: break;
        case 9: 
          { lexeme=yytext(); return Division;
          }
        case 82: break;
        case 34: 
          { lexeme=yytext(); return Como;
          }
        case 83: break;
        case 43: 
          { lexeme=yytext(); return Repetir;
          }
        case 84: break;
        case 21: 
          { lexeme=yytext(); return Asignacion;
          }
        case 85: break;
        case 62: 
          { lexeme=yytext(); return Incremental;
          }
        case 86: break;
        case 2: 
          { lexeme=yytext(); return Numero;
          }
        case 87: break;
        case 22: 
          { lexeme=yytext(); return Comentario;
          }
        case 88: break;
        case 55: 
          { lexeme=yytext(); return HastaQue;
          }
        case 89: break;
        case 53: 
          { lexeme=yytext(); return ConValor;
          }
        case 90: break;
        case 3: 
          { /*ignore*/
          }
        case 91: break;
        case 17: 
          { lexeme = yytext(); return CorcheteC;
          }
        case 92: break;
        case 61: 
          { lexeme=yytext(); return DeloContrario;
          }
        case 93: break;
        case 42: 
          { lexeme=yytext(); return FinSi;
          }
        case 94: break;
        case 23: 
          { lexeme=yytext(); return OperadorLogico;
          }
        case 95: break;
        case 24: 
          { lexeme=yytext(); return Cadena;
          }
        case 96: break;
        case 40: 
          { lexeme=yytext(); return Hasta;
          }
        case 97: break;
        case 12: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 98: break;
        case 7: 
          { lexeme=yytext(); return Resta;
          }
        case 99: break;
        case 47: 
          { lexeme=yytext(); return Entonces;
          }
        case 100: break;
        case 46: 
          { lexeme=yytext(); return Potencia;
          }
        case 101: break;
        case 15: 
          { lexeme = yytext(); return ParentesisC;
          }
        case 102: break;
        case 28: 
          { lexeme=yytext(); return Variable;
          }
        case 103: break;
        case 50: 
          { lexeme=yytext(); return Ingresar;
          }
        case 104: break;
        case 51: 
          { lexeme=yytext(); return Retornar;
          }
        case 105: break;
        case 58: 
          { lexeme=yytext(); return FinFuncion;
          }
        case 106: break;
        case 1: 
          { lexeme=yytext()+" ("+yyline+","+yycolumn+")"; return ERROR;
          }
        case 107: break;
        case 37: 
          { lexeme=yytext(); return Booleano;
          }
        case 108: break;
        case 25: 
          { lexeme=yytext(); return Si;
          }
        case 109: break;
        case 8: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 110: break;
        case 10: 
          { lexeme = yytext(); return LLaveA;
          }
        case 111: break;
        case 52: 
          { lexeme=yytext(); return FinPara;
          }
        case 112: break;
        case 30: 
          { lexeme=yytext(); return Caracter;
          }
        case 113: break;
        case 38: 
          { lexeme=yytext(); return Segun;
          }
        case 114: break;
        case 29: 
          { lexeme=yytext(); return Global;
          }
        case 115: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 116: break;
        case 13: 
          { lexeme=yytext(); return Coma;
          }
        case 117: break;
        case 35: 
          { lexeme=yytext(); return TipoDato;
          }
        case 118: break;
        case 36: 
          { lexeme = yytext(); return OperadorRelacional;
          }
        case 119: break;
        case 48: 
          { lexeme=yytext(); return Ejecutar;
          }
        case 120: break;
        case 41: 
          { lexeme=yytext(); return Metodo;
          }
        case 121: break;
        case 19: 
          { lexeme = yytext(); return OperadorAtribucion;
          }
        case 122: break;
        case 20: 
          { lexeme = yytext(); return OperadorIncremento;
          }
        case 123: break;
        case 6: 
          { lexeme=yytext(); return Suma;
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
