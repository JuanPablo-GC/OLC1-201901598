
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\004" +
    "\000\002\003\004\000\002\004\004\000\002\005\005\000" +
    "\002\005\005\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\031\005\000\002\031\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\003" +
    "\000\002\011\007\000\002\011\015\000\002\011\011\000" +
    "\002\011\004\000\002\012\014\000\002\013\013\000\002" +
    "\013\015\000\002\014\007\000\002\015\006\000\002\010" +
    "\004\000\002\010\004\000\002\017\004\000\002\017\006" +
    "\000\002\016\012\000\002\016\010\000\002\020\012\000" +
    "\002\020\006\000\002\022\003\000\002\022\005\000\002" +
    "\022\003\000\002\022\005\000\002\021\007\000\002\021" +
    "\010\000\002\024\007\000\002\024\007\000\002\030\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\023\007\000\002\023\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\026\011\000\002\026\011\000" +
    "\002\026\011\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\040\003\032\010\033\016\007\017\010\020" +
    "\025\026\004\033\027\036\017\042\013\044\026\047\037" +
    "\052\023\054\030\056\012\057\036\001\002\000\012\010" +
    "\104\011\100\013\211\065\102\001\002\000\066\002\uffed" +
    "\003\uffed\010\uffed\016\uffed\017\uffed\020\uffed\026\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\035\uffed\036\uffed\040\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\052\uffed\053\uffed\054\uffed\056\uffed\057\uffed\001\002" +
    "\000\066\002\uffdd\003\uffdd\010\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\054\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\066\002\uffa9\003\uffa9\010\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\026\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\056\uffa9\057\uffa9\001\002\000\066\002\uffa8\003" +
    "\uffa8\010\uffa8\016\uffa8\017\uffa8\020\uffa8\026\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8\040\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\056\uffa8\057\uffa8\001\002\000" +
    "\044\002\000\003\032\010\033\016\007\017\010\020\025" +
    "\026\004\033\027\036\017\042\013\044\026\046\070\047" +
    "\037\052\023\054\030\056\012\057\036\001\002\000\014" +
    "\010\104\011\100\012\267\054\030\065\102\001\002\000" +
    "\012\010\104\011\100\013\211\065\102\001\002\000\066" +
    "\002\ufff4\003\ufff4\010\ufff4\016\ufff4\017\ufff4\020\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4\036\ufff4" +
    "\040\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4" +
    "\001\002\000\066\002\uffe7\003\uffe7\010\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\035\uffe7\036\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\056\uffe7\057\uffe7\001\002\000\066\002\uffdf\003\uffdf\010" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\035\uffdf\036\uffdf\040\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\056\uffdf\057\uffdf\001\002\000\004\010" +
    "\244\001\002\000\066\002\uffef\003\uffef\010\uffef\016\uffef" +
    "\017\uffef\020\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\035\uffef\036\uffef\040\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef\053\uffef\054" +
    "\uffef\056\uffef\057\uffef\001\002\000\066\002\ufff6\003\ufff6" +
    "\010\ufff6\016\ufff6\017\ufff6\020\ufff6\026\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\056\ufff6\057\ufff6\001\002\000\066" +
    "\002\uffe5\003\uffe5\010\uffe5\016\uffe5\017\uffe5\020\uffe5\026" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5" +
    "\001\002\000\004\010\233\001\002\000\066\002\uffe1\003" +
    "\uffe1\010\uffe1\016\uffe1\017\uffe1\020\uffe1\026\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\001\002\000" +
    "\004\010\221\001\002\000\040\003\032\010\033\016\007" +
    "\017\010\020\025\026\004\033\027\036\017\042\013\044" +
    "\026\047\037\052\023\054\030\056\012\057\036\001\002" +
    "\000\004\010\174\001\002\000\004\010\160\001\002\000" +
    "\066\002\uffe9\003\uffe9\010\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\052\uffe9\053\uffe9\054\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\010\016\157\024\156\030\155\001\002" +
    "\000\010\023\143\063\144\064\142\001\002\000\066\002" +
    "\uffdb\003\uffdb\010\uffdb\016\uffdb\017\uffdb\020\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb\057\uffdb\001" +
    "\002\000\066\002\uffeb\003\uffeb\010\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb\056" +
    "\uffeb\057\uffeb\001\002\000\010\010\135\011\134\012\136" +
    "\001\002\000\004\010\044\001\002\000\066\002\ufff2\003" +
    "\ufff2\010\ufff2\016\ufff2\017\ufff2\020\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\035\ufff2\036\ufff2\040\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\056\ufff2\057\ufff2\001\002\000" +
    "\004\002\043\001\002\000\066\002\uffe3\003\uffe3\010\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\056\uffe3\057\uffe3\001\002\000\004\002\001" +
    "\001\002\000\006\051\046\065\045\001\002\000\004\066" +
    "\131\001\002\000\004\065\047\001\002\000\004\010\050" +
    "\001\002\000\004\060\130\001\002\000\006\025\053\066" +
    "\052\001\002\000\040\003\032\010\033\016\007\017\010" +
    "\020\025\026\004\033\027\036\017\042\013\044\026\047" +
    "\037\052\023\054\030\056\012\057\036\001\002\000\004" +
    "\010\054\001\002\000\004\060\055\001\002\000\006\025" +
    "\uffc8\066\uffc8\001\002\000\044\003\032\010\033\016\007" +
    "\017\010\020\025\026\004\033\027\036\017\042\013\044" +
    "\026\046\070\047\037\050\076\052\023\054\030\056\012" +
    "\057\036\001\002\000\066\002\uffee\003\uffee\010\uffee\016" +
    "\uffee\017\uffee\020\uffee\026\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\035\uffee\036\uffee\040\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee\053\uffee" +
    "\054\uffee\056\uffee\057\uffee\001\002\000\066\002\uffde\003" +
    "\uffde\010\uffde\016\uffde\017\uffde\020\uffde\026\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\035\uffde\036\uffde\040\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\052\uffde\053\uffde\054\uffde\056\uffde\057\uffde\001\002\000" +
    "\066\002\ufff5\003\ufff5\010\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\036" +
    "\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\057" +
    "\ufff5\001\002\000\066\002\uffe8\003\uffe8\010\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\035\uffe8\036\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\056\uffe8\057\uffe8\001\002\000\066\002\uffe0\003\uffe0" +
    "\010\uffe0\016\uffe0\017\uffe0\020\uffe0\026\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0\001\002\000\066" +
    "\002\ufff0\003\ufff0\010\ufff0\016\ufff0\017\ufff0\020\ufff0\026" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0\057\ufff0" +
    "\001\002\000\066\002\ufff7\003\ufff7\010\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\056\ufff7\057\ufff7\001\002\000\066\002\uffe6\003\uffe6\010" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\035\uffe6\036\uffe6\040\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\056\uffe6\057\uffe6\001\002\000\066\002" +
    "\uffe2\003\uffe2\010\uffe2\016\uffe2\017\uffe2\020\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\040" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2\001" +
    "\002\000\012\010\104\011\100\013\101\065\102\001\002" +
    "\000\066\002\ufff1\003\ufff1\010\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1" +
    "\036\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\052\ufff1\053\ufff1\054\ufff1\056\ufff1" +
    "\057\ufff1\001\002\000\066\002\uffea\003\uffea\010\uffea\016" +
    "\uffea\017\uffea\020\uffea\026\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\035\uffea\036\uffea\040\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\053\uffea" +
    "\054\uffea\056\uffea\057\uffea\001\002\000\066\002\uffdc\003" +
    "\uffdc\010\uffdc\016\uffdc\017\uffdc\020\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\040\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\056\uffdc\057\uffdc\001\002\000" +
    "\066\002\uffec\003\uffec\010\uffec\016\uffec\017\uffec\020\uffec" +
    "\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036" +
    "\uffec\040\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\052\uffec\053\uffec\054\uffec\056\uffec\057" +
    "\uffec\001\002\000\066\002\ufff3\003\ufff3\010\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\056\ufff3\057\ufff3\001\002\000\066\002\uffc7\003\uffc7" +
    "\010\uffc7\016\uffc7\017\uffc7\020\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\040\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7\001\002\000\066" +
    "\002\uffe4\003\uffe4\010\uffe4\016\uffe4\017\uffe4\020\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\116\002\uffb9\003\uffb9\006\uffb9\007\122\010" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9\066\uffb9" +
    "\072\uffb9\001\002\000\066\002\uffca\003\uffca\010\uffca\016" +
    "\uffca\017\uffca\020\uffca\026\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\035\uffca\036\uffca\040\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053\uffca" +
    "\054\uffca\056\uffca\057\uffca\001\002\000\010\010\104\011" +
    "\100\065\102\001\002\000\114\002\uffb5\003\uffb5\006\uffb5" +
    "\010\uffb5\016\uffb5\017\uffb5\020\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5\066" +
    "\uffb5\072\uffb5\001\002\000\116\002\uffb7\003\uffb7\006\uffb7" +
    "\007\114\010\uffb7\016\uffb7\017\uffb7\020\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\061\uffb7\062" +
    "\uffb7\066\uffb7\072\uffb7\001\002\000\112\002\uffbb\003\uffbb" +
    "\006\107\010\uffbb\016\uffbb\017\uffbb\020\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\061\uffbb\062" +
    "\uffbb\066\uffbb\001\002\000\066\002\uffcb\003\uffcb\010\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\026\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\056\uffcb\057\uffcb\001\002\000\010\010\113" +
    "\011\110\065\111\001\002\000\116\002\uffba\003\uffba\006" +
    "\uffba\007\122\010\uffba\016\uffba\017\uffba\020\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\052\uffba\053\uffba\054\uffba\056\uffba\057\uffba\061\uffba" +
    "\062\uffba\066\uffba\072\uffba\001\002\000\010\010\104\011" +
    "\100\065\102\001\002\000\114\002\uffb6\003\uffb6\006\uffb6" +
    "\010\uffb6\016\uffb6\017\uffb6\020\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\056\uffb6\057\uffb6\061\uffb6\062\uffb6\066" +
    "\uffb6\072\uffb6\001\002\000\116\002\uffb8\003\uffb8\006\uffb8" +
    "\007\114\010\uffb8\016\uffb8\017\uffb8\020\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\056\uffb8\057\uffb8\061\uffb8\062" +
    "\uffb8\066\uffb8\072\uffb8\001\002\000\004\071\115\001\002" +
    "\000\010\010\104\011\100\065\102\001\002\000\006\006" +
    "\107\072\117\001\002\000\114\002\uffbd\003\uffbd\006\uffbd" +
    "\010\uffbd\016\uffbd\017\uffbd\020\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\066" +
    "\uffbd\072\uffbd\001\002\000\006\006\107\066\121\001\002" +
    "\000\114\002\uffb4\003\uffb4\006\uffb4\010\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\056" +
    "\uffb4\057\uffb4\061\uffb4\062\uffb4\066\uffb4\072\uffb4\001\002" +
    "\000\004\071\123\001\002\000\010\010\104\011\100\065" +
    "\102\001\002\000\006\006\107\072\125\001\002\000\114" +
    "\002\uffbc\003\uffbc\006\uffbc\010\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\057" +
    "\uffbc\061\uffbc\062\uffbc\066\uffbc\072\uffbc\001\002\000\006" +
    "\006\107\066\127\001\002\000\114\002\uffb3\003\uffb3\006" +
    "\uffb3\010\uffb3\016\uffb3\017\uffb3\020\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3" +
    "\066\uffb3\072\uffb3\001\002\000\006\025\uffc9\066\uffc9\001" +
    "\002\000\040\003\032\010\033\016\007\017\010\020\025" +
    "\026\004\033\027\036\017\042\013\044\026\047\037\052" +
    "\023\054\030\056\012\057\036\001\002\000\044\003\032" +
    "\010\033\016\007\017\010\020\025\026\004\033\027\036" +
    "\017\042\013\044\026\046\070\047\037\050\133\052\023" +
    "\054\030\056\012\057\036\001\002\000\066\002\uffc6\003" +
    "\uffc6\010\uffc6\016\uffc6\017\uffc6\020\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\040\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\001\002\000" +
    "\004\024\141\001\002\000\004\024\140\001\002\000\004" +
    "\024\137\001\002\000\066\002\uffae\003\uffae\010\uffae\016" +
    "\uffae\017\uffae\020\uffae\026\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\035\uffae\036\uffae\040\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\052\uffae\053\uffae" +
    "\054\uffae\056\uffae\057\uffae\001\002\000\066\002\uffaf\003" +
    "\uffaf\010\uffaf\016\uffaf\017\uffaf\020\uffaf\026\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\040\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\001\002\000" +
    "\066\002\uffad\003\uffad\010\uffad\016\uffad\017\uffad\020\uffad" +
    "\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036" +
    "\uffad\040\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\052\uffad\053\uffad\054\uffad\056\uffad\057" +
    "\uffad\001\002\000\066\002\ufffa\003\ufffa\010\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\056\ufffa\057\ufffa\001\002\000\014\010\104\011\100" +
    "\012\151\013\147\065\102\001\002\000\006\010\146\011" +
    "\145\001\002\000\066\002\ufff9\003\ufff9\010\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\036\ufff9\040\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\056\ufff9\057\ufff9\001\002\000\066\002\ufff8\003\ufff8" +
    "\010\ufff8\016\ufff8\017\ufff8\020\ufff8\026\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\056\ufff8\057\ufff8\001\002\000\004" +
    "\024\154\001\002\000\004\024\153\001\002\000\004\024" +
    "\152\001\002\000\066\002\uffff\003\uffff\010\uffff\016\uffff" +
    "\017\uffff\020\uffff\026\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\035\uffff\036\uffff\040\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\050\uffff\052\uffff\053\uffff\054" +
    "\uffff\056\uffff\057\uffff\001\002\000\066\002\ufffe\003\ufffe" +
    "\010\ufffe\016\ufffe\017\ufffe\020\ufffe\026\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\035\ufffe\036\ufffe\040\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\001\002\000\066" +
    "\002\ufffd\003\ufffd\010\ufffd\016\ufffd\017\ufffd\020\ufffd\026" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\035\ufffd\036\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd\056\ufffd\057\ufffd" +
    "\001\002\000\066\002\uffd1\003\uffd1\010\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\056\uffd1\057\uffd1\001\002\000\066\002\ufffc\003\ufffc\010" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\026\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\035\ufffc\036\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\056\ufffc\057\ufffc\001\002\000\066\002" +
    "\ufffb\003\ufffb\010\ufffb\016\ufffb\017\ufffb\020\ufffb\026\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\040" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\052\ufffb\053\ufffb\054\ufffb\056\ufffb\057\ufffb\001" +
    "\002\000\004\065\161\001\002\000\014\010\104\011\100" +
    "\012\162\065\102\066\164\001\002\000\006\025\uffc3\066" +
    "\uffc3\001\002\000\006\025\uffc1\066\uffc1\001\002\000\004" +
    "\024\173\001\002\000\006\025\167\066\166\001\002\000" +
    "\004\024\172\001\002\000\012\010\104\011\100\012\171" +
    "\065\102\001\002\000\010\006\107\025\uffc0\066\uffc0\001" +
    "\002\000\006\025\uffc2\066\uffc2\001\002\000\066\002\uffbe" +
    "\003\uffbe\010\uffbe\016\uffbe\017\uffbe\020\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\040\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe\057\uffbe\001\002" +
    "\000\066\002\uffbf\003\uffbf\010\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\040\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf" +
    "\057\uffbf\001\002\000\004\034\175\001\002\000\004\011" +
    "\176\001\002\000\004\027\177\001\002\000\040\003\032" +
    "\010\033\016\007\017\010\020\025\026\004\033\027\036" +
    "\017\042\013\044\026\047\037\052\023\054\030\056\012" +
    "\057\036\001\002\000\044\003\032\010\033\016\007\017" +
    "\010\020\025\026\004\031\201\033\027\036\017\042\013" +
    "\044\026\046\070\047\037\052\023\054\030\056\012\057" +
    "\036\001\002\000\004\027\202\001\002\000\040\003\032" +
    "\010\033\016\007\017\010\020\025\026\004\033\027\036" +
    "\017\042\013\044\026\047\037\052\023\054\030\056\012" +
    "\057\036\001\002\000\044\003\032\010\033\016\007\017" +
    "\010\020\025\026\004\033\027\035\204\036\017\042\013" +
    "\044\026\046\070\047\037\052\023\054\030\056\012\057" +
    "\036\001\002\000\066\002\uffd0\003\uffd0\010\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\035\uffd0\036\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\056\uffd0\057\uffd0\001\002\000\044\003\032\010\033" +
    "\016\007\017\010\020\025\026\004\033\027\036\017\042" +
    "\013\044\026\045\206\046\070\047\037\052\023\054\030" +
    "\056\012\057\036\001\002\000\012\010\104\011\100\013" +
    "\211\065\102\001\002\000\102\002\uffd5\003\uffd5\006\107" +
    "\010\uffd5\016\uffd5\017\uffd5\020\uffd5\024\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5" +
    "\057\uffd5\061\uffd5\062\uffbb\001\002\000\004\062\216\001" +
    "\002\000\076\002\uffd8\003\uffd8\010\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\056\uffd8\057\uffd8\061\uffd8\001\002" +
    "\000\076\002\uffd7\003\uffd7\010\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\056\uffd7\057\uffd7\061\uffd7\001\002\000" +
    "\070\002\uffcc\003\uffcc\010\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036" +
    "\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\057" +
    "\uffcc\061\214\001\002\000\010\010\104\011\100\065\102" +
    "\001\002\000\076\002\uffd6\003\uffd6\010\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6\061\uffd6\001" +
    "\002\000\012\010\104\011\100\013\217\065\102\001\002" +
    "\000\076\002\uffd9\003\uffd9\010\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\057\uffd9\061\uffd9\001\002\000" +
    "\076\002\uffda\003\uffda\010\uffda\016\uffda\017\uffda\020\uffda" +
    "\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\040\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053" +
    "\uffda\054\uffda\056\uffda\057\uffda\061\uffda\001\002\000\004" +
    "\021\222\001\002\000\004\060\223\001\002\000\004\022" +
    "\224\001\002\000\016\010\104\011\100\012\225\013\211" +
    "\014\226\065\102\001\002\000\004\024\232\001\002\000" +
    "\004\024\231\001\002\000\006\024\230\061\214\001\002" +
    "\000\066\002\uffaa\003\uffaa\010\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa" +
    "\036\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa" +
    "\057\uffaa\001\002\000\066\002\uffab\003\uffab\010\uffab\016" +
    "\uffab\017\uffab\020\uffab\026\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\035\uffab\036\uffab\040\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab\053\uffab" +
    "\054\uffab\056\uffab\057\uffab\001\002\000\066\002\uffac\003" +
    "\uffac\010\uffac\016\uffac\017\uffac\020\uffac\026\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\035\uffac\036\uffac\040\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\052\uffac\053\uffac\054\uffac\056\uffac\057\uffac\001\002\000" +
    "\042\003\032\010\033\016\007\017\010\020\025\026\004" +
    "\033\027\036\017\042\013\044\026\047\037\051\235\052" +
    "\023\054\030\056\012\057\036\001\002\000\044\003\032" +
    "\010\033\016\007\017\010\020\025\026\004\033\027\036" +
    "\017\042\013\044\026\046\070\047\037\052\023\053\243" +
    "\054\030\056\012\057\036\001\002\000\004\065\236\001" +
    "\002\000\004\010\050\001\002\000\006\025\053\066\240" +
    "\001\002\000\040\003\032\010\033\016\007\017\010\020" +
    "\025\026\004\033\027\036\017\042\013\044\026\047\037" +
    "\052\023\054\030\056\012\057\036\001\002\000\044\003" +
    "\032\010\033\016\007\017\010\020\025\026\004\033\027" +
    "\036\017\042\013\044\026\046\070\047\037\052\023\053" +
    "\242\054\030\056\012\057\036\001\002\000\066\002\uffc5" +
    "\003\uffc5\010\uffc5\016\uffc5\017\uffc5\020\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5\040\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\001\002" +
    "\000\066\002\uffc4\003\uffc4\010\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4" +
    "\036\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4" +
    "\057\uffc4\001\002\000\004\023\245\001\002\000\010\010" +
    "\104\011\100\065\102\001\002\000\004\037\247\001\002" +
    "\000\010\010\104\011\100\065\102\001\002\000\006\034" +
    "\252\041\251\001\002\000\010\010\104\011\100\065\102" +
    "\001\002\000\040\003\032\010\033\016\007\017\010\020" +
    "\025\026\004\033\027\036\017\042\013\044\026\047\037" +
    "\052\023\054\030\056\012\057\036\001\002\000\044\003" +
    "\032\010\033\016\007\017\010\020\025\026\004\033\027" +
    "\036\017\040\254\042\013\044\026\046\070\047\037\052" +
    "\023\054\030\056\012\057\036\001\002\000\066\002\uffcf" +
    "\003\uffcf\010\uffcf\016\uffcf\017\uffcf\020\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\040\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\001\002" +
    "\000\004\034\256\001\002\000\040\003\032\010\033\016" +
    "\007\017\010\020\025\026\004\033\027\036\017\042\013" +
    "\044\026\047\037\052\023\054\030\056\012\057\036\001" +
    "\002\000\044\003\032\010\033\016\007\017\010\020\025" +
    "\026\004\033\027\036\017\040\260\042\013\044\026\046" +
    "\070\047\037\052\023\054\030\056\012\057\036\001\002" +
    "\000\066\002\uffce\003\uffce\010\uffce\016\uffce\017\uffce\020" +
    "\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce" +
    "\036\uffce\040\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\052\uffce\053\uffce\054\uffce\056\uffce" +
    "\057\uffce\001\002\000\006\034\262\061\214\001\002\000" +
    "\040\003\032\010\033\016\007\017\010\020\025\026\004" +
    "\033\027\036\017\042\013\044\026\047\037\052\023\054" +
    "\030\056\012\057\036\001\002\000\044\003\032\010\033" +
    "\016\007\017\010\020\025\026\004\033\027\036\017\042" +
    "\013\043\264\044\026\046\070\047\037\052\023\054\030" +
    "\056\012\057\036\001\002\000\066\002\uffcd\003\uffcd\010" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\035\uffcd\036\uffcd\040\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\056\uffcd\057\uffcd\001\002\000\006\006" +
    "\107\024\271\001\002\000\066\002\uffb0\003\uffb0\010\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\026\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\035\uffb0\036\uffb0\040\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\056\uffb0\057\uffb0\001\002\000\004\024\270" +
    "\001\002\000\066\002\uffb1\003\uffb1\010\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\035\uffb1\036\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\056\uffb1\057\uffb1\001\002\000\066\002\uffb2\003\uffb2\010" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\026\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\056\uffb2\057\uffb2\001\002\000\006\027" +
    "\273\061\214\001\002\000\040\003\032\010\033\016\007" +
    "\017\010\020\025\026\004\033\027\036\017\042\013\044" +
    "\026\047\037\052\023\054\030\056\012\057\036\001\002" +
    "\000\050\003\032\010\033\016\007\017\010\020\025\026" +
    "\004\030\276\031\275\032\277\033\027\036\017\042\013" +
    "\044\026\046\070\047\037\052\023\054\030\056\012\057" +
    "\036\001\002\000\040\003\032\010\033\016\007\017\010" +
    "\020\025\026\004\033\027\036\017\042\013\044\026\047" +
    "\037\052\023\054\030\056\012\057\036\001\002\000\066" +
    "\002\uffd4\003\uffd4\010\uffd4\016\uffd4\017\uffd4\020\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4" +
    "\001\002\000\012\010\104\011\100\013\211\065\102\001" +
    "\002\000\006\027\301\061\214\001\002\000\040\003\032" +
    "\010\033\016\007\017\010\020\025\026\004\033\027\036" +
    "\017\042\013\044\026\047\037\052\023\054\030\056\012" +
    "\057\036\001\002\000\044\003\032\010\033\016\007\017" +
    "\010\020\025\026\004\031\303\033\027\036\017\042\013" +
    "\044\026\046\070\047\037\052\023\054\030\056\012\057" +
    "\036\001\002\000\040\003\032\010\033\016\007\017\010" +
    "\020\025\026\004\033\027\036\017\042\013\044\026\047" +
    "\037\052\023\054\030\056\012\057\036\001\002\000\044" +
    "\003\032\010\033\016\007\017\010\020\025\026\004\030" +
    "\305\033\027\036\017\042\013\044\026\046\070\047\037" +
    "\052\023\054\030\056\012\057\036\001\002\000\066\002" +
    "\uffd3\003\uffd3\010\uffd3\016\uffd3\017\uffd3\020\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\057\uffd3\001" +
    "\002\000\044\003\032\010\033\016\007\017\010\020\025" +
    "\026\004\030\307\033\027\036\017\042\013\044\026\046" +
    "\070\047\037\052\023\054\030\056\012\057\036\001\002" +
    "\000\066\002\uffd2\003\uffd2\010\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\042\002\040\003\020\004\013\005\037\006" +
    "\010\011\017\012\004\013\021\014\034\015\030\016\023" +
    "\020\041\021\014\025\015\026\005\027\033\001\001\000" +
    "\014\007\271\023\206\024\102\030\207\031\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\064\004\060\005\074\010\070" +
    "\011\063\012\056\013\065\014\073\015\071\016\066\020" +
    "\076\021\061\025\062\026\057\027\072\001\001\000\010" +
    "\021\265\023\264\024\102\001\001\000\014\007\260\023" +
    "\206\024\102\030\207\031\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\020\004\013\005\037\006\204\011\017\012\004\013\021" +
    "\014\034\015\030\016\023\020\041\021\014\025\015\026" +
    "\005\027\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\020\004\013\005\037" +
    "\006\055\011\017\012\004\013\021\014\034\015\030\016" +
    "\023\020\041\021\014\025\015\026\005\027\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\064\004\060\005\074\010\070\011\063\012\056" +
    "\013\065\014\073\015\071\016\066\020\076\021\061\025" +
    "\062\026\057\027\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\104\024\102\030\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\125\024\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\111" +
    "\001\001\000\002\001\001\000\006\023\117\024\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\115\024\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\123\024\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\020\004\013\005\037\006" +
    "\131\011\017\012\004\013\021\014\034\015\030\016\023" +
    "\020\041\021\014\025\015\026\005\027\033\001\001\000" +
    "\040\003\064\004\060\005\074\010\070\011\063\012\056" +
    "\013\065\014\073\015\071\016\066\020\076\021\061\025" +
    "\062\026\057\027\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\104\024\102\030\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\164\023\104\024\102\030\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\167\024\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\020\004\013\005\037\006\177\011\017\012" +
    "\004\013\021\014\034\015\030\016\023\020\041\021\014" +
    "\025\015\026\005\027\033\001\001\000\040\003\064\004" +
    "\060\005\074\010\070\011\063\012\056\013\065\014\073" +
    "\015\071\016\066\020\076\021\061\025\062\026\057\027" +
    "\072\001\001\000\002\001\001\000\040\003\020\004\013" +
    "\005\037\006\202\011\017\012\004\013\021\014\034\015" +
    "\030\016\023\020\041\021\014\025\015\026\005\027\033" +
    "\001\001\000\040\003\064\004\060\005\074\010\070\011" +
    "\063\012\056\013\065\014\073\015\071\016\066\020\076" +
    "\021\061\025\062\026\057\027\072\001\001\000\002\001" +
    "\001\000\040\003\064\004\060\005\074\010\070\011\063" +
    "\012\056\013\065\014\073\015\071\016\066\020\076\021" +
    "\061\025\062\026\057\027\072\001\001\000\014\007\212" +
    "\023\206\024\102\030\207\031\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\104\024\102\030\207\031" +
    "\214\001\001\000\002\001\001\000\010\023\104\024\102" +
    "\030\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\226\023\206\024\102\030\207\031\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\020\004\013\005\037\006\233\011\017\012\004\013\021" +
    "\014\034\015\030\016\023\020\041\021\014\025\015\026" +
    "\005\027\033\001\001\000\040\003\064\004\060\005\074" +
    "\010\070\011\063\012\056\013\065\014\073\015\071\016" +
    "\066\020\076\021\061\025\062\026\057\027\072\001\001" +
    "\000\002\001\001\000\004\017\236\001\001\000\002\001" +
    "\001\000\040\003\020\004\013\005\037\006\240\011\017" +
    "\012\004\013\021\014\034\015\030\016\023\020\041\021" +
    "\014\025\015\026\005\027\033\001\001\000\040\003\064" +
    "\004\060\005\074\010\070\011\063\012\056\013\065\014" +
    "\073\015\071\016\066\020\076\021\061\025\062\026\057" +
    "\027\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\104\024\102\030\245\001\001" +
    "\000\002\001\001\000\010\023\104\024\102\030\247\001" +
    "\001\000\002\001\001\000\010\023\104\024\102\030\254" +
    "\001\001\000\040\003\020\004\013\005\037\006\252\011" +
    "\017\012\004\013\021\014\034\015\030\016\023\020\041" +
    "\021\014\025\015\026\005\027\033\001\001\000\040\003" +
    "\064\004\060\005\074\010\070\011\063\012\056\013\065" +
    "\014\073\015\071\016\066\020\076\021\061\025\062\026" +
    "\057\027\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\020\004\013\005\037\006\256\011\017\012" +
    "\004\013\021\014\034\015\030\016\023\020\041\021\014" +
    "\025\015\026\005\027\033\001\001\000\040\003\064\004" +
    "\060\005\074\010\070\011\063\012\056\013\065\014\073" +
    "\015\071\016\066\020\076\021\061\025\062\026\057\027" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\020\004\013\005\037\006\262\011\017\012\004\013" +
    "\021\014\034\015\030\016\023\020\041\021\014\025\015" +
    "\026\005\027\033\001\001\000\040\003\064\004\060\005" +
    "\074\010\070\011\063\012\056\013\065\014\073\015\071" +
    "\016\066\020\076\021\061\025\062\026\057\027\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\020\004\013\005\037\006\273" +
    "\011\017\012\004\013\021\014\034\015\030\016\023\020" +
    "\041\021\014\025\015\026\005\027\033\001\001\000\040" +
    "\003\064\004\060\005\074\010\070\011\063\012\056\013" +
    "\065\014\073\015\071\016\066\020\076\021\061\025\062" +
    "\026\057\027\072\001\001\000\040\003\020\004\013\005" +
    "\037\006\305\011\017\012\004\013\021\014\034\015\030" +
    "\016\023\020\041\021\014\025\015\026\005\027\033\001" +
    "\001\000\002\001\001\000\014\007\277\023\206\024\102" +
    "\030\207\031\211\001\001\000\002\001\001\000\040\003" +
    "\020\004\013\005\037\006\301\011\017\012\004\013\021" +
    "\014\034\015\030\016\023\020\041\021\014\025\015\026" +
    "\005\027\033\001\001\000\040\003\064\004\060\005\074" +
    "\010\070\011\063\012\056\013\065\014\073\015\071\016" +
    "\066\020\076\021\061\025\062\026\057\027\072\001\001" +
    "\000\040\003\020\004\013\005\037\006\303\011\017\012" +
    "\004\013\021\014\034\015\030\016\023\020\041\021\014" +
    "\025\015\026\005\027\033\001\001\000\040\003\064\004" +
    "\060\005\074\010\070\011\063\012\056\013\065\014\073" +
    "\015\071\016\066\020\076\021\061\025\062\026\057\027" +
    "\072\001\001\000\002\001\001\000\040\003\064\004\060" +
    "\005\074\010\070\011\063\012\056\013\065\014\073\015" +
    "\071\016\066\020\076\021\061\025\062\026\057\027\072" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public static Nodo raiz;
        
    public Nodo getRaiz(){
            return raiz;
    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("ERROR Sintactico :"+ s.value+ "  Linea: " + (s.left+1) +" Columna: "+(s.right+1) );
        
}

    public Symbol getS(){
        return this.s;
    }

    public String ResultadoPython="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.raiz =(Nodo) a; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARAR ::= Variable Asignacion Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  ResultadoPython+=a +"="+c+"\n" ;
                System.out.println(ResultadoPython);
            Nodo padre = new Nodo("DECLARAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Variable", (String)a, aright, aleft));               //agregamos como hijo la variable
            padre.AddHijo(new Nodo("igual",(String) b, bright, bleft));             //agregamos como hijo el signo igual
            padre.AddHijo(new Nodo("Cadena", (String)c, bright, bleft));              //agregamos como hijola cadena 
            padre.AddHijo(new Nodo("PuntoComa", (String)d, cright, cleft));               //agregamos como hijo el punto y coma
            RESULT = padre;                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARAR ::= Variable Asignacion ARITMETICA2 PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Variable", (String)a, aright, aleft));               //agregamos como hijo la variable
            padre.AddHijo(new Nodo("igual",(String) b, bright, bleft));             //agregamos como hijo el signo igual
            padre.AddHijo((Nodo)c);              //agregamos como hijola 
            padre.AddHijo(new Nodo("PuntoComa", (String)d, cright, cleft));               //agregamos como hijo el punto y coma
            RESULT = padre;                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARAR ::= Variable Asignacion Booleano PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Variable", (String)a, aright, aleft));               //agregamos como hijo la variable
            padre.AddHijo(new Nodo("igual",(String) b, bright, bleft));             //agregamos como hijo el signo igual
            padre.AddHijo(new Nodo("Cadena", (String)c, bright, bleft));              //agregamos como hijo el booleno
            padre.AddHijo(new Nodo("PuntoComa", (String)d, cright, cleft));               //agregamos como hijo el punto y coma
            RESULT = padre;                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARAR ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARAR ::= error Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INCREMENTAR ::= Variable OperadorIncremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ATRIBUIR ::= Variable OperadorAtribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATRIBUIR ::= Variable OperadorAtribucion Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA ATRIBUIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ATRIBUIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA RETORNAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SEGUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= REPETIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA EJECUTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= PARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA INGRESAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= INGRESAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMPARADOR ::= ARITMETICA2 OperadorRelacional ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("COMPARADOR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica 
            padre.AddHijo(new Nodo("OperadorRelacional",(String) b, bright, bleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)c);              //agregamos como hijo la aritmetica
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMPARADOR ::= ARITMETICA2 OperadorRelacional Booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("COMPARADOR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica 
            padre.AddHijo(new Nodo("OperadorRelacional",(String) b, bright, bleft));             //agregamos como hijo el entonces
            padre.AddHijo(new Nodo("BOOLEANO",(String) c, cright, cleft));             //agregamos como hijo el booleano
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIABOOLEANA ::= Booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("Booleano",(String) a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIABOOLEANA ::= COMPARADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIABOOLEANA ::= SENTENCIABOOLEANA OperadorLogico COMPARADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIABOOLEANA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la la sentencia 1
            padre.AddHijo(new Nodo("OperadorLogico",(String) b, bright, bleft));             //agregamos como hijo el operador logico
            padre.AddHijo((Nodo)c);             //agregamos como hijo el comparador
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIABOOLEANA ::= ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = a;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)e, eright, eleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA OSi SENTENCIABOOLEANA Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) e, eright, eleft));             //agregamos como hijo el delocontrario
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)g, gright, gleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= error FinSi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SEGUN ::= Segun Variable Hacer Numero Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-SEGUN", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Segun", (String)a, aright, aleft));               //agregamos como hijo el segun del ciclo
            padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));              //agregamos como hijo la variable
            padre.AddHijo(new Nodo("Hacer",(String) c, cright, cleft));             //agregamos como hijo el hacer
            padre.AddHijo(new Nodo("Valor",(String) d, dright, dleft));             //agregamos como hijo el valor
            padre.AddHijo(new Nodo("Entonces",(String) e, eright, eleft));             //agregamos como hijo entonces
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) g, gright, gleft));             //agregamos como hijo el delocontrario
            padre.AddHijo(new Nodo("Entonces",(String) h, hright, hleft));             //agregamos como hijo entonces
            padre.AddHijo((Nodo)i);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSegun", (String)j, jright, jleft));               //agregamos como hijo el fin segun
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGUN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARA ::= Para Variable Asignacion ARITMETICA2 Hasta ARITMETICA2 Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-PARA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Para", (String)a, aright, aleft));               //agregamos como hijo el para del ciclo
            padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));              //agregamos como hijo la variable
            padre.AddHijo(new Nodo("Asignacion",(String) c, cright, cleft));             //agregamos como hijo la asignacion
            padre.AddHijo((Nodo)d);             //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hasta",(String) e, eright, eleft));             //agregamos como hijo hasta
            padre.AddHijo((Nodo)f);              //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hacer",(String) g, gright, gleft));             //agregamos como hijo el hacer
            padre.AddHijo((Nodo)h);             //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinPara", (String)i, iright, ileft));               //agregamos como hijo el fin para
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARA ::= Para Variable Asignacion ARITMETICA2 Hasta ARITMETICA2 Incremental ARITMETICA2 Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MIENTRAS ::= Mientras SENTENCIABOOLEANA Hacer SENTENCIA FinMientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-MIENTRAS", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Mientras", (String)a, aright, aleft));               //agregamos como hijo la palabra mientras
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Hacer",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMientras", (String)e, eright, eleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REPETIR ::= Repetir SENTENCIA HastaQue SENTENCIABOOLEANA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-REPETIR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Repetir", (String)a, aright, aleft));               //agregamos como hijo la palabra repetir
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("HastaQue",(String) c, cright, cleft));             //agregamos como hijo el hasta que
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentenciabooleana
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNAR ::= Retornar ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("RETORNAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Retornar", (String)a, aright, aleft));               //agregamos como hijo la palabra retornar
            padre.AddHijo((Nodo)b);              //agregamos como hijo lo que retornara
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETORNAR ::= Retornar Booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("RETORNAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Retornar", (String)a, aright, aleft));               //agregamos como hijo la palabra retornar
            padre.AddHijo(new Nodo("Booleano", (String)b, bright, bleft));               //agregamos como hijo la palabra retornar
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= Variable TipoDato 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Tipo", (String)a, aright, aleft));               //agregamos como hijo el tipo de dato
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= PARAMETROS Coma Variable TipoDato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a);                                     //se agregan los parametros anteriores
                padre.AddHijo(new Nodo("Variable", (String)c, cright, cleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Tipo", (String)d, dright, dleft));               //agregamos como hijo el tipo de dato
                RESULT = padre;  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= Metodo Variable Parametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("METODO", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Metodo", (String)a, aright, aleft));               //agregamos como hijo la palabra metodo
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre del metodo
            padre.AddHijo(new Nodo("ConParametros", (String)c, cright, cleft));               //agregamos como hijo el parametros
            padre.AddHijo(new Nodo("ParentesisA", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)e);              //agregamos como hijo los parametros
            padre.AddHijo(new Nodo("ParentesisC", (String)f, fright, fleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)g);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMetodo",(String) h, hright, hleft));             //agregamos como hijo el fin metodo
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= Metodo Variable ParentesisA ParentesisC SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("METODO", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Metodo", (String)a, aright, aleft));               //agregamos como hijo la palabra metodo
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre del metodo
            padre.AddHijo(new Nodo("ParentesisA", (String)c, cright, cleft));               //agregamos como hijo el parentesis
            padre.AddHijo(new Nodo("ParentesisC", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)e);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMetodo",(String) f, fright, fleft));             //agregamos como hijo el fin metodo
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= Funcion Variable Parametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= Funcion Variable SENTENCIA FinFuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSEJECUTAR ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Cadena", (String)a, aright, aleft));               //agregamos como hijo la cadena
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSEJECUTAR ::= PARAMETROSEJECUTAR Coma Cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)c);
                padre.AddHijo(new Nodo("Coma", (String)b, bright, bleft));               //agregamos como hijo la coma
                padre.AddHijo(new Nodo("Cadena", (String)a, aright, aleft));               //agregamos como hijo la cadena
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSEJECUTAR ::= ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSEJECUTAR ::= PARAMETROSEJECUTAR Coma ARITMETICA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)c);
                padre.AddHijo(new Nodo("Coma", (String)b, bright, bleft));               //agregamos como hijo la coma
                padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EJECUTAR ::= Ejecutar Variable ParentesisA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("EJECUTAR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Ejecutar", (String)a, aright, aleft));               //agregamos como hijo al ejecutar 
                padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo al nombre
                padre.AddHijo(new Nodo("ParentesisA",(String) c, cright, cleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("ParentesisC",(String) d, dright, dleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("PuntoComa",(String) e, eright, eleft));             //agregamos como hijo el punto coma
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EJECUTAR ::= Ejecutar Variable ParentesisA PARAMETROSEJECUTAR ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("EJECUTAR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Ejecutar", (String)a, aright, aleft));               //agregamos como hijo al ejecutar 
                padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo al nombre
                padre.AddHijo(new Nodo("ParentesisA",(String) c, cright, cleft));             //agregamos como hijo el parentesis
                padre.AddHijo((Nodo)f); 
                padre.AddHijo(new Nodo("ParentesisC",(String) d, dright, dleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("PuntoComa",(String) e, eright, eleft));             //agregamos como hijo el punto coma
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // POTENCIA ::= Variable Potencia CorcheteA ARITMETICA CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // POTENCIA ::= Numero Potencia CorcheteA ARITMETICA CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITMETICA2 ::= ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA2",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITMETICA ::= ARITMETICA OperadorAritmetico Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)b, bright, bleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("Numero",(String) c, cright, cleft));             //agregamos como hijo el signo igual 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("Numero", (String)a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre;                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= ARITMETICA OperadorAritmetico Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)b, bright, bleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("Variable",(String) c, cright, cleft));             //agregamos como hijo el signo igual 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("Variable", (String)a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre;                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITMETICA ::= ARITMETICA OperadorAritmetico POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARITMETICA ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARITMETICA ::= ARITMETICA OperadorAritmetico ParentesisA ARITMETICA ParentesisC 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)z); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)y, yright, yleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("ParentesisA", (String)a, aright, aleft));               //agregamos como hijo al parentesis abierto
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("ParentesisC",(String) c, cright, cleft));             //agregamos como hijo el parentesis cerrado  
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARITMETICA ::= ParentesisA ARITMETICA ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("ParentesisA", (String)a, aright, aleft));               //agregamos como hijo al parentesis abierto
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("ParentesisC",(String) c, cright, cleft));             //agregamos como hijo el parentesis cerrado
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPRIMIR ::= Imprimir ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntocoma
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IMPRIMIR ::= Imprimir Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo(new Nodo("Cadena",(String)b, bright, bleft));             //agregamos como hijo la cadena 
                padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntocoma
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IMPRIMIR ::= Imprimir EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo((Nodo)b);  
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IMPRIMIR ::= ImprimirSalto Variable PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPRIMIR ::= ImprimirSalto Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IMPRIMIR ::= ImprimirSalto Numero PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INGRESAR ::= Ingresar Variable Como TipoDato ConValor Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INGRESAR ::= Ingresar Variable Como TipoDato ConValor Caracter PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INGRESAR ::= Ingresar Variable Como TipoDato ConValor SENTENCIABOOLEANA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMENTARIO ::= Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMENTARIO ::= ComentarioMultilinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
