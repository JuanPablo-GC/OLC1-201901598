
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\004\004\000\002\005\005" +
    "\000\002\005\005\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\004\000\002\006\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\030\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\007\006\000\002\011\007\000\002\011" +
    "\015\000\002\011\021\000\002\011\011\000\002\011\004" +
    "\000\002\012\014\000\002\012\004\000\002\013\013\000" +
    "\002\013\015\000\002\013\004\000\002\014\007\000\002" +
    "\014\004\000\002\015\006\000\002\010\005\000\002\010" +
    "\005\000\002\017\004\000\002\017\006\000\002\016\012" +
    "\000\002\016\006\000\002\016\004\000\002\020\012\000" +
    "\002\020\006\000\002\020\004\000\002\022\003\000\002" +
    "\022\005\000\002\022\003\000\002\022\005\000\002\021" +
    "\007\000\002\021\010\000\002\024\007\000\002\024\007" +
    "\000\002\027\003\000\002\023\005\000\002\023\003\000" +
    "\002\023\005\000\002\023\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\007\000\002\023\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\026\011\000\002\026\005\000" +
    "\002\026\003\000\002\026\005\000\002\026\003\000\002" +
    "\026\005\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\050\003\033\010\014\011\051\012\030\013" +
    "\020\014\044\016\016\024\041\031\031\034\024\040\046" +
    "\042\015\045\005\050\034\052\027\054\035\055\025\061" +
    "\032\064\050\001\002\000\114\002\uffdd\003\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\054\uffdd\055\uffdd\057\uffdd\061" +
    "\uffdd\064\uffdd\001\002\000\004\010\306\001\002\000\076" +
    "\002\uffe2\003\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\016\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\054\uffe2\055\uffe2\061\uffe2\064\uffe2\001\002\000\076\002" +
    "\uffe6\003\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\016\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033" +
    "\uffe6\034\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\054" +
    "\uffe6\055\uffe6\061\uffe6\064\uffe6\001\002\000\076\002\uffe4" +
    "\003\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\055\uffe4\061\uffe4\064\uffe4\001\002\000\054\002\000\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\042\015\044\110\045" +
    "\005\050\034\052\027\054\035\055\025\061\032\064\050" +
    "\001\002\000\110\002\uffa6\003\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033" +
    "\uffa6\034\uffa6\036\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\054" +
    "\uffa6\055\uffa6\057\077\061\uffa6\064\uffa6\001\002\000\076" +
    "\002\ufff5\003\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\016\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\033\ufff5\034\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\054\ufff5\055\ufff5\061\ufff5\064\ufff5\001\002\000\116\002" +
    "\uffb6\003\uffb6\006\uffb6\007\065\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\021\uffb6\023\uffb6\024\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\303\063\302\064\uffb6\001\002\000" +
    "\050\003\033\010\014\011\051\012\030\013\020\014\044" +
    "\016\016\024\041\031\031\034\024\040\046\042\015\045" +
    "\005\050\034\052\027\054\035\055\025\061\032\064\050" +
    "\001\002\000\022\010\055\011\051\012\030\013\020\014" +
    "\044\016\016\061\032\064\050\001\002\000\076\002\ufff7" +
    "\003\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016" +
    "\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7" +
    "\034\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7" +
    "\055\ufff7\061\ufff7\064\ufff7\001\002\000\114\002\uffde\003" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\036\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055\uffde" +
    "\057\uffde\061\uffde\064\uffde\001\002\000\076\002\uffee\003" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee" +
    "\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034" +
    "\uffee\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\054\uffee\055" +
    "\uffee\061\uffee\064\uffee\001\002\000\116\002\uffdb\003\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\057" +
    "\uffdb\060\137\061\uffdb\064\uffdb\001\002\000\076\002\ufff9" +
    "\003\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016" +
    "\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\054\ufff9" +
    "\055\ufff9\061\ufff9\064\ufff9\001\002\000\004\010\254\001" +
    "\002\000\012\010\055\011\051\012\251\064\050\001\002" +
    "\000\076\002\ufff2\003\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\033\ufff2\034\ufff2\036\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\054\ufff2\055\ufff2\061\ufff2\064\ufff2\001\002\000" +
    "\004\010\234\001\002\000\106\002\uffaa\003\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\036\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\054\uffaa\055\uffaa\061\uffaa\064\uffaa\001\002\000" +
    "\004\010\223\001\002\000\004\064\220\001\002\000\020" +
    "\022\217\026\211\033\212\036\213\041\216\046\214\051" +
    "\215\001\002\000\004\010\173\001\002\000\014\010\055" +
    "\011\051\012\170\052\027\064\050\001\002\000\130\002" +
    "\uffb4\003\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\054\uffb4\055\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\064\uffb4\065\uffb4\071\uffb4\001\002\000\126\002\uffba" +
    "\003\uffba\006\057\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051" +
    "\uffba\052\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba" +
    "\064\uffba\065\uffba\001\002\000\102\002\uffe0\003\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\021\123" +
    "\023\122\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033" +
    "\uffe0\034\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\055\uffe0\061\uffe0\064\uffe0\001\002\000\014\010\055" +
    "\011\051\013\020\061\032\064\050\001\002\000\076\002" +
    "\uffec\003\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\016\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033" +
    "\uffec\034\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec\054" +
    "\uffec\055\uffec\061\uffec\064\uffec\001\002\000\076\002\ufff0" +
    "\003\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\036\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0" +
    "\055\ufff0\061\ufff0\064\ufff0\001\002\000\106\002\uffa8\003" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\036\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\054\uffa8\055\uffa8\061\uffa8\064\uffa8" +
    "\001\002\000\076\002\uffe8\003\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\024\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\054\uffe8\055\uffe8\061\uffe8\064\uffe8\001" +
    "\002\000\014\010\055\011\051\013\020\061\032\064\050" +
    "\001\002\000\004\002\075\001\002\000\010\010\055\011" +
    "\051\064\050\001\002\000\132\002\uffb8\003\uffb8\006\uffb8" +
    "\007\053\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\064\uffb8" +
    "\065\uffb8\071\uffb8\001\002\000\076\002\uffea\003\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\024\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\036" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\050\uffea\051\uffea\052\uffea\054\uffea\055\uffea\061" +
    "\uffea\064\uffea\001\002\000\004\070\054\001\002\000\010" +
    "\010\055\011\051\064\050\001\002\000\132\002\uffb6\003" +
    "\uffb6\006\uffb6\007\065\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\064\uffb6\065\uffb6\071\uffb6\001\002\000\006\006\057" +
    "\071\060\001\002\000\010\010\064\011\061\064\062\001" +
    "\002\000\130\002\uffbb\003\uffbb\006\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\064\uffbb\065\uffbb\071\uffbb\001\002" +
    "\000\132\002\uffb9\003\uffb9\006\uffb9\007\053\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\064\uffb9\065\uffb9\071\uffb9\001" +
    "\002\000\010\010\055\011\051\064\050\001\002\000\130" +
    "\002\uffb5\003\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\064\uffb5\065\uffb5\071\uffb5\001\002\000\132\002" +
    "\uffb7\003\uffb7\006\uffb7\007\065\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\064\uffb7\065\uffb7\071\uffb7\001\002\000\004" +
    "\070\066\001\002\000\010\010\055\011\051\064\050\001" +
    "\002\000\006\006\057\071\070\001\002\000\130\002\uffbc" +
    "\003\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\064\uffbc\065\uffbc\071\uffbc\001\002\000\006\006\057\065" +
    "\072\001\002\000\130\002\uffb3\003\uffb3\006\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\064\uffb3\065\uffb3\071\uffb3" +
    "\001\002\000\006\006\057\065\074\001\002\000\130\002" +
    "\uffb2\003\uffb2\006\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\064\uffb2\065\uffb2\071\uffb2\001\002\000\004\002\001" +
    "\001\002\000\006\032\100\057\077\001\002\000\010\010" +
    "\055\011\051\064\050\001\002\000\050\003\033\010\014" +
    "\011\051\012\030\013\020\014\044\016\016\024\041\031" +
    "\031\034\024\040\046\042\015\045\005\050\034\052\027" +
    "\054\035\055\025\061\032\064\050\001\002\000\054\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\041\102\042\015\044" +
    "\110\045\005\050\034\052\027\054\035\055\025\061\032" +
    "\064\050\001\002\000\076\002\uffcf\003\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\024\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\061\uffcf\064" +
    "\uffcf\001\002\000\076\002\uffe3\003\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\024\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\036\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\061\uffe3\064\uffe3" +
    "\001\002\000\076\002\uffe7\003\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\016\uffe7\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\034\uffe7\036\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\054\uffe7\055\uffe7\061\uffe7\064\uffe7\001" +
    "\002\000\076\002\uffe5\003\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\024\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\033\uffe5\034\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\054\uffe5\055\uffe5\061\uffe5\064\uffe5\001\002" +
    "\000\076\002\ufff6\003\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\033\ufff6\034\ufff6\036\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\054\ufff6\055\ufff6\061\ufff6\064\ufff6\001\002\000" +
    "\076\002\ufff8\003\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\016\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\033\ufff8\034\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\054\ufff8\055\ufff8\061\ufff8\064\ufff8\001\002\000\012" +
    "\010\055\011\051\013\131\064\050\001\002\000\076\002" +
    "\uffef\003\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\016\uffef\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033" +
    "\uffef\034\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\054" +
    "\uffef\055\uffef\061\uffef\064\uffef\001\002\000\076\002\ufffa" +
    "\003\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016" +
    "\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa" +
    "\034\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\055\ufffa\061\ufffa\064\ufffa\001\002\000\076\002\ufff3\003" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3" +
    "\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\055" +
    "\ufff3\061\ufff3\064\ufff3\001\002\000\102\002\uffe1\003\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\021" +
    "\123\023\122\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\054\uffe1\055\uffe1\061\uffe1\064\uffe1\001\002\000\076\002" +
    "\uffed\003\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\016\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033" +
    "\uffed\034\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed\054" +
    "\uffed\055\uffed\061\uffed\064\uffed\001\002\000\076\002\ufff1" +
    "\003\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1" +
    "\055\ufff1\061\ufff1\064\ufff1\001\002\000\076\002\uffe9\003" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\055" +
    "\uffe9\061\uffe9\064\uffe9\001\002\000\076\002\ufff4\003\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4\055\ufff4" +
    "\061\ufff4\064\ufff4\001\002\000\076\002\uffeb\003\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\055\uffeb\061" +
    "\uffeb\064\uffeb\001\002\000\020\010\055\011\051\012\126" +
    "\013\020\014\127\061\032\064\050\001\002\000\022\010" +
    "\055\011\051\012\030\013\020\014\044\016\016\061\032" +
    "\064\050\001\002\000\006\022\125\023\122\001\002\000" +
    "\076\002\uffff\003\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\016\uffff\024\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\033\uffff\034\uffff\036\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052" +
    "\uffff\054\uffff\055\uffff\061\uffff\064\uffff\001\002\000\106" +
    "\002\uffab\003\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab\036" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055\uffab\061" +
    "\uffab\064\uffab\001\002\000\106\002\uffa9\003\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\033\uffa9\034\uffa9\036\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\054\uffa9\055\uffa9\061\uffa9\064\uffa9\001\002\000" +
    "\110\002\uffa7\003\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7" +
    "\036\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\054\uffa7\055\uffa7" +
    "\057\077\061\uffa7\064\uffa7\001\002\000\004\022\134\001" +
    "\002\000\004\022\133\001\002\000\076\002\uffcc\003\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\024" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc" +
    "\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc" +
    "\061\uffcc\064\uffcc\001\002\000\076\002\uffcb\003\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\024\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\036" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\061" +
    "\uffcb\064\uffcb\001\002\000\114\002\uffdc\003\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\057\uffdc\061" +
    "\uffdc\064\uffdc\001\002\000\004\060\137\001\002\000\010" +
    "\010\055\011\051\064\050\001\002\000\116\002\uffdf\003" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\055\uffdf" +
    "\057\uffdf\061\uffdf\064\uffdf\065\uffdf\001\002\000\006\025" +
    "\142\057\077\001\002\000\050\003\033\010\014\011\051" +
    "\012\030\013\020\014\044\016\016\024\041\031\031\034" +
    "\024\040\046\042\015\045\005\050\034\052\027\054\035" +
    "\055\025\061\032\064\050\001\002\000\060\003\033\010" +
    "\014\011\051\012\030\013\020\014\044\016\016\024\041" +
    "\026\144\027\146\030\145\031\031\034\024\040\046\042" +
    "\015\044\110\045\005\050\034\052\027\054\035\055\025" +
    "\061\032\064\050\001\002\000\076\002\uffd9\003\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\024\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9\061" +
    "\uffd9\064\uffd9\001\002\000\014\010\055\011\051\013\020" +
    "\061\032\064\050\001\002\000\050\003\033\010\014\011" +
    "\051\012\030\013\020\014\044\016\016\024\041\031\031" +
    "\034\024\040\046\042\015\045\005\050\034\052\027\054" +
    "\035\055\025\061\032\064\050\001\002\000\054\003\033" +
    "\010\014\011\051\012\030\013\020\014\044\016\016\024" +
    "\041\026\150\031\031\034\024\040\046\042\015\044\110" +
    "\045\005\050\034\052\027\054\035\055\025\061\032\064" +
    "\050\001\002\000\076\002\uffd6\003\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\016\uffd6\024\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\054\uffd6\055\uffd6\061\uffd6\064\uffd6" +
    "\001\002\000\006\025\152\057\077\001\002\000\050\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\042\015\045\005\050" +
    "\034\052\027\054\035\055\025\061\032\064\050\001\002" +
    "\000\056\003\033\010\014\011\051\012\030\013\020\014" +
    "\044\016\016\024\041\027\155\030\154\031\031\034\024" +
    "\040\046\042\015\044\110\045\005\050\034\052\027\054" +
    "\035\055\025\061\032\064\050\001\002\000\014\010\055" +
    "\011\051\013\020\061\032\064\050\001\002\000\050\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\042\015\045\005\050" +
    "\034\052\027\054\035\055\025\061\032\064\050\001\002" +
    "\000\054\003\033\010\014\011\051\012\030\013\020\014" +
    "\044\016\016\024\041\026\157\031\031\034\024\040\046" +
    "\042\015\044\110\045\005\050\034\052\027\054\035\055" +
    "\025\061\032\064\050\001\002\000\076\002\uffd8\003\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8" +
    "\061\uffd8\064\uffd8\001\002\000\006\025\161\057\077\001" +
    "\002\000\050\003\033\010\014\011\051\012\030\013\020" +
    "\014\044\016\016\024\041\031\031\034\024\040\046\042" +
    "\015\045\005\050\034\052\027\054\035\055\025\061\032" +
    "\064\050\001\002\000\054\003\033\010\014\011\051\012" +
    "\030\013\020\014\044\016\016\024\041\027\163\031\031" +
    "\034\024\040\046\042\015\044\110\045\005\050\034\052" +
    "\027\054\035\055\025\061\032\064\050\001\002\000\050" +
    "\003\033\010\014\011\051\012\030\013\020\014\044\016" +
    "\016\024\041\031\031\034\024\040\046\042\015\045\005" +
    "\050\034\052\027\054\035\055\025\061\032\064\050\001" +
    "\002\000\054\003\033\010\014\011\051\012\030\013\020" +
    "\014\044\016\016\024\041\026\165\031\031\034\024\040" +
    "\046\042\015\044\110\045\005\050\034\052\027\054\035" +
    "\055\025\061\032\064\050\001\002\000\076\002\uffd7\003" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7\055" +
    "\uffd7\061\uffd7\064\uffd7\001\002\000\006\006\057\022\172" +
    "\001\002\000\076\002\uffaf\003\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\024\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\054\uffaf\055\uffaf\061\uffaf\064\uffaf\001" +
    "\002\000\004\022\171\001\002\000\076\002\uffb0\003\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\024" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0" +
    "\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0" +
    "\061\uffb0\064\uffb0\001\002\000\076\002\uffb1\003\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\036" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1\061" +
    "\uffb1\064\uffb1\001\002\000\052\003\033\010\014\011\051" +
    "\012\030\013\020\014\044\016\016\024\041\031\031\034" +
    "\024\040\046\042\015\045\005\047\175\050\034\052\027" +
    "\054\035\055\025\061\032\064\050\001\002\000\054\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\042\015\044\110\045" +
    "\005\050\034\051\210\052\027\054\035\055\025\061\032" +
    "\064\050\001\002\000\004\064\176\001\002\000\004\010" +
    "\177\001\002\000\004\056\207\001\002\000\006\023\202" +
    "\065\201\001\002\000\050\003\033\010\014\011\051\012" +
    "\030\013\020\014\044\016\016\024\041\031\031\034\024" +
    "\040\046\042\015\045\005\050\034\052\027\054\035\055" +
    "\025\061\032\064\050\001\002\000\004\010\203\001\002" +
    "\000\004\056\204\001\002\000\006\023\uffc9\065\uffc9\001" +
    "\002\000\054\003\033\010\014\011\051\012\030\013\020" +
    "\014\044\016\016\024\041\031\031\034\024\040\046\042" +
    "\015\044\110\045\005\050\034\051\206\052\027\054\035" +
    "\055\025\061\032\064\050\001\002\000\076\002\uffc5\003" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034" +
    "\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\061\uffc5\064\uffc5\001\002\000\006\023\uffca\065\uffca" +
    "\001\002\000\076\002\uffc4\003\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\054\uffc4\055\uffc4\061\uffc4\064\uffc4\001" +
    "\002\000\076\002\uffd5\003\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\016\uffd5\024\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\054\uffd5\055\uffd5\061\uffd5\064\uffd5\001\002" +
    "\000\076\002\uffd3\003\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\016\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\054\uffd3\055\uffd3\061\uffd3\064\uffd3\001\002\000" +
    "\076\002\uffd0\003\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\054\uffd0\055\uffd0\061\uffd0\064\uffd0\001\002\000\076" +
    "\002\uffc6\003\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\016\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\055\uffc6\061\uffc6\064\uffc6\001\002\000\076\002" +
    "\uffc3\003\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\016\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033" +
    "\uffc3\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\054" +
    "\uffc3\055\uffc3\061\uffc3\064\uffc3\001\002\000\076\002\uffce" +
    "\003\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\016" +
    "\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce" +
    "\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\054\uffce" +
    "\055\uffce\061\uffce\064\uffce\001\002\000\076\002\ufffe\003" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\024\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\034" +
    "\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\054\ufffe\055" +
    "\ufffe\061\ufffe\064\ufffe\001\002\000\010\010\055\011\051" +
    "\064\050\001\002\000\004\065\222\001\002\000\114\002" +
    "\uffda\003\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda\054\uffda" +
    "\055\uffda\057\uffda\061\uffda\064\uffda\001\002\000\004\032" +
    "\224\001\002\000\004\011\225\001\002\000\004\025\226" +
    "\001\002\000\050\003\033\010\014\011\051\012\030\013" +
    "\020\014\044\016\016\024\041\031\031\034\024\040\046" +
    "\042\015\045\005\050\034\052\027\054\035\055\025\061" +
    "\032\064\050\001\002\000\054\003\033\010\014\011\051" +
    "\012\030\013\020\014\044\016\016\024\041\027\230\031" +
    "\031\034\024\040\046\042\015\044\110\045\005\050\034" +
    "\052\027\054\035\055\025\061\032\064\050\001\002\000" +
    "\004\025\231\001\002\000\050\003\033\010\014\011\051" +
    "\012\030\013\020\014\044\016\016\024\041\031\031\034" +
    "\024\040\046\042\015\045\005\050\034\052\027\054\035" +
    "\055\025\061\032\064\050\001\002\000\054\003\033\010" +
    "\014\011\051\012\030\013\020\014\044\016\016\024\041" +
    "\031\031\033\233\034\024\040\046\042\015\044\110\045" +
    "\005\050\034\052\027\054\035\055\025\061\032\064\050" +
    "\001\002\000\076\002\uffd4\003\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\016\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\033\uffd4\034\uffd4\036\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\054\uffd4\055\uffd4\061\uffd4\064\uffd4\001" +
    "\002\000\004\064\235\001\002\000\014\010\055\011\051" +
    "\012\236\064\050\065\240\001\002\000\006\023\uffc2\065" +
    "\uffc2\001\002\000\006\023\uffc0\065\uffc0\001\002\000\004" +
    "\022\247\001\002\000\006\023\243\065\242\001\002\000" +
    "\004\022\246\001\002\000\012\010\055\011\051\012\245" +
    "\064\050\001\002\000\010\006\057\023\uffbf\065\uffbf\001" +
    "\002\000\006\023\uffc1\065\uffc1\001\002\000\076\002\uffbd" +
    "\003\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016" +
    "\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd" +
    "\034\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd" +
    "\055\uffbd\061\uffbd\064\uffbd\001\002\000\076\002\uffbe\003" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe" +
    "\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055" +
    "\uffbe\061\uffbe\064\uffbe\001\002\000\004\022\253\001\002" +
    "\000\004\022\252\001\002\000\076\002\uffad\003\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016\uffad\024\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\036" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\050\uffad\051\uffad\052\uffad\054\uffad\055\uffad\061" +
    "\uffad\064\uffad\001\002\000\076\002\uffae\003\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\016\uffae\024\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae\036\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055\uffae\061\uffae" +
    "\064\uffae\001\002\000\004\021\255\001\002\000\010\010" +
    "\055\011\051\064\050\001\002\000\004\035\257\001\002" +
    "\000\010\010\055\011\051\064\050\001\002\000\006\032" +
    "\262\037\261\001\002\000\010\010\055\011\051\064\050" +
    "\001\002\000\050\003\033\010\014\011\051\012\030\013" +
    "\020\014\044\016\016\024\041\031\031\034\024\040\046" +
    "\042\015\045\005\050\034\052\027\054\035\055\025\061" +
    "\032\064\050\001\002\000\054\003\033\010\014\011\051" +
    "\012\030\013\020\014\044\016\016\024\041\031\031\034" +
    "\024\036\264\040\046\042\015\044\110\045\005\050\034" +
    "\052\027\054\035\055\025\061\032\064\050\001\002\000" +
    "\076\002\uffd2\003\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\016\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\054\uffd2\055\uffd2\061\uffd2\064\uffd2\001\002\000\004" +
    "\032\266\001\002\000\050\003\033\010\014\011\051\012" +
    "\030\013\020\014\044\016\016\024\041\031\031\034\024" +
    "\040\046\042\015\045\005\050\034\052\027\054\035\055" +
    "\025\061\032\064\050\001\002\000\054\003\033\010\014" +
    "\011\051\012\030\013\020\014\044\016\016\024\041\031" +
    "\031\034\024\036\270\040\046\042\015\044\110\045\005" +
    "\050\034\052\027\054\035\055\025\061\032\064\050\001" +
    "\002\000\076\002\uffd1\003\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\024\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\033\uffd1\034\uffd1\036\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\061\uffd1\064\uffd1\001\002" +
    "\000\006\017\272\023\122\001\002\000\004\056\273\001" +
    "\002\000\004\020\274\001\002\000\022\010\055\011\051" +
    "\012\030\013\020\014\044\016\016\061\032\064\050\001" +
    "\002\000\006\022\276\023\122\001\002\000\106\002\uffac" +
    "\003\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016" +
    "\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac\036\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\050\uffac\051\uffac\052\uffac\054\uffac\055\uffac\061\uffac\064" +
    "\uffac\001\002\000\054\003\033\010\014\011\051\012\030" +
    "\013\020\014\044\016\016\024\041\031\031\034\024\040" +
    "\046\042\015\043\300\044\110\045\005\050\034\052\027" +
    "\054\035\055\025\061\032\064\050\001\002\000\014\010" +
    "\055\011\051\013\020\061\032\064\050\001\002\000\100" +
    "\002\uffcd\003\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\016\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\033\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\054\uffcd\055\uffcd\057\077\061\uffcd\064\uffcd\001\002\000" +
    "\076\002\ufffd\003\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\016\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\054\ufffd\055\ufffd\061\ufffd\064\ufffd\001\002\000\006" +
    "\010\305\011\304\001\002\000\076\002\ufffc\003\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\024\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc\036" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055\ufffc\061" +
    "\ufffc\064\ufffc\001\002\000\076\002\ufffb\003\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\024\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\036\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\054\ufffb\055\ufffb\061\ufffb" +
    "\064\ufffb\001\002\000\052\003\033\010\014\011\051\012" +
    "\030\013\020\014\044\016\016\024\041\031\031\034\024" +
    "\040\046\042\015\045\005\047\310\050\034\052\027\054" +
    "\035\055\025\061\032\064\050\001\002\000\054\003\033" +
    "\010\014\011\051\012\030\013\020\014\044\016\016\024" +
    "\041\031\031\034\024\040\046\042\015\044\110\045\005" +
    "\046\316\050\034\052\027\054\035\055\025\061\032\064" +
    "\050\001\002\000\004\064\311\001\002\000\004\010\177" +
    "\001\002\000\006\023\202\065\313\001\002\000\050\003" +
    "\033\010\014\011\051\012\030\013\020\014\044\016\016" +
    "\024\041\031\031\034\024\040\046\042\015\045\005\050" +
    "\034\052\027\054\035\055\025\061\032\064\050\001\002" +
    "\000\054\003\033\010\014\011\051\012\030\013\020\014" +
    "\044\016\016\024\041\031\031\034\024\040\046\042\015" +
    "\044\110\045\005\046\315\050\034\052\027\054\035\055" +
    "\025\061\032\064\050\001\002\000\076\002\uffc8\003\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8" +
    "\061\uffc8\064\uffc8\001\002\000\076\002\uffc7\003\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\036" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\061" +
    "\uffc7\064\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\052\002\046\003\022\004\016\005\012\006" +
    "\010\007\011\011\025\012\042\013\044\014\020\015\041" +
    "\016\007\020\006\021\051\023\036\024\035\025\005\026" +
    "\037\027\021\030\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\111\004\106\005\105\007\011\010\117" +
    "\011\112\012\115\013\116\014\110\015\114\016\104\020" +
    "\103\021\120\023\036\024\035\025\102\026\113\027\021" +
    "\030\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\022\004\016\005\012\006\276" +
    "\007\011\011\025\012\042\013\044\014\020\015\041\016" +
    "\007\020\006\021\051\023\036\024\035\025\005\026\037" +
    "\027\021\030\003\001\001\000\016\007\011\023\036\024" +
    "\035\026\270\027\021\030\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\036\024\035" +
    "\027\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\166\023\165\024" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\140\023\036\024\035\027\021\030" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\075\023\036\024" +
    "\035\027\021\030\003\001\001\000\002\001\001\000\006" +
    "\023\072\024\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\055\024\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\070" +
    "\024\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\066\024\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\036\024\035\027\135\030" +
    "\134\001\001\000\050\003\022\004\016\005\012\006\100" +
    "\007\011\011\025\012\042\013\044\014\020\015\041\016" +
    "\007\020\006\021\051\023\036\024\035\025\005\026\037" +
    "\027\021\030\003\001\001\000\050\003\111\004\106\005" +
    "\105\007\011\010\117\011\112\012\115\013\116\014\110" +
    "\015\114\016\104\020\103\021\120\023\036\024\035\025" +
    "\102\026\113\027\021\030\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\036\024\035" +
    "\027\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\127\023\036\024\035\027\021\030\003" +
    "\001\001\000\016\007\011\023\036\024\035\026\123\027" +
    "\021\030\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\036\024\035\027\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\022\004\016\005\012\006\142\007" +
    "\011\011\025\012\042\013\044\014\020\015\041\016\007" +
    "\020\006\021\051\023\036\024\035\025\005\026\037\027" +
    "\021\030\003\001\001\000\050\003\111\004\106\005\105" +
    "\007\011\010\117\011\112\012\115\013\116\014\110\015" +
    "\114\016\104\020\103\021\120\023\036\024\035\025\102" +
    "\026\113\027\021\030\003\001\001\000\002\001\001\000" +
    "\014\007\150\023\036\024\035\027\021\030\003\001\001" +
    "\000\050\003\022\004\016\005\012\006\146\007\011\011" +
    "\025\012\042\013\044\014\020\015\041\016\007\020\006" +
    "\021\051\023\036\024\035\025\005\026\037\027\021\030" +
    "\003\001\001\000\050\003\111\004\106\005\105\007\011" +
    "\010\117\011\112\012\115\013\116\014\110\015\114\016" +
    "\104\020\103\021\120\023\036\024\035\025\102\026\113" +
    "\027\021\030\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\022\004\016\005\012\006\152\007\011" +
    "\011\025\012\042\013\044\014\020\015\041\016\007\020" +
    "\006\021\051\023\036\024\035\025\005\026\037\027\021" +
    "\030\003\001\001\000\050\003\111\004\106\005\105\007" +
    "\011\010\117\011\112\012\115\013\116\014\110\015\114" +
    "\016\104\020\103\021\120\023\036\024\035\025\102\026" +
    "\113\027\021\030\003\001\001\000\014\007\157\023\036" +
    "\024\035\027\021\030\003\001\001\000\050\003\022\004" +
    "\016\005\012\006\155\007\011\011\025\012\042\013\044" +
    "\014\020\015\041\016\007\020\006\021\051\023\036\024" +
    "\035\025\005\026\037\027\021\030\003\001\001\000\050" +
    "\003\111\004\106\005\105\007\011\010\117\011\112\012" +
    "\115\013\116\014\110\015\114\016\104\020\103\021\120" +
    "\023\036\024\035\025\102\026\113\027\021\030\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\022" +
    "\004\016\005\012\006\161\007\011\011\025\012\042\013" +
    "\044\014\020\015\041\016\007\020\006\021\051\023\036" +
    "\024\035\025\005\026\037\027\021\030\003\001\001\000" +
    "\050\003\111\004\106\005\105\007\011\010\117\011\112" +
    "\012\115\013\116\014\110\015\114\016\104\020\103\021" +
    "\120\023\036\024\035\025\102\026\113\027\021\030\003" +
    "\001\001\000\050\003\022\004\016\005\012\006\163\007" +
    "\011\011\025\012\042\013\044\014\020\015\041\016\007" +
    "\020\006\021\051\023\036\024\035\025\005\026\037\027" +
    "\021\030\003\001\001\000\050\003\111\004\106\005\105" +
    "\007\011\010\117\011\112\012\115\013\116\014\110\015" +
    "\114\016\104\020\103\021\120\023\036\024\035\025\102" +
    "\026\113\027\021\030\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\022\004\016\005" +
    "\012\006\173\007\011\011\025\012\042\013\044\014\020" +
    "\015\041\016\007\020\006\021\051\023\036\024\035\025" +
    "\005\026\037\027\021\030\003\001\001\000\050\003\111" +
    "\004\106\005\105\007\011\010\117\011\112\012\115\013" +
    "\116\014\110\015\114\016\104\020\103\021\120\023\036" +
    "\024\035\025\102\026\113\027\021\030\003\001\001\000" +
    "\002\001\001\000\004\017\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\022\004\016\005\012\006" +
    "\204\007\011\011\025\012\042\013\044\014\020\015\041" +
    "\016\007\020\006\021\051\023\036\024\035\025\005\026" +
    "\037\027\021\030\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\111\004\106\005" +
    "\105\007\011\010\117\011\112\012\115\013\116\014\110" +
    "\015\114\016\104\020\103\021\120\023\036\024\035\025" +
    "\102\026\113\027\021\030\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\036\024\035\027\135\030\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\022\004\016\005\012\006\226" +
    "\007\011\011\025\012\042\013\044\014\020\015\041\016" +
    "\007\020\006\021\051\023\036\024\035\025\005\026\037" +
    "\027\021\030\003\001\001\000\050\003\111\004\106\005" +
    "\105\007\011\010\117\011\112\012\115\013\116\014\110" +
    "\015\114\016\104\020\103\021\120\023\036\024\035\025" +
    "\102\026\113\027\021\030\003\001\001\000\002\001\001" +
    "\000\050\003\022\004\016\005\012\006\231\007\011\011" +
    "\025\012\042\013\044\014\020\015\041\016\007\020\006" +
    "\021\051\023\036\024\035\025\005\026\037\027\021\030" +
    "\003\001\001\000\050\003\111\004\106\005\105\007\011" +
    "\010\117\011\112\012\115\013\116\014\110\015\114\016" +
    "\104\020\103\021\120\023\036\024\035\025\102\026\113" +
    "\027\021\030\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\240\023\036\024\035\027\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\243\024\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\036\024\035\027\255\001\001\000\002\001\001" +
    "\000\010\023\036\024\035\027\257\001\001\000\002\001" +
    "\001\000\010\023\036\024\035\027\264\001\001\000\050" +
    "\003\022\004\016\005\012\006\262\007\011\011\025\012" +
    "\042\013\044\014\020\015\041\016\007\020\006\021\051" +
    "\023\036\024\035\025\005\026\037\027\021\030\003\001" +
    "\001\000\050\003\111\004\106\005\105\007\011\010\117" +
    "\011\112\012\115\013\116\014\110\015\114\016\104\020" +
    "\103\021\120\023\036\024\035\025\102\026\113\027\021" +
    "\030\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\022\004\016\005\012\006\266\007\011\011\025" +
    "\012\042\013\044\014\020\015\041\016\007\020\006\021" +
    "\051\023\036\024\035\025\005\026\037\027\021\030\003" +
    "\001\001\000\050\003\111\004\106\005\105\007\011\010" +
    "\117\011\112\012\115\013\116\014\110\015\114\016\104" +
    "\020\103\021\120\023\036\024\035\025\102\026\113\027" +
    "\021\030\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\011\023" +
    "\036\024\035\026\274\027\021\030\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\111\004\106\005" +
    "\105\007\011\010\117\011\112\012\115\013\116\014\110" +
    "\015\114\016\104\020\103\021\120\023\036\024\035\025" +
    "\102\026\113\027\021\030\003\001\001\000\014\007\300" +
    "\023\036\024\035\027\021\030\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\022\004\016\005\012\006" +
    "\306\007\011\011\025\012\042\013\044\014\020\015\041" +
    "\016\007\020\006\021\051\023\036\024\035\025\005\026" +
    "\037\027\021\030\003\001\001\000\050\003\111\004\106" +
    "\005\105\007\011\010\117\011\112\012\115\013\116\014" +
    "\110\015\114\016\104\020\103\021\120\023\036\024\035" +
    "\025\102\026\113\027\021\030\003\001\001\000\002\001" +
    "\001\000\004\017\311\001\001\000\002\001\001\000\050" +
    "\003\022\004\016\005\012\006\313\007\011\011\025\012" +
    "\042\013\044\014\020\015\041\016\007\020\006\021\051" +
    "\023\036\024\035\025\005\026\037\027\021\030\003\001" +
    "\001\000\050\003\111\004\106\005\105\007\011\010\117" +
    "\011\112\012\115\013\116\014\110\015\114\016\104\020" +
    "\103\021\120\023\036\024\035\025\102\026\113\027\021" +
    "\030\003\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<String> SintacticosErrores = new ArrayList<String>();
    public ArrayList getErrores(){
            return SintacticosErrores;
    }



    public static Nodo raiz;
        
    public Nodo getRaiz(){
            return raiz;
    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        //System.out.println("ERROR Sintactico :"+ s.value+ "  Linea: " + (s.left+1) +" Columna: "+(s.right+1) );
        SintacticosErrores.add((String) s.value);
}

    public Symbol getS(){
        return this.s;
    }

    public String ResultadoPython="";
    public int estado=1;
    public String temporal="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                if (estado==1){
                ResultadoPython+=a;
                System.out.println(ResultadoPython);
                            }
                if (estado==2){parser.raiz =(Nodo) a;} 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARAR ::= INGRESAR Asignacion INGRESAR PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT = a + "=" + c +"\n" ;}
           if (estado==2){ 
            Nodo padre = new Nodo("DECLARAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la variable
            padre.AddHijo(new Nodo("igual",(String) b, bright, bleft));             //agregamos como hijo el signo igual
            padre.AddHijo((Nodo)c);             //agregamos como hijola cadena 
            padre.AddHijo(new Nodo("PuntoComa", (String)d, cright, cleft));               //agregamos como hijo el punto y coma
            RESULT = padre;}                                                 //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARAR ::= error PuntoComa 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INCREMENTAR ::= Variable OperadorIncremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ATRIBUIR ::= Variable OperadorAtribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ATRIBUIR ::= Variable OperadorAtribucion Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
                      if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a);}
                    if (estado==2){
                    RESULT = a;  }                                             //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA ATRIBUIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ATRIBUIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA RETORNAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){ 
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;    }                                           //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;                                               //retornamos el nodo padre      
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA REPETIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= REPETIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;  }                                             //retornamos el nodo padre      
                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA PARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= PARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre;   }                                            //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA INGRESAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){RESULT =  String.valueOf(a)+String.valueOf(b);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo((Nodo)b); 
                RESULT = padre;     }                                            //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= INGRESAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if (estado==1){
                RESULT =  String.valueOf(a);}
               if (estado==2){
                Nodo padre = new Nodo("SENTENCIA", "", 0,0);  
                padre.AddHijo((Nodo)a); 
                RESULT = padre; }                                              //retornamos el nodo padre      
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPARADOR ::= ARITMETICA2 OperadorRelacional ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+" > "+ String.valueOf(c);}
           if(estado==2){
            Nodo padre = new Nodo("COMPARADOR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica 
            padre.AddHijo(new Nodo("OperadorRelacional",(String) b, bright, bleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)c);              //agregamos como hijo la aritmetica
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIABOOLEANA ::= Booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= " true ";}
           if(estado==2){
            Nodo padre = new Nodo("Booleano",(String) a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIABOOLEANA ::= COMPARADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a);}
           if(estado==2){RESULT = a; }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIABOOLEANA ::= SENTENCIABOOLEANA OperadorLogico COMPARADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+" "+String.valueOf(b)+" "+String.valueOf(c);}
           if(estado==2){ 
            Nodo padre = new Nodo("SENTENCIABOOLEANA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo((Nodo)a);               //agregamos como hijo la la sentencia 1
            padre.AddHijo(new Nodo("OperadorLogico",(String) b, bright, bleft));             //agregamos como hijo el operador logico
            padre.AddHijo((Nodo)c);             //agregamos como hijo el comparador
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIABOOLEANA ::= ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a);}
           if(estado==2){RESULT = a; }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIABOOLEANA ::= Not ParentesisA COMPARADOR ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  if(estado==1){  RESULT=  "not" +"( "+ String.valueOf(b)+" )";}
           if(estado==2){ 
            Nodo padre = new Nodo("SENTENCIABOOLEANA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Not",(String) a, aright, aleft));             //agregamos como hijo el operador logico
            padre.AddHijo((Nodo)b);             //agregamos como hijo el comparador
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "if "+"("+ String.valueOf(b)+")"+":\n"+ String.valueOf(d)+"\n";}
           if(estado==2){
            Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)e, eright, eleft));               //agregamos como hijo el fin si
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA OSi SENTENCIABOOLEANA Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("OSi", (String) e, eright, eleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) g, gright, gleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)h);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) i, iright, ileft));             //agregamos como hijo el delocontrario
            padre.AddHijo((Nodo)j);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)k, kright, kleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA OSi SENTENCIABOOLEANA Entonces SENTENCIA OSi SENTENCIABOOLEANA Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("OSi", (String) e, eright, eleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) g, gright, gleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)h);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("OSi", (String) e2, e2right, e2left));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)f2);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) g2, g2right, g2left));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)h2);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) i, iright, ileft));             //agregamos como hijo el delocontrario
            padre.AddHijo((Nodo)j);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)k, kright, kleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= Si SENTENCIABOOLEANA Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-IF", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Si", (String)a, aright, aleft));               //agregamos como hijo el si del ciclo
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Entonces",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) e, eright, eleft));             //agregamos como hijo el delocontrario
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSI", (String)g, gright, gleft));               //agregamos como hijo el fin si
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= error FinSi 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SEGUN ::= Segun Variable Hacer Numero Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Nodo padre = new Nodo("CICLO-SEGUN", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Segun", (String)a, aright, aleft));               //agregamos como hijo el segun del ciclo
            padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));              //agregamos como hijo la variable
            padre.AddHijo(new Nodo("Hacer",(String) c, cright, cleft));             //agregamos como hijo el hacer
            padre.AddHijo(new Nodo("Valor",(String) d, dright, dleft));             //agregamos como hijo el valor
            padre.AddHijo(new Nodo("Entonces",(String) e, eright, eleft));             //agregamos como hijo entonces
            padre.AddHijo((Nodo)f);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("DeLoContrario",(String) g, gright, gleft));             //agregamos como hijo el delocontrario
            padre.AddHijo(new Nodo("Entonces",(String) h, hright, hleft));             //agregamos como hijo entonces
            padre.AddHijo((Nodo)i);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinSegun", (String)j, jright, jleft));               //agregamos como hijo el fin segun
            RESULT = padre;  
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGUN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SEGUN ::= error FinSegun 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGUN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA ::= Para Variable Asignacion ARITMETICA2 Hasta ARITMETICA2 Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		if(estado==1){  RESULT= "for "+ String.valueOf(b)+" in range("+ String.valueOf(d)+","+String.valueOf(f)+"):\n"+String.valueOf(h);}
           if(estado==2){ 
            Nodo padre = new Nodo("CICLO-PARA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Para", (String)a, aright, aleft));               //agregamos como hijo el para del ciclo
            padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));              //agregamos como hijo la variable
            padre.AddHijo(new Nodo("Asignacion",(String) c, cright, cleft));             //agregamos como hijo la asignacion
            padre.AddHijo((Nodo)d);             //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hasta",(String) e, eright, eleft));             //agregamos como hijo hasta
            padre.AddHijo((Nodo)f);              //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hacer",(String) g, gright, gleft));             //agregamos como hijo el hacer
            padre.AddHijo((Nodo)h);             //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinPara", (String)i, iright, ileft));               //agregamos como hijo el fin para
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARA ::= Para Variable Asignacion ARITMETICA2 Hasta ARITMETICA2 Incremental ARITMETICA2 Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "for "+ String.valueOf(b)+" in range("+ String.valueOf(d)+","+String.valueOf(f)+"):\n"+String.valueOf(b)+"+="+String.valueOf(h)+"\n"+String.valueOf(j);}
           if(estado==2){
            Nodo padre = new Nodo("CICLO-PARA", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Para", (String)a, aright, aleft));               //agregamos como hijo el para del ciclo
            padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));              //agregamos como hijo la variable
            padre.AddHijo(new Nodo("Asignacion",(String) c, cright, cleft));             //agregamos como hijo la asignacion
            padre.AddHijo((Nodo)d);             //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hasta",(String) e, eright, eleft));             //agregamos como hijo hasta
            padre.AddHijo((Nodo)f);              //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("ConIncremetal",(String) g, gright, gleft));             //agregamos como hijo el incremetal
            padre.AddHijo((Nodo)h);              //agregamos como hijo la aritmetica
            padre.AddHijo(new Nodo("Hacer",(String) i, iright, ileft));             //agregamos como hijo el hacer
            padre.AddHijo((Nodo)j);             //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinPara", (String)k, kright, kleft));               //agregamos como hijo el fin para
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARA ::= error FinPara 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MIENTRAS ::= Mientras SENTENCIABOOLEANA Hacer SENTENCIA FinMientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "while ("+ String.valueOf(b)+"): \n"+ String.valueOf(d)+"\n";}
           if(estado==2){ 
            Nodo padre = new Nodo("CICLO-MIENTRAS", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Mientras", (String)a, aright, aleft));               //agregamos como hijo la palabra mientras
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentenciabooleana
            padre.AddHijo(new Nodo("Hacer",(String) c, cright, cleft));             //agregamos como hijo el entonces
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMientras", (String)e, eright, eleft));               //agregamos como hijo el fin si
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MIENTRAS ::= error FinMientras 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // REPETIR ::= Repetir SENTENCIA HastaQue SENTENCIABOOLEANA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "valor=True \n while valor == True: \n"+ String.valueOf(b)+"\n if valor == False: \n break \n";}
           if(estado==2){ 
            Nodo padre = new Nodo("CICLO-REPETIR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Repetir", (String)a, aright, aleft));               //agregamos como hijo la palabra repetir
            padre.AddHijo((Nodo)b);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("HastaQue",(String) c, cright, cleft));             //agregamos como hijo el hasta que
            padre.AddHijo((Nodo)d);              //agregamos como hijo la sentenciabooleana
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNAR ::= Retornar ARITMETICA2 PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "return "+ String.valueOf(b)+"\n";}
           if(estado==2){ 
            Nodo padre = new Nodo("RETORNAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Retornar", (String)a, aright, aleft));               //agregamos como hijo la palabra retornar
            padre.AddHijo((Nodo)b);              //agregamos como hijo lo que retornara
            padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el punto coma
            RESULT = padre; } 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNAR ::= Retornar Booleano PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "return "+ String.valueOf(b)+"\n";}
           if(estado==2){  
            Nodo padre = new Nodo("RETORNAR", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Retornar", (String)a, aright, aleft));               //agregamos como hijo la palabra retornar
            padre.AddHijo(new Nodo("Booleano", (String)b, bright, bleft));               //agregamos como hijo la palabra retornar
            padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntoComa
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS ::= Variable TipoDato 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= " "+ String.valueOf(b)+"";}
           if(estado==2){ 
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Variable", (String)b, bright, bleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Tipo", (String)a, aright, aleft));               //agregamos como hijo el tipo de dato
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= PARAMETROS Coma Variable TipoDato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= String.valueOf(a)+", " + String.valueOf(c);}
           if(estado==2){ 
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a);                                     //se agregan los parametros anteriores
                padre.AddHijo(new Nodo("Coma", (String)b, bright, bleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Variable", (String)c, cright, cleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Tipo", (String)d, dright, dleft));               //agregamos como hijo el tipo de dato
                RESULT = padre;  }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= Metodo Variable Parametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "def "+ String.valueOf(b)+"(" + String.valueOf(e)+"):\n"+String.valueOf(g);}
           if(estado==2){ 
            Nodo padre = new Nodo("METODO", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Metodo", (String)a, aright, aleft));               //agregamos como hijo la palabra metodo
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre del metodo
            padre.AddHijo(new Nodo("ConParametros", (String)c, cright, cleft));               //agregamos como hijo el parametros
            padre.AddHijo(new Nodo("ParentesisA", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)e);              //agregamos como hijo los parametros
            padre.AddHijo(new Nodo("ParentesisC", (String)f, fright, fleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)g);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMetodo",(String) h, hright, hleft));             //agregamos como hijo el fin metodo
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= Metodo Variable SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "def "+ String.valueOf(b)+"(): \n" + String.valueOf(e);}
           if(estado==2){ 
            Nodo padre = new Nodo("METODO", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Metodo", (String)a, aright, aleft));               //agregamos como hijo la palabra metodo
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre del metodo
            //padre.AddHijo(new Nodo("ParentesisA", (String)c, cright, cleft));               //agregamos como hijo el parentesis
            //padre.AddHijo(new Nodo("ParentesisC", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)e);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinMetodo",(String) f, fright, fleft));             //agregamos como hijo el fin metodo
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= error FinMetodo 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION ::= Funcion Variable Parametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "def "+ String.valueOf(b)+"(" + String.valueOf(e)+"):\n"+String.valueOf(g);}
           if(estado==2){  
            Nodo padre = new Nodo("FUNCION", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Funcion", (String)a, aright, aleft));               //agregamos como hijo la palabra funcion
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre de la funcion
            padre.AddHijo(new Nodo("ConParametros", (String)c, cright, cleft));               //agregamos como hijo el parametros
            padre.AddHijo(new Nodo("ParentesisA", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)e);              //agregamos como hijo los parametros
            padre.AddHijo(new Nodo("ParentesisC", (String)f, fright, fleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)g);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinFuncion",(String) h, hright, hleft));             //agregamos como hijo el fin funcion
            RESULT = padre; } 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= Funcion Variable SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "def "+ String.valueOf(b)+"(): \n" + String.valueOf(c);}
           if(estado==2){  
            Nodo padre = new Nodo("FUNCION", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            padre.AddHijo(new Nodo("Funcion", (String)a, aright, aleft));               //agregamos como hijo la palabra funcion
            padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo el nombre de la funcion
            //padre.AddHijo(new Nodo("ParentesisA", (String)c, cright, cleft));               //agregamos como hijo el parentesis
            //padre.AddHijo(new Nodo("ParentesisC", (String)d, dright, dleft));               //agregamos como hijo el parentesis
            padre.AddHijo((Nodo)c);              //agregamos como hijo la sentencia
            padre.AddHijo(new Nodo("FinFuncion",(String) d, dright, dleft));             //agregamos como hijo el fin metodo
            RESULT = padre;  }
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= error FinFuncion 
            {
              Object RESULT =null;
		 Nodo padre = new Nodo("ERROR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                RESULT = padre;                                                 //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSEJECUTAR ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= String.valueOf(a);}
           if(estado==2){ 
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Cadena", (String)a, aright, aleft));               //agregamos como hijo la cadena
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSEJECUTAR ::= PARAMETROSEJECUTAR Coma Cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= String.valueOf(c)+", " + String.valueOf(a);}
           if(estado==2){ 
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)c);
                padre.AddHijo(new Nodo("Coma", (String)b, bright, bleft));               //agregamos como hijo la coma
                padre.AddHijo(new Nodo("Cadena", (String)a, aright, aleft));               //agregamos como hijo la cadena
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSEJECUTAR ::= ARITMETICA2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= String.valueOf(a);}
           if(estado==2){  
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica
                RESULT = padre;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSEJECUTAR ::= PARAMETROSEJECUTAR Coma ARITMETICA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= String.valueOf(c)+"," + String.valueOf(a);}
           if(estado==2){ 
                Nodo padre = new Nodo("PARAMETROS", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)c);
                padre.AddHijo(new Nodo("Coma", (String)b, bright, bleft));               //agregamos como hijo la coma
                padre.AddHijo((Nodo)a);               //agregamos como hijo la aritmetica
                RESULT = padre;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSEJECUTAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EJECUTAR ::= Ejecutar Variable ParentesisA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= String.valueOf(b)+"() \n";}
           if(estado==2){  
                Nodo padre = new Nodo("EJECUTAR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Ejecutar", (String)a, aright, aleft));               //agregamos como hijo al ejecutar 
                padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo al nombre
                padre.AddHijo(new Nodo("ParentesisA",(String) c, cright, cleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("ParentesisC",(String) d, dright, dleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("PuntoComa",(String) e, eright, eleft));             //agregamos como hijo el punto coma
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EJECUTAR ::= Ejecutar Variable ParentesisA PARAMETROSEJECUTAR ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		   if(estado==1){  RESULT= String.valueOf(b)+"("+String.valueOf(f)+") \n";}
           if(estado==2){  
                Nodo padre = new Nodo("EJECUTAR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Ejecutar", (String)a, aright, aleft));               //agregamos como hijo al ejecutar 
                padre.AddHijo(new Nodo("Nombre", (String)b, bright, bleft));               //agregamos como hijo al nombre
                padre.AddHijo(new Nodo("ParentesisA",(String) c, cright, cleft));             //agregamos como hijo el parentesis
                padre.AddHijo((Nodo)f); 
                padre.AddHijo(new Nodo("ParentesisC",(String) d, dright, dleft));             //agregamos como hijo el parentesis
                padre.AddHijo(new Nodo("PuntoComa",(String) e, eright, eleft));             //agregamos como hijo el punto coma
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // POTENCIA ::= Variable Potencia CorcheteA ARITMETICA CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+"**"+"("+String.valueOf(d)+")";}
            if(estado==2){
                Nodo padre = new Nodo("POTENCIA ", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Variable", (String)a, aright, aleft));               //agregamos como hijo la variable
                padre.AddHijo(new Nodo("Potencia", (String)b, bright, bleft));               //agregamos como hijo potencia
                padre.AddHijo(new Nodo("CorcheteA",(String) c, cright, cleft));             //agregamos como hijo el corchete
                padre.AddHijo((Nodo)d); 
                padre.AddHijo(new Nodo("CorcheteC",(String) f, fright, fleft));             //agregamos como hijo el corchete
                RESULT = padre;      }                                           //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // POTENCIA ::= Numero Potencia CorcheteA ARITMETICA CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a)+"**"+"("+String.valueOf(d)+")";}
            if(estado==2){
                Nodo padre = new Nodo("POTENCIA ", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Numero", (String)a, aright, aleft));               //agregamos como hijo el numero
                padre.AddHijo(new Nodo("Potencia", (String)b, bright, bleft));               //agregamos como hijo potencia
                padre.AddHijo(new Nodo("CorcheteA",(String) c, cright, cleft));             //agregamos como hijo el corchete
                padre.AddHijo((Nodo)d); 
                padre.AddHijo(new Nodo("CorcheteC",(String) f, fright, fleft));             //agregamos como hijo el corchete
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITMETICA2 ::= ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= ARITMETICA OperadorAritmetico Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){ RESULT=  String.valueOf(a)+String.valueOf(b)+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)b, bright, bleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("Numero",(String) c, cright, cleft));             //agregamos como hijo el signo igual 
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a);}
            if(estado==2){ 
            Nodo padre = new Nodo("Numero", (String)a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre;   }                                              //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= ARITMETICA OperadorAritmetico Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a)+String.valueOf(b)+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)b, bright, bleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("Variable",(String) c, cright, cleft));             //agregamos como hijo el signo igual 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITMETICA ::= Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a);}
            if(estado==2){
             Nodo padre = new Nodo("Variable", (String)a, 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
            RESULT = padre; }                                                //retornamos el nodo padre
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARITMETICA ::= ARITMETICA OperadorAritmetico POTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+String.valueOf(b)+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)b, bright, bleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo((Nodo)c);             //agregamos como hijo la potencia
                RESULT = padre;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARITMETICA ::= POTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a);}
            if(estado==2){
                RESULT = a;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARITMETICA ::= ARITMETICA OperadorAritmetico ParentesisA ARITMETICA ParentesisC 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(z)+String.valueOf(y)+String.valueOf(a)+String.valueOf(b)+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)z); 
                padre.AddHijo(new Nodo("OperadorAritmetico", (String)y, yright, yleft));               //agregamos como hijo al operador +-*/ 
                padre.AddHijo(new Nodo("ParentesisA", (String)a, aright, aleft));               //agregamos como hijo al parentesis abierto
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("ParentesisC",(String) c, cright, cleft));             //agregamos como hijo el parentesis cerrado  
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARITMETICA ::= ParentesisA ARITMETICA ParentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+String.valueOf(b)+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("ParentesisA", (String)a, aright, aleft));               //agregamos como hijo al parentesis abierto
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("ParentesisC",(String) c, cright, cleft));             //agregamos como hijo el parentesis cerrado
                RESULT = padre;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IMPRIMIR ::= Imprimir ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "print("+ String.valueOf(b)+") \n";}
            if(estado==2){ 
                Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo((Nodo)b);  
                padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntocoma
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IMPRIMIR ::= Imprimir Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT= "print("+ String.valueOf(b)+") \n";}
            if(estado==2){  
                Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo(new Nodo("Cadena",(String)b, bright, bleft));             //agregamos como hijo la cadena 
                padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntocoma
                RESULT = padre;    }                                             //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IMPRIMIR ::= Imprimir EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "print("+ String.valueOf(b)+") \n";}
            if(estado==2){ 
                Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo((Nodo)b);  
                RESULT = padre;       }                                          //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPRIMIR ::= ImprimirSalto ARITMETICA2 PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "print("+ String.valueOf(b)+") \n";}
            if(estado==2){ 
                Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo((Nodo)b);  
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IMPRIMIR ::= ImprimirSalto Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT= "print("+ String.valueOf(b)+") \n";}
            if(estado==2){ 
                Nodo padre = new Nodo("IMPRIMIR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Imprimir", (String)a, aright, aleft));               //agregamos como hijo como imprimir
                padre.AddHijo(new Nodo("Cadena",(String)b, bright, bleft));             //agregamos como hijo la cadena 
                padre.AddHijo(new Nodo("PuntoComa",(String) c, cright, cleft));             //agregamos como hijo el puntocoma
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INGRESAR ::= Ingresar INGRESAR Como TipoDato ConValor INGRESAR PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(b)+"="+String.valueOf(f)+"\n";}
            if(estado==2){
                Nodo padre = new Nodo("INGRESAR", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo(new Nodo("Ingesar", (String)a, aright, aleft));               //agregamos como hijo ingresar
                padre.AddHijo((Nodo)b);               //agregamos como hijo todas las variables 
                padre.AddHijo(new Nodo("Como",(String) c, cright, cleft));             //agregamos como hijo el como
                padre.AddHijo(new Nodo("TipoDato",(String) d, dright, dleft));             //agregamos como hijo el tipo de dato
                padre.AddHijo(new Nodo("ConValor",(String) e, eright, eleft));             //agregamos como hijo el convalor
                padre.AddHijo((Nodo)f);               //agregamos como hijo el valor
                padre.AddHijo(new Nodo("PuntoComa",(String) g, gright, gleft));             //agregamos como hijo el puntocoma
                RESULT = padre; }                                                //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INGRESAR ::= INGRESAR Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+","+String.valueOf(c);}
            if(estado==2){ 
                Nodo padre = new Nodo("Valores", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("Coma",(String) b, bright, bleft));             //agregamos como hijo la coma
                padre.AddHijo(new Nodo("Cadena",(String) c, cright, cleft));             //agregamos como hijo la cadena 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INGRESAR ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if (estado==1){
                RESULT =  String.valueOf(a);
                            }
                if (estado==2){
                Nodo padre = new Nodo("Cadena", (String)a, 0,0); 
                     RESULT = padre; }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INGRESAR ::= INGRESAR Coma Caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a)+","+String.valueOf(c);}
            if(estado==2){
                Nodo padre = new Nodo("Valores", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("Coma",(String) b, bright, bleft));             //agregamos como hijo la coma
                padre.AddHijo(new Nodo("Caracter",(String) c, cright, cleft));             //agregamos como hijo la cadena 
                RESULT = padre;   }                                              //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INGRESAR ::= Caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a);}
            if(estado==2){
                Nodo padre = new Nodo("Caracter", (String)a, 0,0); 
                RESULT = padre; } 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INGRESAR ::= INGRESAR Coma SENTENCIABOOLEANA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  if(estado==1){  RESULT=  String.valueOf(a)+","+String.valueOf(c);}
            if(estado==2){ 
                Nodo padre = new Nodo("Conjunto", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                padre.AddHijo((Nodo)a); 
                padre.AddHijo(new Nodo("Coma",(String) b, bright, bleft));             //agregamos como hijo la coma
                padre.AddHijo((Nodo)c); 
                RESULT = padre;  }                                               //retornamos el nodo padre
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INGRESAR ::= SENTENCIABOOLEANA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 if(estado==1){  RESULT=  String.valueOf(a);}
            if(estado==2){
                RESULT=a;} 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
