/* The following code was generated by JFlex 1.4.3 on 30/08/22 08:43 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/08/22 08:43 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\2\0\1\3\22\0\1\46\1\0\1\32\2\0"+
    "\1\55\1\0\1\37\1\50\1\52\1\16\1\14\1\44\1\15\1\31"+
    "\1\17\12\2\1\0\1\43\1\0\1\13\1\42\2\0\5\1\1\36"+
    "\17\1\1\34\4\1\4\0\1\30\1\0\1\27\1\53\1\26\1\22"+
    "\1\6\1\5\1\40\1\12\1\4\1\51\1\1\1\7\1\20\1\25"+
    "\1\21\1\23\1\47\1\35\1\10\1\24\1\45\1\41\1\11\1\1"+
    "\1\54\1\1\1\56\1\0\1\57\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\7\2\1\5\1\6"+
    "\1\7\1\10\1\11\7\2\2\1\3\2\1\1\1\12"+
    "\1\13\1\14\1\15\1\2\1\1\1\16\1\17\1\1"+
    "\1\20\1\0\1\21\12\1\1\22\4\1\1\23\1\24"+
    "\1\25\2\0\4\1\1\0\1\26\10\1\2\0\1\27"+
    "\3\1\1\0\1\1\1\30\1\3\2\1\1\31\1\1"+
    "\1\32\3\1\1\0\10\1\2\0\1\33\3\1\1\34"+
    "\2\0\6\1\1\35\4\1\1\36\1\1\1\3\3\1"+
    "\1\0\2\1\2\0\5\1\1\0\1\37\3\1\1\40"+
    "\1\0\2\1\1\41\1\42\2\0\7\1\4\0\1\1"+
    "\2\0\2\1\1\43\1\44\1\45\1\0\2\1\1\46"+
    "\1\0\1\1\3\0\3\1\1\47\1\1\1\32\1\1"+
    "\1\0\1\50\4\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\51\2\0\1\1\3\0\5\1\5\0\1\52\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\3\0\1\1\1\53"+
    "\1\1\1\54\1\55\4\0\1\56\1\46\1\0\1\57"+
    "\1\60\1\0\1\61\2\0\1\62\3\0\1\63\2\0"+
    "\1\64\3\0\1\65\2\0\1\66\4\0\1\67\4\0"+
    "\1\70\1\71\5\0\1\72\7\0\1\73\1\0\1\74"+
    "\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\60\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\60\0\60"+
    "\0\60\0\60\0\u0570\0\u02a0\0\60\0\60\0\140\0\u05a0"+
    "\0\u05d0\0\140\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\140\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\60\0\60\0\60\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\140\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0480\0\u0480\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\140\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u08d0\0\u1020\0\u1050\0\u1080\0\140\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\60\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\60\0\u12f0\0\60\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0"+
    "\0\u1500\0\u1530\0\u1560\0\u1590\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\60\0\u1650\0\u1680\0\u16b0\0\140\0\140\0\u16e0\0\u1710"+
    "\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10"+
    "\0\140\0\u1a40\0\140\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30"+
    "\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\140"+
    "\0\u1cb0\0\140\0\u1ce0\0\u1d10\0\60\0\u1d40\0\u1d70\0\u1da0"+
    "\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20"+
    "\0\140\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0"+
    "\0\u2220\0\140\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340"+
    "\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\140"+
    "\0\u24c0\0\u24f0\0\140\0\u2520\0\u2550\0\u2580\0\u25b0\0\60"+
    "\0\60\0\u25e0\0\140\0\140\0\u2610\0\140\0\u2640\0\u2670"+
    "\0\140\0\u26a0\0\u26d0\0\u2700\0\140\0\u2730\0\u2760\0\60"+
    "\0\u2790\0\u27c0\0\u27f0\0\60\0\u2820\0\u2850\0\60\0\u2880"+
    "\0\u28b0\0\u28e0\0\u2910\0\60\0\u2940\0\u2970\0\u29a0\0\u29d0"+
    "\0\60\0\60\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\60"+
    "\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\60"+
    "\0\u2c40\0\60\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\3\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\1\5\1\33\1\34\1\35\1\36"+
    "\2\3\1\2\1\37\1\40\1\3\1\5\1\3\1\41"+
    "\1\3\1\42\1\43\1\3\1\44\1\45\1\46\61\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\1\47\1\4\1\0\7\47\5\0\10\47"+
    "\1\0\1\51\2\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\6\0\1\5"+
    "\27\0\1\5\12\0\1\5\12\0\2\47\1\0\1\47"+
    "\1\52\5\47\5\0\1\53\4\47\1\54\2\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\1\55\2\47"+
    "\1\56\3\47\5\0\10\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\57\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\3\47\1\60\1\61\2\47\5\0"+
    "\5\47\1\62\2\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\63\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\1\47\1\64\6\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\1\65\1\47"+
    "\1\66\4\47\5\0\4\47\1\67\3\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\6\47\1\70\5\0"+
    "\10\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\7\47\1\71\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\16\0\1\72\1\73\56\0\1\72\1\0\1\73\24\0"+
    "\1\74\30\0\1\72\57\0\1\72\2\0\1\75\1\76"+
    "\41\0\2\47\1\0\1\77\1\47\1\100\4\47\5\0"+
    "\1\47\1\101\5\47\1\102\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\10\47\1\103\3\0"+
    "\1\47\1\104\1\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\2\47\1\105\4\47\5\0\1\47\1\106\6\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\1\47\1\107\5\47\1\110\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\1\47\1\111\6\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\6\47"+
    "\1\112\5\0\1\47\1\113\6\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\5\47\1\114"+
    "\2\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\115\1\0"+
    "\7\115\5\0\10\115\4\0\3\115\1\0\2\115\3\0"+
    "\1\115\1\0\1\115\1\0\1\115\1\0\2\115\3\0"+
    "\32\116\1\117\1\0\24\116\1\0\2\47\1\0\2\47"+
    "\1\120\4\47\5\0\10\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\2\47\1\121\4\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\7\47\1\122\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\1\123\2\0\7\123\5\0\10\123\4\0\3\123\1\0"+
    "\2\123\3\0\1\123\1\0\1\123\1\0\1\123\1\0"+
    "\2\123\4\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\1\47\1\124\55\0\1\125\7\0\1\126"+
    "\56\0\2\47\1\0\7\47\5\0\3\47\1\127\4\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\1\130"+
    "\6\47\5\0\4\47\1\131\3\47\4\0\3\47\1\0"+
    "\1\132\1\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\5\47"+
    "\1\133\2\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\7\47\5\0\1\47\1\134\6\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\5\47"+
    "\1\135\2\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\4\47\1\136\2\47\5\0\10\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\10\47"+
    "\1\137\3\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\4\47\1\140\3\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\2\47\1\141\4\47\5\0"+
    "\10\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\5\47\1\142\2\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\3\47\1\0\1\143\1\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\10\47\4\0\1\47\1\144\1\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\1\145\6\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\4\47\1\146"+
    "\2\47\5\0\6\47\1\147\1\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\3\0\16\150\1\151\14\150\1\0\24\150\33\152"+
    "\1\0\24\152\1\0\2\47\1\0\2\47\1\153\4\47"+
    "\5\0\10\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\7\47\5\0\4\47\1\154\1\155\2\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\2\47\1\156\5\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\1\47\1\155\13\0\1\157\50\0\2\47\1\0\7\47"+
    "\5\0\10\47\1\160\3\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\161\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\4\47\1\162"+
    "\3\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\10\47\4\0\1\47\1\163\1\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\4\47\1\104"+
    "\3\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\7\47\1\164\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\1\165\4\47\1\166"+
    "\2\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\2\47\1\104\5\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\115\1\0\7\115\5\0\10\115\1\167"+
    "\3\0\3\115\1\0\2\115\3\0\1\115\1\0\1\115"+
    "\1\0\1\115\1\0\2\115\4\0\2\47\1\0\7\47"+
    "\5\0\10\47\4\0\1\47\1\170\1\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\3\47\1\171\1\172"+
    "\3\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\3\47\1\173\3\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\42\0\1\174\21\0\2\47\1\0\7\47\5\0"+
    "\4\47\1\175\3\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\5\0"+
    "\1\176\56\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\1\47\1\177\1\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\6\47\1\200\1\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\1\47\1\201\1\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\10\47\1\202\3\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\7\47\1\203\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\6\47\1\204\1\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\2\47\1\52\4\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\7\0\1\205\15\0\1\206\36\0"+
    "\2\47\1\0\7\47\5\0\1\47\1\207\6\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\6\47\1\210\1\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\3\47\1\0"+
    "\1\131\1\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\211\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\1\64"+
    "\6\47\5\0\10\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\3\47\1\136\3\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\4\47\1\212\3\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\2\47\1\213\4\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\3\0\77\214\1\215\40\214\1\0"+
    "\2\47\1\0\7\47\5\0\5\47\1\216\2\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\1\47\1\217\6\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\1\47\1\220\6\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\7\0\1\221\62\0\1\222\51\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\1\223\1\47\4\0\2\47\1\0\2\47\1\224\4\47"+
    "\5\0\10\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\7\47\5\0\7\47\1\225\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\1\47\1\131\1\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\1\47\1\226\6\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\10\47\1\227"+
    "\3\0\3\47\1\0\2\47\3\0\1\47\1\230\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\2\47\1\231\5\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\2\47\1\232\4\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\1\47\1\233\6\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\4\47\1\234\2\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\2\47"+
    "\1\131\4\47\5\0\10\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\1\235\6\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\1\236\6\47"+
    "\5\0\10\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\2\47\1\237\4\47\5\0\10\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\10\0\1\240\2\0\1\241\7\0\1\242"+
    "\2\0\1\243\35\0\2\47\1\0\7\47\5\0\4\47"+
    "\1\131\3\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\1\244\6\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\43\0\1\245\23\0\1\246\54\0\2\47\1\0"+
    "\7\47\5\0\5\47\1\247\2\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\250\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\5\47\1\251\2\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\7\47\1\252\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\10\47"+
    "\4\0\1\47\1\253\1\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\3\0\16\214"+
    "\1\254\41\214\1\0\2\47\1\0\7\47\5\0\4\47"+
    "\1\255\3\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\7\47\5\0\2\47\1\256\5\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\10\47"+
    "\4\0\1\47\1\257\1\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\24\0\1\260"+
    "\37\0\2\47\1\0\3\47\1\175\3\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\5\47\1\261\2\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\26\0\1\262\15\0\1\263\22\0\1\264\54\0\2\47"+
    "\1\0\7\47\5\0\7\47\1\265\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\4\47\1\266"+
    "\3\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\10\47\4\0\1\47\1\267\1\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\1\47\1\270"+
    "\6\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\4\0\2\47\1\0"+
    "\7\47\5\0\1\271\7\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\1\47\1\272\6\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\4\47"+
    "\1\273\2\47\5\0\10\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\50\0\1\274\16\0\1\275\1\0\1\276\55\0\1\277"+
    "\1\0\1\300\100\0\1\301\31\0\2\47\1\0\7\47"+
    "\5\0\1\47\1\302\6\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\50\0\1\303\17\0\1\304\53\0\2\47\1\0\7\47"+
    "\5\0\6\47\1\305\1\47\4\0\3\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\4\47\1\306\3\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\10\47\1\307\3\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\3\0"+
    "\16\214\1\254\1\215\40\214\1\0\2\47\1\0\7\47"+
    "\5\0\10\47\4\0\1\47\1\310\1\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\4\0\2\47\1\0\7\47\5\0\1\47\1\311\6\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\10\47\1\312\3\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\33\0"+
    "\1\313\30\0\2\47\1\0\7\47\5\0\6\47\1\314"+
    "\1\47\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\32\0\1\315\57\0"+
    "\1\316\55\0\1\317\33\0\2\47\1\0\7\47\5\0"+
    "\2\47\1\320\5\47\4\0\3\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\1\321\6\47\5\0\10\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\5\47"+
    "\1\322\2\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\1\323\6\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\4\0\2\47\1\0\7\47\5\0\7\47\1\324"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\30\0\1\325\72\0\1\326"+
    "\25\0\1\327\75\0\1\330\70\0\1\331\23\0\2\47"+
    "\1\0\7\47\5\0\5\47\1\332\2\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\32\0\1\333\36\0\1\334\52\0\2\47"+
    "\1\0\2\47\1\335\4\47\5\0\10\47\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\7\47"+
    "\1\336\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\52\0\1\337\11\0"+
    "\2\47\1\0\7\47\5\0\7\47\1\340\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\24\0\1\341\64\0\1\342\32\0\2\47"+
    "\1\0\1\343\6\47\5\0\10\47\4\0\3\47\1\0"+
    "\2\47\3\0\1\47\1\0\1\47\1\50\1\47\1\0"+
    "\2\47\40\0\1\344\31\0\1\345\76\0\1\346\32\0"+
    "\2\47\1\0\2\47\1\347\4\47\5\0\10\47\4\0"+
    "\3\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\10\47\4\0\1\47\1\350\1\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\7\47\1\351\4\0\3\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\4\0\2\47\1\0\7\47\5\0\10\47"+
    "\4\0\1\47\1\352\1\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\4\0\2\47"+
    "\1\0\7\47\5\0\10\47\4\0\1\47\1\353\1\47"+
    "\1\0\2\47\3\0\1\47\1\0\1\47\1\50\1\47"+
    "\1\0\2\47\31\0\1\354\76\0\1\355\37\0\1\356"+
    "\53\0\1\357\65\0\1\360\37\0\1\361\105\0\1\362"+
    "\23\0\2\47\1\0\4\47\1\363\2\47\5\0\10\47"+
    "\4\0\3\47\1\0\2\47\3\0\1\47\1\0\1\47"+
    "\1\50\1\47\1\0\2\47\4\0\2\47\1\0\7\47"+
    "\5\0\10\47\4\0\1\47\1\364\1\47\1\0\2\47"+
    "\3\0\1\47\1\0\1\47\1\50\1\47\1\0\2\47"+
    "\50\0\1\365\13\0\2\47\1\0\4\47\1\366\2\47"+
    "\5\0\10\47\4\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\33\0\1\367"+
    "\50\0\1\370\37\0\2\47\1\0\7\47\5\0\7\47"+
    "\1\371\4\0\3\47\1\0\2\47\3\0\1\47\1\0"+
    "\1\47\1\50\1\47\1\0\2\47\32\0\1\372\51\0"+
    "\1\373\73\0\1\374\23\0\2\47\1\0\7\47\5\0"+
    "\10\47\4\0\1\47\1\234\1\47\1\0\2\47\3\0"+
    "\1\47\1\0\1\47\1\50\1\47\1\0\2\47\4\0"+
    "\2\47\1\0\7\47\5\0\10\47\4\0\1\47\1\375"+
    "\1\47\1\0\2\47\3\0\1\47\1\0\1\47\1\50"+
    "\1\47\1\0\2\47\4\0\2\47\1\0\7\47\5\0"+
    "\10\47\1\376\3\0\3\47\1\0\2\47\3\0\1\47"+
    "\1\0\1\47\1\50\1\47\1\0\2\47\7\0\1\377"+
    "\100\0\1\u0100\56\0\1\u0101\55\0\1\u0102\43\0\1\u0103"+
    "\57\0\1\u0104\55\0\1\205\100\0\1\u0105\52\0\1\u0106"+
    "\74\0\1\u0107\30\0\1\u0108\76\0\1\u0109\53\0\1\u010a"+
    "\73\0\1\u010b\43\0\1\u010c\63\0\1\u010d\56\0\1\u010e"+
    "\41\0\1\u010f\71\0\1\u0110\46\0\1\u0111\75\0\1\u0112"+
    "\61\0\1\u0113\54\0\1\u0114\70\0\1\u0115\46\0\1\u0116"+
    "\41\0\1\u0117\61\0\1\u0118\55\0\1\361\100\0\1\u0119"+
    "\65\0\1\u011a\47\0\1\u011b\67\0\1\u011c\43\0\1\u011d"+
    "\62\0\1\u011e\37\0\1\u011f\63\0\1\u0120\76\0\1\u0121"+
    "\51\0\1\u0122\45\0\1\u0123\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\21\1\4\11\2\1\2\11"+
    "\2\1\1\0\20\1\3\11\2\0\4\1\1\0\11\1"+
    "\2\0\4\1\1\0\1\1\1\11\11\1\1\0\10\1"+
    "\2\0\5\1\2\0\6\1\1\11\4\1\1\11\1\1"+
    "\1\11\3\1\1\0\2\1\2\0\5\1\1\0\4\1"+
    "\1\11\1\0\4\1\2\0\7\1\4\0\1\1\2\0"+
    "\5\1\1\0\3\1\1\0\1\1\3\0\7\1\1\0"+
    "\1\11\4\0\1\1\2\0\2\1\1\0\2\1\2\0"+
    "\1\1\3\0\5\1\5\0\1\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\3\0\5\1\4\0\2\11\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\3\0\1\1\2\0"+
    "\1\11\3\0\1\11\2\0\1\11\4\0\1\11\4\0"+
    "\2\11\5\0\1\11\7\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { lexeme=yytext(); return Parametros;
          }
        case 62: break;
        case 33: 
          { lexeme=yytext(); return Para;
          }
        case 63: break;
        case 42: 
          { lexeme=yytext(); return Funcion;
          }
        case 64: break;
        case 56: 
          { lexeme=yytext(); return ImprimirSalto;
          }
        case 65: break;
        case 52: 
          { lexeme=yytext(); return FinSegun;
          }
        case 66: break;
        case 49: 
          { lexeme=yytext(); return Mientras;
          }
        case 67: break;
        case 32: 
          { lexeme=yytext(); return OSi;
          }
        case 68: break;
        case 44: 
          { lexeme=yytext(); return Imprimir;
          }
        case 69: break;
        case 15: 
          { lexeme = yytext(); return LLaveC;
          }
        case 70: break;
        case 28: 
          { lexeme=yytext(); return Módulo;
          }
        case 71: break;
        case 31: 
          { lexeme=yytext(); return ComentarioMultilinea;
          }
        case 72: break;
        case 2: 
          { lexeme=yytext(); return Letra;
          }
        case 73: break;
        case 37: 
          { lexeme=yytext(); return Hacer;
          }
        case 74: break;
        case 55: 
          { lexeme=yytext(); return FinMetodo;
          }
        case 75: break;
        case 24: 
          { lexeme=yytext(); return LLamada;
          }
        case 76: break;
        case 58: 
          { lexeme=yytext(); return FinMientras;
          }
        case 77: break;
        case 12: 
          { lexeme = yytext(); return ParentesisA;
          }
        case 78: break;
        case 16: 
          { lexeme=yytext(); return Nombre;
          }
        case 79: break;
        case 17: 
          { lexeme=yytext(); return Reservadas;
          }
        case 80: break;
        case 9: 
          { lexeme=yytext(); return Division;
          }
        case 81: break;
        case 34: 
          { lexeme=yytext(); return Como;
          }
        case 82: break;
        case 43: 
          { lexeme=yytext(); return Repetir;
          }
        case 83: break;
        case 21: 
          { lexeme=yytext(); return Asignacion;
          }
        case 84: break;
        case 61: 
          { lexeme=yytext(); return Incremental;
          }
        case 85: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 86: break;
        case 27: 
          { lexeme=yytext(); return Comentario;
          }
        case 87: break;
        case 54: 
          { lexeme=yytext(); return ConValor;
          }
        case 88: break;
        case 53: 
          { lexeme=yytext(); return HastaQue;
          }
        case 89: break;
        case 60: 
          { lexeme=yytext(); return DeloContrario;
          }
        case 90: break;
        case 40: 
          { lexeme=yytext(); return FinSi;
          }
        case 91: break;
        case 22: 
          { lexeme=yytext(); return OperadorLogico;
          }
        case 92: break;
        case 23: 
          { lexeme=yytext(); return Cadena;
          }
        case 93: break;
        case 36: 
          { lexeme=yytext(); return Hasta;
          }
        case 94: break;
        case 10: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 95: break;
        case 7: 
          { lexeme=yytext(); return Resta;
          }
        case 96: break;
        case 50: 
          { lexeme=yytext(); return Potencia;
          }
        case 97: break;
        case 47: 
          { lexeme=yytext(); return Entonces;
          }
        case 98: break;
        case 13: 
          { lexeme = yytext(); return ParentesisC;
          }
        case 99: break;
        case 29: 
          { lexeme=yytext(); return Variable;
          }
        case 100: break;
        case 45: 
          { lexeme=yytext(); return Ingresar;
          }
        case 101: break;
        case 51: 
          { lexeme=yytext(); return Retornar;
          }
        case 102: break;
        case 57: 
          { lexeme=yytext(); return FinFuncion;
          }
        case 103: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 104: break;
        case 39: 
          { lexeme=yytext(); return Booleano;
          }
        case 105: break;
        case 18: 
          { lexeme=yytext(); return Si;
          }
        case 106: break;
        case 8: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 107: break;
        case 14: 
          { lexeme = yytext(); return LLaveA;
          }
        case 108: break;
        case 46: 
          { lexeme=yytext(); return FinPara;
          }
        case 109: break;
        case 30: 
          { lexeme=yytext(); return Caracter;
          }
        case 110: break;
        case 35: 
          { lexeme=yytext(); return Segun;
          }
        case 111: break;
        case 26: 
          { lexeme=yytext(); return Global;
          }
        case 112: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 113: break;
        case 11: 
          { lexeme=yytext(); return Coma;
          }
        case 114: break;
        case 25: 
          { lexeme=yytext(); return TipoDato;
          }
        case 115: break;
        case 4: 
          { /*Ignore*/
          }
        case 116: break;
        case 38: 
          { lexeme = yytext(); return OperadorRelacional;
          }
        case 117: break;
        case 48: 
          { lexeme=yytext(); return Ejecutar;
          }
        case 118: break;
        case 41: 
          { lexeme=yytext(); return Metodo;
          }
        case 119: break;
        case 19: 
          { lexeme = yytext(); return OperadorAtribucion;
          }
        case 120: break;
        case 20: 
          { lexeme = yytext(); return OperadorIncremento;
          }
        case 121: break;
        case 6: 
          { lexeme=yytext(); return Suma;
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
