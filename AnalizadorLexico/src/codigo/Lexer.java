/* The following code was generated by JFlex 1.4.3 on 16/09/22 09:18 PM */

package codigo;
import static codigo.Tokens.*;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/09/22 09:18 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\13\2\0\1\3\22\0\1\52\1\0\1\33\1\0"+
    "\1\40\1\61\1\0\1\36\1\55\1\56\1\17\1\15\1\50\1\16"+
    "\1\32\1\20\4\2\6\42\1\0\1\47\1\0\1\14\1\46\2\0"+
    "\1\30\1\57\1\27\1\23\1\6\1\5\1\45\1\12\1\4\1\54"+
    "\1\1\1\7\1\21\1\26\1\22\1\24\1\53\1\35\1\10\1\25"+
    "\1\51\1\34\1\11\1\1\1\60\1\1\1\62\1\0\1\63\1\0"+
    "\1\31\1\0\1\30\1\57\1\27\1\23\1\6\1\5\1\45\1\12"+
    "\1\4\1\54\1\1\1\7\1\21\1\26\1\22\1\24\1\53\1\35"+
    "\1\10\1\25\1\51\1\34\1\11\1\1\1\60\1\1\1\41\1\0"+
    "\1\43\u1f9a\0\1\37\1\44\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\6\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\15\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\1\1\20\1\21\2\0\1\2\1\22"+
    "\12\0\1\23\4\0\1\24\1\25\1\26\1\0\1\27"+
    "\5\0\1\30\12\0\1\31\6\0\1\32\3\0\1\33"+
    "\20\0\1\34\11\0\1\35\3\0\1\36\22\0\1\37"+
    "\3\0\1\40\2\0\1\41\1\0\1\42\11\0\1\43"+
    "\7\0\1\44\5\0\1\45\1\0\1\46\1\47\2\0"+
    "\1\50\16\0\1\33\2\0\1\51\13\0\1\52\23\0"+
    "\1\53\16\0\1\54\1\0\1\55\1\56\4\0\1\57"+
    "\1\50\1\0\1\60\1\61\1\0\1\62\2\0\1\63"+
    "\3\0\1\64\2\0\1\65\3\0\1\66\2\0\1\67"+
    "\4\0\1\70\4\0\1\71\1\72\5\0\1\73\7\0"+
    "\1\74\1\0\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\64\0\64\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u05b0\0\u02a4\0\64\0\64"+
    "\0\150\0\u05e4\0\u0618\0\150\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\150\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\64\0\64\0\64\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\150\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u04ac"+
    "\0\64\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\64"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\150\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u0c30\0\u1380"+
    "\0\u13b4\0\u13e8\0\64\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\64\0\u17c4\0\u17f8"+
    "\0\u182c\0\64\0\u1860\0\u1894\0\150\0\u18c8\0\150\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\150\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\150\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\150\0\u1d40"+
    "\0\u1d74\0\150\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\150\0\u211c\0\u2150\0\64\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\150\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\150\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c"+
    "\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\150\0\u2a74\0\u2aa8"+
    "\0\150\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\64\0\64\0\u2bac"+
    "\0\150\0\150\0\u2be0\0\150\0\u2c14\0\u2c48\0\150\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\150\0\u2d18\0\u2d4c\0\64\0\u2d80\0\u2db4"+
    "\0\u2de8\0\64\0\u2e1c\0\u2e50\0\64\0\u2e84\0\u2eb8\0\u2eec"+
    "\0\u2f20\0\64\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\64\0\64"+
    "\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\64\0\u3128\0\u315c"+
    "\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\64\0\u3294\0\64"+
    "\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\3\1\26\1\27"+
    "\1\30\1\31\1\2\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\4\1\40\1\2\1\3\1\2\1\41"+
    "\1\42\1\3\1\5\2\3\1\43\1\44\1\45\1\3"+
    "\1\46\1\47\1\50\65\0\2\51\1\0\7\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\1\51"+
    "\1\4\1\0\7\51\6\0\10\51\1\0\1\53\1\0"+
    "\2\51\4\0\1\4\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\6\0\1\5\46\0\1\5"+
    "\12\0\2\51\1\0\1\51\1\54\5\51\6\0\1\55"+
    "\4\51\1\56\2\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\1\57\2\51\1\60\3\51\6\0"+
    "\7\51\1\61\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\62\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\3\51\1\63\1\64\2\51\6\0\5\51"+
    "\1\65\2\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\1\51\1\66\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\1\67\1\51\1\70\4\51\6\0"+
    "\4\51\1\71\3\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\6\51\1\72\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\7\51\1\73\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\17\0\1\74\1\75\62\0\1\74\1\0\1\75\27\0"+
    "\1\76\31\0\1\74\63\0\1\74\2\0\1\77\1\100"+
    "\44\0\2\51\1\0\1\101\1\51\1\102\4\51\6\0"+
    "\1\51\1\103\5\51\1\104\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\1\105"+
    "\2\0\1\51\1\106\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\2\51\1\107\4\51\6\0\10\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\1\51\1\110\5\51\1\111\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\1\51\1\112"+
    "\6\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\113\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\1\51\1\114\5\51\1\115\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\5\51\1\116\2\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\117\1\0\7\117\6\0\11\117\2\0"+
    "\2\117\4\0\1\117\2\0\1\117\3\0\1\117\1\0"+
    "\2\117\2\0\2\117\3\0\33\120\1\121\30\120\1\0"+
    "\2\51\1\0\2\51\1\122\4\51\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\2\51"+
    "\1\123\4\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\1\124\2\0\7\124\6\0\10\124\3\0"+
    "\2\124\7\0\1\124\3\0\1\124\1\0\2\124\2\0"+
    "\2\124\43\0\1\125\24\0\2\51\1\0\7\51\6\0"+
    "\1\51\1\126\6\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\1\51"+
    "\1\127\61\0\1\130\7\0\1\53\37\0\1\53\22\0"+
    "\2\51\1\0\7\51\6\0\3\51\1\131\4\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\1\132"+
    "\6\51\6\0\10\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\133\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\5\51\1\134\2\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\1\51\1\135\6\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\3\51\1\136\3\51"+
    "\6\0\10\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\5\51\1\137\2\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\4\51"+
    "\1\140\2\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\1\141"+
    "\2\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\4\51\1\142\3\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\2\51\1\143\4\51"+
    "\6\0\10\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\10\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\144\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\10\51"+
    "\3\0\1\51\1\145\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\1\146\6\51\6\0\10\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\4\51\1\147\2\51"+
    "\6\0\6\51\1\150\1\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\3\0\17\77\1\151\1\0\43\77\13\100\1\0"+
    "\50\100\1\0\2\51\1\0\2\51\1\152\4\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\4\51\1\153\1\154\2\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\2\51\1\155\5\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\1\51\1\154\13\0\1\156\54\0"+
    "\2\51\1\0\7\51\6\0\10\51\1\157\2\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\4\51\1\160\3\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\10\51\3\0\1\51"+
    "\1\161\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\4\51\1\106\3\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\1\162\7\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\1\163\4\51\1\164\2\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\2\51\1\165\5\51\3\0\1\51\1\166\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\2\51\1\106"+
    "\5\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\117"+
    "\1\0\7\117\6\0\10\117\1\167\2\0\2\117\4\0"+
    "\1\117\2\0\1\117\3\0\1\117\1\0\2\117\2\0"+
    "\2\117\4\0\2\51\1\0\7\51\6\0\10\51\3\0"+
    "\1\51\1\170\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\3\51\1\171\1\172\3\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\41\0\1\173\66\0\1\174\23\0"+
    "\2\51\1\0\7\51\6\0\1\51\1\175\6\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\4\51\1\176\3\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\3\0"+
    "\1\51\1\177\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\6\51\1\200\1\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\10\51"+
    "\3\0\1\51\1\201\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\1\202\2\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\7\51"+
    "\1\203\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\4\51\1\204\2\51\6\0\10\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\6\51\1\205\1\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\2\51\1\54\4\51\6\0\10\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\7\0\1\206\16\0"+
    "\1\207\41\0\2\51\1\0\7\51\6\0\1\51\1\210"+
    "\6\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\6\51\1\211\1\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\212\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\1\213\6\51\6\0\10\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\3\51\1\140\3\51"+
    "\6\0\10\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\4\51\1\214\3\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\2\51"+
    "\1\215\4\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\23\0\1\216\44\0\2\51\1\0\7\51\6\0"+
    "\5\51\1\217\2\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\1\51\1\220\6\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\1\51\1\221\6\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\7\0\1\222\66\0\1\223\55\0\2\51"+
    "\1\0\2\51\1\224\4\51\6\0\10\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\7\51\1\225\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\2\51\1\226\4\51\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\1\51\1\227\6\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\1\230"+
    "\2\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\231\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\2\51\1\232\4\51\6\0\10\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\7\51"+
    "\1\233\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\2\51\1\234\5\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\2\51\1\235"+
    "\4\51\6\0\10\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\1\51\1\236\6\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\45\0\1\237\22\0"+
    "\2\51\1\0\3\51\1\240\3\51\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\2\51"+
    "\1\241\4\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\1\242\6\51\6\0\10\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\1\243\6\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\2\51\1\244\4\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\10\0\1\245"+
    "\2\0\1\246\10\0\1\247\2\0\1\250\40\0\2\51"+
    "\1\0\7\51\6\0\4\51\1\241\3\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\1\51\1\251\6\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\1\252\6\51\6\0\10\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\50\0\1\253\22\0\1\254"+
    "\60\0\2\51\1\0\7\51\6\0\5\51\1\255\2\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\10\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\256\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\5\51\1\257\2\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\5\51\1\260\2\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\7\51"+
    "\1\261\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\3\0\1\51\1\262\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\4\51"+
    "\1\263\3\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\2\51\1\264\5\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\10\51\3\0\1\51\1\265\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\25\0\1\266\42\0\2\51\1\0\7\51\6\0\5\51"+
    "\1\267\2\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\10\51\3\0\1\51\1\270"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\27\0\1\271\7\0\1\272\33\0"+
    "\1\273\60\0\2\51\1\0\7\51\6\0\5\51\1\274"+
    "\2\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\6\51\1\275\1\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\7\51\1\276\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\4\51\1\277\3\51\3\0"+
    "\2\51\4\0\1\51\2\0\1\51\3\0\1\51\1\0"+
    "\2\51\1\52\1\0\2\51\4\0\2\51\1\0\7\51"+
    "\6\0\10\51\3\0\1\51\1\300\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\5\0\1\301\37\0\1\301\22\0\2\51\1\0\2\51"+
    "\1\302\4\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\1\303\7\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\1\51\1\304\6\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\4\51\1\305\2\51"+
    "\6\0\10\51\3\0\2\51\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\54\0"+
    "\1\306\16\0\1\307\1\0\1\310\61\0\1\311\1\0"+
    "\1\312\105\0\1\313\34\0\2\51\1\0\7\51\6\0"+
    "\1\51\1\314\6\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\54\0\1\315\17\0\1\316\57\0\2\51\1\0\7\51"+
    "\6\0\6\51\1\317\1\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\4\51\1\320"+
    "\3\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\241\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\10\51\1\321"+
    "\2\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\10\51\3\0\1\51\1\322\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\1\51\1\323"+
    "\6\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\1\324\2\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\34\0\1\325\33\0\2\51\1\0\7\51"+
    "\6\0\6\51\1\326\1\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\1\51\1\241"+
    "\6\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\33\0\1\327"+
    "\63\0\1\330\61\0\1\331\36\0\2\51\1\0\7\51"+
    "\6\0\7\51\1\241\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\4\0\2\51\1\0\7\51\6\0\4\51\1\332\3\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\2\51\1\333\5\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\1\334\6\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\5\51\1\335\2\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\46\0\1\336\21\0\2\51\1\0"+
    "\7\51\6\0\7\51\1\337\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\1\340\6\51\6\0\10\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\7\51\1\341\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\31\0\1\342\102\0\1\343\24\0\1\344\102\0"+
    "\1\345\73\0\1\346\27\0\2\51\1\0\7\51\6\0"+
    "\5\51\1\347\2\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\33\0\1\350\41\0\1\351\56\0\2\51\1\0\2\51"+
    "\1\352\4\51\6\0\10\51\3\0\2\51\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\4\0\2\51\1\0\7\51\6\0\7\51\1\353"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\56\0\1\354\11\0"+
    "\2\51\1\0\7\51\6\0\7\51\1\355\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\25\0\1\356\70\0\1\357\35\0"+
    "\2\51\1\0\1\360\6\51\6\0\10\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\40\0\1\361\35\0\1\362\103\0"+
    "\1\363\35\0\2\51\1\0\2\51\1\364\4\51\6\0"+
    "\10\51\3\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\2\51\1\365\4\51\6\0\10\51\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\4\0\2\51\1\0\7\51\6\0"+
    "\10\51\3\0\1\51\1\366\4\0\1\51\2\0\1\51"+
    "\3\0\1\51\1\0\2\51\1\52\1\0\2\51\4\0"+
    "\2\51\1\0\7\51\6\0\7\51\1\367\3\0\2\51"+
    "\4\0\1\51\2\0\1\51\3\0\1\51\1\0\2\51"+
    "\1\52\1\0\2\51\47\0\1\173\20\0\2\51\1\0"+
    "\7\51\6\0\5\51\1\241\2\51\3\0\2\51\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\10\51"+
    "\3\0\1\51\1\370\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\3\0\1\51\1\371\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\32\0\1\372\105\0\1\373\40\0\1\374"+
    "\57\0\1\375\71\0\1\376\42\0\1\377\111\0\1\u0100"+
    "\27\0\2\51\1\0\4\51\1\u0101\2\51\6\0\10\51"+
    "\3\0\2\51\4\0\1\51\2\0\1\51\3\0\1\51"+
    "\1\0\2\51\1\52\1\0\2\51\4\0\2\51\1\0"+
    "\7\51\6\0\10\51\3\0\1\51\1\u0102\4\0\1\51"+
    "\2\0\1\51\3\0\1\51\1\0\2\51\1\52\1\0"+
    "\2\51\54\0\1\u0103\13\0\2\51\1\0\4\51\1\u0104"+
    "\2\51\6\0\10\51\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\34\0\1\u0105\54\0\1\u0106\42\0\2\51\1\0\7\51"+
    "\6\0\7\51\1\u0107\3\0\2\51\4\0\1\51\2\0"+
    "\1\51\3\0\1\51\1\0\2\51\1\52\1\0\2\51"+
    "\33\0\1\u0108\55\0\1\u0109\76\0\1\u010a\27\0\2\51"+
    "\1\0\7\51\6\0\10\51\3\0\1\51\1\241\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\10\51"+
    "\3\0\1\51\1\204\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\4\0\2\51"+
    "\1\0\7\51\6\0\10\51\3\0\1\51\1\u010b\4\0"+
    "\1\51\2\0\1\51\3\0\1\51\1\0\2\51\1\52"+
    "\1\0\2\51\4\0\2\51\1\0\7\51\6\0\10\51"+
    "\1\u010c\2\0\2\51\4\0\1\51\2\0\1\51\3\0"+
    "\1\51\1\0\2\51\1\52\1\0\2\51\7\0\1\u010d"+
    "\105\0\1\u010e\62\0\1\u010f\61\0\1\u0110\46\0\1\u0111"+
    "\63\0\1\u0112\61\0\1\206\105\0\1\u0113\56\0\1\u0114"+
    "\77\0\1\u0115\34\0\1\u0116\103\0\1\u0117\57\0\1\u0118"+
    "\76\0\1\u0119\50\0\1\u011a\67\0\1\u011b\62\0\1\u011c"+
    "\44\0\1\u011d\76\0\1\u011e\51\0\1\u011f\102\0\1\u0120"+
    "\65\0\1\u0121\60\0\1\u0122\73\0\1\u0123\53\0\1\u0124"+
    "\44\0\1\u0125\65\0\1\u0126\61\0\1\377\105\0\1\u0127"+
    "\70\0\1\u0128\54\0\1\u0129\72\0\1\u012a\50\0\1\u012b"+
    "\66\0\1\u012c\42\0\1\u012d\67\0\1\u012e\103\0\1\u012f"+
    "\55\0\1\u0130\50\0\1\u0131\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\21\1\6\11\2\1\2\11"+
    "\2\0\2\1\12\0\1\1\4\0\3\11\1\0\1\1"+
    "\5\0\1\1\12\0\1\11\6\0\1\11\3\0\1\1"+
    "\20\0\1\1\11\0\1\1\3\0\1\11\22\0\1\11"+
    "\3\0\1\11\2\0\1\1\1\0\1\1\11\0\1\1"+
    "\7\0\1\1\5\0\1\1\1\0\2\1\2\0\1\1"+
    "\16\0\1\1\2\0\1\11\13\0\1\1\23\0\1\1"+
    "\16\0\1\1\1\0\2\1\4\0\2\11\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\3\0\1\1\2\0\1\11"+
    "\3\0\1\11\2\0\1\11\4\0\1\11\4\0\2\11"+
    "\5\0\1\11\7\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { lexeme=yytext(); return Parametros;
          }
        case 63: break;
        case 33: 
          { lexeme=yytext(); return Para;
          }
        case 64: break;
        case 43: 
          { lexeme=yytext(); return Funcion;
          }
        case 65: break;
        case 57: 
          { lexeme=yytext(); return ImprimirSalto;
          }
        case 66: break;
        case 53: 
          { lexeme=yytext(); return FinSegun;
          }
        case 67: break;
        case 50: 
          { lexeme=yytext(); return Mientras;
          }
        case 68: break;
        case 32: 
          { lexeme=yytext(); return OSi;
          }
        case 69: break;
        case 16: 
          { lexeme = yytext(); return CorcheteA;
          }
        case 70: break;
        case 4: 
          { lexeme=yytext(); return Linea;
          }
        case 71: break;
        case 45: 
          { lexeme=yytext(); return Imprimir;
          }
        case 72: break;
        case 11: 
          { lexeme = yytext(); return LLaveC;
          }
        case 73: break;
        case 28: 
          { lexeme=yytext(); return Módulo;
          }
        case 74: break;
        case 31: 
          { lexeme=yytext(); return ComentarioMultilinea;
          }
        case 75: break;
        case 39: 
          { lexeme=yytext(); return Hacer;
          }
        case 76: break;
        case 56: 
          { lexeme=yytext(); return FinMetodo;
          }
        case 77: break;
        case 26: 
          { lexeme=yytext(); return LLamada;
          }
        case 78: break;
        case 59: 
          { lexeme=yytext(); return FinMientras;
          }
        case 79: break;
        case 14: 
          { lexeme = yytext(); return ParentesisA;
          }
        case 80: break;
        case 18: 
          { lexeme=yytext(); return Reservadas;
          }
        case 81: break;
        case 9: 
          { lexeme=yytext(); return Division;
          }
        case 82: break;
        case 34: 
          { lexeme=yytext(); return Como;
          }
        case 83: break;
        case 44: 
          { lexeme=yytext(); return Repetir;
          }
        case 84: break;
        case 22: 
          { lexeme=yytext(); return Asignacion;
          }
        case 85: break;
        case 62: 
          { lexeme=yytext(); return Incremental;
          }
        case 86: break;
        case 2: 
          { lexeme=yytext(); return Numero;
          }
        case 87: break;
        case 23: 
          { lexeme=yytext(); return Comentario;
          }
        case 88: break;
        case 55: 
          { lexeme=yytext(); return ConValor;
          }
        case 89: break;
        case 54: 
          { lexeme=yytext(); return HastaQue;
          }
        case 90: break;
        case 3: 
          { /*ignore*/
          }
        case 91: break;
        case 17: 
          { lexeme = yytext(); return CorcheteC;
          }
        case 92: break;
        case 61: 
          { lexeme=yytext(); return DeloContrario;
          }
        case 93: break;
        case 41: 
          { lexeme=yytext(); return FinSi;
          }
        case 94: break;
        case 24: 
          { lexeme=yytext(); return OperadorLogico;
          }
        case 95: break;
        case 25: 
          { lexeme=yytext(); return Cadena;
          }
        case 96: break;
        case 38: 
          { lexeme=yytext(); return Hasta;
          }
        case 97: break;
        case 12: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 98: break;
        case 7: 
          { lexeme=yytext(); return Resta;
          }
        case 99: break;
        case 51: 
          { lexeme=yytext(); return Potencia;
          }
        case 100: break;
        case 48: 
          { lexeme=yytext(); return Entonces;
          }
        case 101: break;
        case 15: 
          { lexeme = yytext(); return ParentesisC;
          }
        case 102: break;
        case 29: 
          { lexeme=yytext(); return Variable;
          }
        case 103: break;
        case 46: 
          { lexeme=yytext(); return Ingresar;
          }
        case 104: break;
        case 52: 
          { lexeme=yytext(); return Retornar;
          }
        case 105: break;
        case 58: 
          { lexeme=yytext(); return FinFuncion;
          }
        case 106: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 107: break;
        case 36: 
          { lexeme=yytext(); return Booleano;
          }
        case 108: break;
        case 19: 
          { lexeme=yytext(); return Si;
          }
        case 109: break;
        case 8: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 110: break;
        case 10: 
          { lexeme = yytext(); return LLaveA;
          }
        case 111: break;
        case 47: 
          { lexeme=yytext(); return FinPara;
          }
        case 112: break;
        case 30: 
          { lexeme=yytext(); return Caracter;
          }
        case 113: break;
        case 37: 
          { lexeme=yytext(); return Segun;
          }
        case 114: break;
        case 27: 
          { lexeme=yytext(); return Global;
          }
        case 115: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 116: break;
        case 13: 
          { lexeme=yytext(); return Coma;
          }
        case 117: break;
        case 35: 
          { lexeme=yytext(); return TipoDato;
          }
        case 118: break;
        case 40: 
          { lexeme = yytext(); return OperadorRelacional;
          }
        case 119: break;
        case 49: 
          { lexeme=yytext(); return Ejecutar;
          }
        case 120: break;
        case 42: 
          { lexeme=yytext(); return Metodo;
          }
        case 121: break;
        case 20: 
          { lexeme = yytext(); return OperadorAtribucion;
          }
        case 122: break;
        case 21: 
          { lexeme = yytext(); return OperadorIncremento;
          }
        case 123: break;
        case 6: 
          { lexeme=yytext(); return Suma;
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
