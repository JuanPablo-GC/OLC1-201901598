/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,34],$V2=[1,46],$V3=[1,47],$V4=[1,48],$V5=[1,49],$V6=[1,50],$V7=[1,35],$V8=[1,36],$V9=[1,37],$Va=[1,39],$Vb=[1,38],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[1,45],$Vi=[2,5,39,44,45,46,47,48,79,80,85,87,89,90,91,93,98,101,102,103,104,112],$Vj=[1,56],$Vk=[1,58],$Vl=[37,75],$Vm=[2,72],$Vn=[1,59],$Vo=[1,73],$Vp=[1,72],$Vq=[1,71],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,80],$Vx=[39,40,43,78],$Vy=[1,88],$Vz=[34,37,75],$VA=[2,127],$VB=[1,114],$VC=[1,113],$VD=[1,115],$VE=[1,116],$VF=[1,117],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[1,123],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[34,41,43,49,50,51,52,53,54,63,64,65,66,67,68,69,70,75,79,88],$VQ=[2,5,39,42,44,45,46,47,48,49,57,58,59,60,61,71,79,80,85,87,89,90,91,93,98,101,102,103,104,112],$VR=[1,154],$VS=[1,156],$VT=[41,43,75,79],$VU=[39,42,49,57,58,59,60,61,71],$VV=[34,41,43,49,50,63,64,65,66,67,68,69,70,75,79,88],$VW=[34,41,43,69,70,75,79,88],$VX=[43,75],$VY=[34,41,43,49,50,51,52,63,64,65,66,67,68,69,70,75,79,88],$VZ=[34,41,43,63,64,65,66,67,68,69,70,75,79,88],$V_=[34,41,43,67,68,69,70,75,79,88],$V$=[1,287],$V01=[1,288],$V11=[79,87,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"VECTOR":7,"DECLARACION":8,"ASIGNACION":9,"SENTENCIA_CASTEO":10,"SENTENCIA_IF":11,"SENTENCIA_SWITCH":12,"SENTENCIA_WHILE":13,"SENTENCIA_FOR":14,"SENTENCIA_DO_WHILE":15,"SENTENCIA_DO_UNTIL":16,"SENTENCIA_RETURN":17,"FUNCION":18,"METODO":19,"SENTENCIA_LLAMADA":20,"SENTENCIA_IMPRIMIR":21,"FUNCION_TOLOWER":22,"FUNCION_TOUPPER":23,"FUNCION_ROUND":24,"FUNCION_LENGTH":25,"FUNCION_TYPEOF":26,"FUNCION_TOSTRING":27,"FUNCION_TOCHARARRAY":28,"SENTENCIA_INCREMENTO":29,"SENTENCIA_TRANSFERECIA":30,"SENTENCIA_PUSH":31,"SENTENCIA_POP":32,"SENTENCIA_RUN":33,"punto_coma":34,"TIPO_VARIABLE":35,"LISTA_ID":36,"igual":37,"OPERACION":38,"id":39,"cor_izq":40,"cor_der":41,"par_izq":42,"par_der":43,"string":44,"int":45,"double":46,"boolean":47,"char":48,"menos":49,"mas":50,"por":51,"div":52,"mod":53,"potencia":54,"mas_mas":55,"menos_menos":56,"numero":57,"cadena":58,"caracter":59,"true":60,"false":61,"LLAMADA_ARITMETICA":62,"mayor":63,"menor":64,"mayor_igual":65,"menor_igual":66,"igual_que":67,"dif_que":68,"and":69,"or":70,"not":71,"punto":72,"length":73,"pop":74,"coma":75,"new":76,"PARAMETROS_LLAMADA":77,"llave_izq":78,"llave_der":79,"if":80,"BLOQUE":81,"LISTA_ELIF":82,"else":83,"elif":84,"switch":85,"CASOS":86,"case":87,"dos_puntos":88,"default":89,"while":90,"do":91,"until":92,"for":93,"SENTENCIA_FOR1":94,"SENTENCIA_FOR2":95,"SENTENCIA_TERNARIA":96,"interrogacion2":97,"return":98,"PARAMETROS_FUNCION":99,"void":100,"print":101,"println":102,"break":103,"continue":104,"toLower":105,"toUpper":106,"round":107,"typeof":108,"toStringA":109,"toCharArray":110,"push":111,"run":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",34:"punto_coma",37:"igual",39:"id",40:"cor_izq",41:"cor_der",42:"par_izq",43:"par_der",44:"string",45:"int",46:"double",47:"boolean",48:"char",49:"menos",50:"mas",51:"por",52:"div",53:"mod",54:"potencia",55:"mas_mas",56:"menos_menos",57:"numero",58:"cadena",59:"caracter",60:"true",61:"false",63:"mayor",64:"menor",65:"mayor_igual",66:"menor_igual",67:"igual_que",68:"dif_que",69:"and",70:"or",71:"not",72:"punto",73:"length",74:"pop",75:"coma",76:"new",78:"llave_izq",79:"llave_der",80:"if",83:"else",84:"elif",85:"switch",87:"case",88:"dos_puntos",89:"default",90:"while",91:"do",92:"until",93:"for",97:"interrogacion2",98:"return",100:"void",101:"print",102:"println",103:"break",104:"continue",105:"toLower",106:"toUpper",107:"round",108:"typeof",109:"toStringA",110:"toCharArray",111:"push",112:"run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,3],[8,5],[9,4],[9,7],[10,8],[35,1],[35,1],[35,1],[35,1],[35,1],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,4],[38,3],[38,3],[36,3],[36,1],[29,3],[29,3],[7,11],[7,10],[7,17],[7,15],[11,8],[11,7],[82,4],[82,8],[82,7],[12,7],[86,5],[86,4],[86,4],[13,7],[15,9],[16,9],[14,10],[94,1],[94,1],[95,2],[95,2],[95,3],[96,5],[17,3],[17,2],[18,9],[18,8],[99,4],[99,2],[19,8],[19,6],[20,4],[20,5],[62,3],[62,4],[77,3],[77,1],[21,5],[21,5],[30,2],[30,2],[22,8],[23,8],[24,8],[25,8],[26,8],[27,8],[28,10],[31,7],[32,6],[33,2],[81,1],[81,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 5: case 6: case 8: case 10: case 11: case 12: case 13: case 18: case 72:
 this.$ = $$[$0];
break;
case 31:
controller.listaErrores.push(new errores.default('Error Sintactico','Se esperaba un token distinto',_$[$0-1].first_line, _$[$0-1].first_column));
break;
case 32:
this.$=new declaracion.default($$[$0-1], $$[$0-2], null, _$[$0].first_line, _$[$0].first_column );
break;
case 33:
this.$=new declaracion.default($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 34:
this.$=new asignacion.default($$[$0-3], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 37:
this.$= new Tipo.default(Tipo.DataType.CADENA)
break;
case 38:
 this.$=new Tipo.default(Tipo.DataType.ENTERO) 
break;
case 39:
 this.$=new Tipo.default(Tipo.DataType.DECIMAL) 
break;
case 40:
 this.$=new Tipo.default(Tipo.DataType.BOOLEAN) 
break;
case 41:
this.$= new Tipo.default(Tipo.DataType.CARACTER) 
break;
case 42:
this.$= new aritmetico.default(aritmetico.tipoOp.NEGACION,$$[$0],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
this.$= new aritmetico.default(aritmetico.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 44:
this.$= new aritmetico.default(aritmetico.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 45:
this.$= new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46:
this.$= new aritmetico.default(aritmetico.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47:
this.$= new aritmetico.default(aritmetico.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 48:
this.$= new aritmetico.default(aritmetico.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 49:
  this.$ = $$[$0-1]; 
break;
case 50:
 this.$ = new IncreDecre2.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ = new IncreDecre2.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 52:
this.$= new Acceso.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 53:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 54:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 55:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 56: case 57:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 59:
this.$= new relacional.default(relacional.tipoOp.MAYOR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60:
this.$= new relacional.default(relacional.tipoOp.MENOR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 61:
this.$= new relacional.default(relacional.tipoOp.MAYOR_IGUAL,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 62:
this.$= new relacional.default(relacional.tipoOp.MENOR_IGUAL,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 63:
this.$= new relacional.default(relacional.tipoOp.IGUAL_QUE,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64:
this.$= new relacional.default(relacional.tipoOp.DIFENTE_QUE,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:
this.$= new logica.default(logica.tipoOp.AND,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$= new logica.default(logica.tipoOp.OR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67:
this.$= new logica.default(logica.tipoOp.NOT,$$[$0],$$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 73:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79: case 82:
this.$=new Si.default($$[$0-5],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 80: case 83:
this.$=new Si.default($$[$0-4],$$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 81:
this.$=$$[$0-1];
break;
case 88:
this.$ = new mientras.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 89:
this.$ = new HacerMientras.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 90:
this.$ = new HacerHastaQue.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 91:
this.$ = new ForIns.default($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], _$[$0-9].first_line,_$[$0-9].first_column);
break;
case 92: case 93:
this.$=$$[$0];
break;
case 94:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
this.$=new asignacion.default($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 112: case 113:
this.$=new impresion.default($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 126:
 this.$ = new estados.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 127:
 this.$ = new estados.default(new Array(), _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),{34:[1,53]},{36:55,39:$Vj,40:[1,54]},{37:[1,57],75:$Vk},o($Vl,$Vm,{40:$Vn,42:[1,60],55:[1,61],56:[1,62],72:[1,63]}),{42:[1,64]},{42:[1,65]},{42:[1,66]},{42:[1,67]},{78:[1,68]},{34:[1,70],38:69,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{42:[1,81]},{42:[1,82]},{34:[1,83]},{34:[1,84]},{20:85,39:[1,86]},o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),o($Vx,[2,41]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,31]),{41:[1,87]},{34:$Vy,37:[1,89],75:$Vk},o($Vz,$Vm),{38:90,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{39:[1,91]},{38:92,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{35:96,38:97,39:$Vo,42:$Vp,43:[1,94],44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:95,99:93},{34:[1,98]},{34:[1,99]},{74:[1,101],111:[1,100]},{38:102,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:103,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:104,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{8:106,9:107,35:108,36:33,39:[1,109],44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,94:105},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:110,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{34:[1,112],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},o($Vi,[2,99]),{38:127,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:128,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},o($VP,[2,52],{40:[1,131],42:[1,133],55:[1,129],56:[1,130],72:[1,132]}),o($VP,[2,53]),o($VP,[2,54]),o($VP,[2,55]),o($VP,[2,56]),o($VP,[2,57]),o($VP,[2,58]),{38:134,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:135,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:136,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},o($Vi,[2,114]),o($Vi,[2,115]),o($Vi,[2,125]),{42:[1,137]},{39:[1,138],40:[1,139]},o($VQ,[2,32]),{38:140,39:$Vo,42:[1,141],49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,73:[1,145],105:[1,142],106:[1,143],107:[1,144],108:[1,146],109:[1,147]},{34:[1,148],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},o($Vz,[2,71]),{41:[1,149],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,150],75:[1,151]},{34:$VR,78:[1,153],88:[1,152]},{43:[1,155],75:$VS},{39:[1,157]},o($VT,[2,111],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO}),o($Vi,[2,73]),o($Vi,[2,74]),{42:[1,158]},{42:[1,159]},{43:[1,160],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,161],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,162],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{38:163,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},o($VU,[2,92]),o($VU,[2,93]),{36:164,39:$Vj},o($Vl,$Vm,{40:$Vn}),{79:[1,165]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:[2,126],80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,98]),{38:166,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:167,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:168,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:169,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:170,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:171,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:172,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:173,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:174,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:175,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:176,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:177,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:178,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:179,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},o($VV,[2,42],{51:$VD,52:$VE,53:$VF,54:$VG}),{43:[1,180],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},o($VP,[2,50]),o($VP,[2,51]),{38:181,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{73:[1,182],74:[1,183]},{38:97,39:$Vo,42:$Vp,43:[1,184],49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:185},o($VW,[2,67],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),{43:[1,186],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,187],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{38:97,39:$Vo,42:$Vp,43:[1,188],49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:95},{37:[1,189]},{41:[1,190]},{34:[1,191],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{35:192,38:128,39:$Vo,42:$Vp,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{42:[1,193]},{42:[1,194]},{42:[1,195]},{42:[1,196]},{42:[1,197]},{42:[1,198]},o($VQ,[2,34]),{37:[1,199]},{88:[1,200]},{35:201,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},{35:202,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,100:[1,203]},{2:$V0,4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,106]),{34:[1,205]},{38:206,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},o($VX,[2,103]),{38:207,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{43:[1,208]},{78:[1,209]},{78:[1,210]},{78:[1,211]},{34:[1,212],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{34:$Vy,37:[1,213],75:$Vk},{90:[1,214],92:[1,215]},o($VV,[2,43],{51:$VD,52:$VE,53:$VF,54:$VG}),o($VV,[2,44],{51:$VD,52:$VE,53:$VF,54:$VG}),o($VY,[2,45],{53:$VF,54:$VG}),o($VY,[2,46],{53:$VF,54:$VG}),o($VY,[2,47],{53:$VF,54:$VG}),o($VY,[2,48],{53:$VF,54:$VG}),o($VZ,[2,59],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VZ,[2,60],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VZ,[2,61],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VZ,[2,62],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($V_,[2,63],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK}),o($V_,[2,64],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK}),o($VW,[2,65],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o([34,41,43,70,75,79,88],[2,66],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN}),o($VP,[2,49]),{41:[1,216],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,108]),{43:[1,217],75:$VS},{34:[1,218]},{34:[1,219]},{34:$VR},{76:[1,220],110:[1,221]},{39:[1,222]},o($VQ,[2,33]),{43:[1,223]},{38:224,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:225,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:226,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:227,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:228,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:229,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:230,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{35:231,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},{39:[1,232]},{78:[1,233]},{78:[1,234]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:[1,235],80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,107]),o($VT,[2,110],{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO}),{43:[1,236],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{34:[1,237]},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:238,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{86:239,87:[1,240]},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:241,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{39:[1,243],95:242},{38:140,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{42:[1,244]},{42:[1,245]},o($VP,[2,68]),o($VP,[2,109]),o($Vi,[2,112]),o($Vi,[2,113]),{35:246,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},{42:[1,247]},{37:[1,248]},{38:249,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{43:[1,250],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,251],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,252],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,253],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,254],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,255],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{34:[1,256],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{78:[1,257]},o($VX,[2,102]),{2:$V0,4:258,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{2:$V0,4:259,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,105]),{34:[1,260]},o($Vi,[2,124]),{79:[1,261]},{79:[1,262],87:[1,263],89:[1,264]},{38:265,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{79:[1,266]},{43:[1,267]},{37:[1,270],55:[1,268],56:[1,269]},{38:271,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{38:272,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{40:[1,273]},{58:[1,274]},{78:[1,275]},{34:[1,276],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{34:[1,277]},{34:[1,278]},{34:[1,279]},{34:[1,280]},{34:[1,281]},{34:[1,282]},o($VQ,[2,35]),{2:$V0,4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:[1,284],80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:[1,285],80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,123]),o($Vi,[2,80],{82:286,83:$V$,84:$V01}),o($Vi,[2,84]),{38:289,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{88:[1,290]},{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,88:[1,291]},o($Vi,[2,88]),{78:[1,292]},{43:[2,94]},{43:[2,95]},{38:293,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{43:[1,294],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{43:[1,295],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{38:97,39:$Vo,41:[1,297],42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:296},{43:[1,298]},{78:[1,299]},o($Vi,[2,36]),o($Vi,[2,116]),o($Vi,[2,117]),o($Vi,[2,118]),o($Vi,[2,119]),o($Vi,[2,120]),o($Vi,[2,121]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:[1,300],80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($Vi,[2,101]),o($Vi,[2,104]),o($Vi,[2,79]),{78:[1,301]},{42:[1,302]},{49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,88:[1,303]},{2:$V0,4:304,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{2:$V0,4:305,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:306,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{43:[2,96],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},{34:[1,307]},{34:[1,308]},{41:[1,309],75:$VS},{34:[1,310]},{34:[1,311]},{38:97,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:312,79:[1,313]},o($Vi,[2,100]),{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:314,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{38:315,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw},{2:$V0,4:316,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},o($V11,[2,87],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,6:52,2:$V0,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh}),o($V11,[2,86],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,6:52,2:$V0,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh}),{79:[1,317]},o($Vi,[2,89]),o($Vi,[2,90]),{34:[1,318]},o($Vi,[2,76]),o($Vi,[2,122]),{75:$VS,79:[1,319]},{75:[1,320]},{79:[1,321]},{43:[1,322],49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO},o($V11,[2,85],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,6:52,2:$V0,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,80:$V7,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh}),o($Vi,[2,91]),o($Vi,[2,75]),{75:[1,323]},{78:[1,324]},o($Vi,[2,81]),{78:[1,325]},{78:[1,326]},{79:[1,327]},{2:$V0,4:111,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,35:32,36:33,39:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,79:$VA,80:$V7,81:328,85:$V8,90:$V9,91:$Va,93:$Vb,98:$Vc,101:$Vd,102:$Ve,103:$Vf,104:$Vg,112:$Vh},{38:97,39:$Vo,42:$Vp,49:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:79,71:$Vw,77:329},{79:[1,330]},{79:[1,331]},{75:$VS,79:[1,332]},{34:[1,333]},o($Vi,[2,83],{82:334,83:$V$,84:$V01}),{79:[1,335]},o($Vi,[2,78]),o($Vi,[2,82]),{34:[1,336]},o($Vi,[2,77])],
defaultActions: {51:[2,1],268:[2,94],269:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const controller = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
  
    //codigo js
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Symbol/Type');
    const impresion = require('./Instructions/imprimir');
    const declaracion = require('./Instructions/Declaracion');
    //const controller = require('../../../controller/parser/parser')
    //const errores = require('./Exceptions/Error')

    const aritmetico=require('./Expresions/Aritmetica');
    const relacional = require('./Expresions/Relacional');
    const logica = require('./Expresions/Logica');
    const asignacion =require('./Instructions/Asignacion');

    
    const Acceso = require('./Expresions/Acceso');
    const Si = require('./Instructions/Si');
    const mientras = require('./Instructions/Mientras'); 
    const estados = require('./Instructions/Estados'); 
    const IncreDecre = require('./Instructions/IncrementoDecremento'); 
    const IncreDecre2 = require('./Expresions/IncreDecre');
    const ForIns = require('./Instructions/ForIns');

    const HacerMientras = require('./Instructions/HacerMientras');
    const Arreglo = require('./Instructions/Arreglo');
    const ExpresionesArreglo = require('./Expresions/ExpresionesArreglo');

    const ArregloAsignacion = require('./Instructions/ArregloAsignacion');
    const ArregloAccion = require('./Instructions/ArregloAccion');
    const HacerHastaQue = require('./Instructions/HacerHastaQue');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*se ignoran*/ 
break;
case 1: /*estos caracteres se omiten*/  
break;
case 2: /*estos caracteres se omiten*/  
break;
case 3: /*estos caracteres se omiten*/  
break;
case 4: /*estos caracteres se omiten*/  
break;
case 5:return 44;
break;
case 6:return 45;
break;
case 7:return 46;
break;
case 8:return 48;
break;
case 9:return 47;
break;
case 10:return 100;
break;
case 11:return 112;
break;
case 12:return 76;
break;
case 13:return 111;
break;
case 14:return 74;
break;
case 15:return 105;
break;
case 16:return 106;
break;
case 17:return 107;
break;
case 18:return 73;
break;
case 19:return 108;
break;
case 20:return 109;
break;
case 21:return 110;
break;
case 22:return 80;
break;
case 23:return 84;
break;
case 24:return 83;
break;
case 25:return 60;
break;
case 26:return 61;
break;
case 27:return 85;
break;
case 28:return 87;
break;
case 29:return 89;
break;
case 30:return 90;
break;
case 31:return 91;
break;
case 32:return 92;
break;
case 33:return 93;
break;
case 34:return 'in';
break;
case 35:return 'of';
break;
case 36:return 'Array';
break;
case 37:return 34;
break;
case 38:return 75;
break;
case 39:return 88;
break;
case 40:return 78;
break;
case 41:return 79;
break;
case 42:return 42;
break;
case 43:return 43;
break;
case 44:return 40;
break;
case 45:return 41;
break;
case 46:return 'interrogacion';
break;
case 47:return 97;
break;
case 48:return 72;
break;
case 49:return 55
break;
case 50:return 50;
break;
case 51:return 56
break;
case 52:return 49;
break;
case 53:return 54;
break;
case 54:return 51;
break;
case 55:return 52;
break;
case 56:return 53;
break;
case 57:return 66;
break;
case 58:return 65;
break;
case 59:return 63;
break;
case 60:return 64;
break;
case 61:return 67;
break;
case 62:return 37;
break;
case 63:return 68;
break;
case 64:return 69;
break;
case 65:return 70;
break;
case 66:return 71;
break;
case 67:return 103;
break;
case 68:return 104;
break;
case 69:return 98;
break;
case 70:return 101;
break;
case 71:return 102;
break;
case 72:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 58;
break;
case 73: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 74: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 75:return 59; 
break;
case 76:return 59; 
break;
case 77:return 57;
break;
case 78:return 39;
break;
case 79:return 5;
break;
case 80:controller.listaErrores.push(new errores.default('Error Lexico', yy_.yytext,yy_.yylineno+1, yy_.yylloc.first_column + 1));
break;
case 81:// return 'INVALID';
break;
case 82://console.log('error lexico ',` linea: ${yy_.yylineno + 1}`, ` El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` );
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:if\b)/i,/^(?:elif\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:Array\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:¿)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:`[^\`]*`)/i,/^(?:'[a-zA-Z]')/i,/^(?:"[a-zA-Z]")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}