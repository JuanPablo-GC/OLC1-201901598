/* The following code was generated by JFlex 1.4.3 on 12/09/22 01:53 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/09/22 01:53 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\37\2\0\1\3\22\0\1\33\1\0\1\32\2\0"+
    "\1\53\1\0\1\36\1\47\1\50\1\16\1\14\1\43\1\15\1\31"+
    "\1\17\12\2\1\0\1\42\1\0\1\13\1\41\2\0\1\27\1\51"+
    "\1\26\1\22\1\6\1\5\1\40\1\12\1\4\1\46\1\1\1\7"+
    "\1\20\1\25\1\21\1\23\1\45\1\35\1\10\1\24\1\44\1\34"+
    "\1\11\1\1\1\52\1\1\1\56\1\0\1\57\1\0\1\30\1\0"+
    "\1\27\1\51\1\26\1\22\1\6\1\5\1\40\1\12\1\4\1\46"+
    "\1\1\1\7\1\20\1\25\1\21\1\23\1\45\1\35\1\10\1\24"+
    "\1\44\1\34\1\11\1\1\1\52\1\1\1\54\1\0\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\6\1\1\4\4\5\14\1"+
    "\1\6\1\7\1\10\1\11\2\1\1\12\1\13\1\14"+
    "\1\15\2\0\1\16\11\1\1\17\3\1\1\20\1\21"+
    "\1\22\2\0\4\1\1\0\1\23\10\1\2\0\2\1"+
    "\1\0\1\1\1\24\1\2\3\1\1\25\3\1\1\0"+
    "\6\1\2\0\1\26\3\1\1\5\1\1\2\0\7\1"+
    "\1\27\1\30\3\1\1\31\4\1\1\0\2\1\2\0"+
    "\5\1\1\0\1\32\4\1\1\33\1\0\1\1\1\34"+
    "\1\1\1\35\2\0\11\1\4\0\1\36\1\1\2\0"+
    "\2\1\1\37\1\40\1\41\1\0\2\1\1\42\1\43"+
    "\1\0\2\1\3\0\7\1\1\44\1\1\1\0\1\45"+
    "\4\0\1\1\2\0\2\1\1\0\1\1\1\46\2\0"+
    "\1\1\1\47\3\0\7\1\5\0\1\50\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\3\0\2\1\1\51\1\1"+
    "\1\52\1\53\4\0\1\54\1\42\1\0\1\55\1\56"+
    "\1\0\1\57\2\0\1\60\3\0\1\61\2\0\1\62"+
    "\3\0\1\63\2\0\1\64\4\0\1\65\4\0\1\66"+
    "\1\67\5\0\1\70\7\0\1\71\1\0\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\60\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\60\0\60\0\60\0\60"+
    "\0\u0510\0\u0270\0\60\0\60\0\60\0\60\0\u0540\0\u0570"+
    "\0\140\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\140\0\u0750\0\u0780\0\u07b0\0\60\0\60"+
    "\0\60\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\140\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\60"+
    "\0\u0570\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0810\0\u0ed0\0\u0f00\0\u0f30\0\140\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110"+
    "\0\u0ab0\0\60\0\u1140\0\u1170\0\u11a0\0\60\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u1470\0\u14a0\0\u14d0"+
    "\0\u1500\0\u1530\0\60\0\u1560\0\u1590\0\140\0\u15c0\0\140"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\140"+
    "\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\140\0\u19b0\0\140"+
    "\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\140\0\u1d10\0\u1d40\0\60\0\u1d70\0\u1da0"+
    "\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20"+
    "\0\u1f50\0\140\0\u1f80\0\u1fb0\0\u1fe0\0\140\0\u2010\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0"+
    "\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\140\0\u22e0\0\u2310"+
    "\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490"+
    "\0\u24c0\0\u24f0\0\u2520\0\u2550\0\140\0\u2580\0\u25b0\0\140"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\60\0\60\0\u26a0\0\140"+
    "\0\140\0\u26d0\0\140\0\u2700\0\u2730\0\140\0\u2760\0\u2790"+
    "\0\u27c0\0\140\0\u27f0\0\u2820\0\60\0\u2850\0\u2880\0\u28b0"+
    "\0\60\0\u28e0\0\u2910\0\60\0\u2940\0\u2970\0\u29a0\0\u29d0"+
    "\0\60\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\60\0\60\0\u2ac0"+
    "\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\60\0\u2bb0\0\u2be0\0\u2c10"+
    "\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\60\0\u2d00\0\60\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\5\1\32\1\33\1\34\1\5"+
    "\1\3\1\2\1\35\1\36\3\3\1\37\1\40\1\41"+
    "\1\3\1\42\1\43\1\44\1\45\1\46\61\0\2\3"+
    "\1\0\7\3\5\0\10\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\1\3\1\4"+
    "\1\0\7\3\5\0\10\3\1\0\1\50\2\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\10\0"+
    "\1\5\27\0\1\5\3\0\1\5\21\0\2\3\1\0"+
    "\1\3\1\51\5\3\5\0\1\52\4\3\1\53\2\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\1\54\6\3\5\0\7\3"+
    "\1\55\4\0\2\3\2\0\1\3\3\0\1\56\2\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\3\3\1\57"+
    "\1\60\2\3\5\0\5\3\1\61\2\3\4\0\2\3"+
    "\2\0\1\3\3\0\2\3\1\62\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\1\63\1\3\1\64\4\3\5\0"+
    "\10\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\6\3\1\65\5\0"+
    "\10\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\7\3"+
    "\1\66\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\20\0\1\67\1\70\56\0\1\67\1\0"+
    "\1\70\23\0\1\71\31\0\1\67\57\0\1\67\2\0"+
    "\1\72\1\73\41\0\2\3\1\0\1\74\1\3\1\75"+
    "\4\3\5\0\1\3\1\76\5\3\1\77\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\7\3\5\0\10\3\1\100\3\0\1\3"+
    "\1\101\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\2\3\1\102\4\3\5\0\10\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\1\3\1\103"+
    "\5\3\1\104\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\1\3\1\105\6\3\4\0\2\3\2\0\1\3\3\0"+
    "\1\106\2\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\1\3\1\107\5\3\1\110\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\7\3\5\0\5\3\1\111\2\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\112\1\0\7\112\5\0\11\112\3\0\2\112"+
    "\2\0\1\112\3\0\3\112\2\0\2\112\6\0\2\113"+
    "\1\0\7\113\5\0\10\113\3\0\3\113\2\0\1\113"+
    "\3\0\3\113\2\0\2\113\6\0\2\3\1\0\2\3"+
    "\1\114\4\3\5\0\10\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\2\3\1\115\4\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\1\116"+
    "\2\0\7\116\5\0\10\116\4\0\2\116\2\0\1\116"+
    "\3\0\3\116\2\0\2\116\6\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\117\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\55\0\1\120\11\0"+
    "\1\121\56\0\2\3\1\0\7\3\5\0\3\3\1\122"+
    "\4\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\1\123\6\3\5\0"+
    "\10\3\4\0\2\3\2\0\1\124\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\5\3"+
    "\1\125\2\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\3\3\1\126"+
    "\3\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\5\3\1\127\2\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\4\3\1\130\2\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\10\3\1\131\3\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\4\3\1\132\3\3\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\2\3\1\133\4\3\5\0\10\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\7\3\5\0\10\3\4\0\2\3"+
    "\2\0\1\134\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\1\135\6\3\5\0\10\3\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\4\3\1\136\2\3\5\0\6\3\1\137"+
    "\1\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\5\0\16\140\1\141\41\140\37\142\1\0"+
    "\20\142\1\0\2\3\1\0\2\3\1\143\4\3\5\0"+
    "\10\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\4\3"+
    "\1\144\1\145\2\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\2\3\1\146\5\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\1\3\1\147\15\0\1\150\50\0"+
    "\2\3\1\0\7\3\5\0\10\3\1\151\3\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\7\3\5\0\4\3\1\152\3\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\7\3\5\0\10\3\4\0\1\3"+
    "\1\153\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\7\3\5\0\4\3\1\101\3\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\1\154\7\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\1\155\4\3"+
    "\1\156\2\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\2\3\1\157\5\3\4\0\1\3\1\160\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\2\3\1\101\5\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\112"+
    "\1\0\7\112\5\0\10\112\1\161\3\0\2\112\2\0"+
    "\1\112\3\0\3\112\2\0\2\112\6\0\2\113\1\0"+
    "\7\113\5\0\10\113\2\0\1\162\3\113\2\0\1\113"+
    "\3\0\3\113\2\0\2\113\6\0\2\3\1\0\7\3"+
    "\5\0\10\3\4\0\1\3\1\163\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\3\3\1\164\1\165\3\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\43\0\1\166"+
    "\22\0\2\3\1\0\7\3\5\0\1\3\1\167\6\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\170\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\6\3\1\171"+
    "\1\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\10\3"+
    "\4\0\1\3\1\172\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\10\3"+
    "\1\173\3\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\4\3\1\174\2\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\6\3\1\175\1\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\2\3"+
    "\1\51\4\3\5\0\10\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\11\0\1\176\15\0"+
    "\1\177\36\0\2\3\1\0\7\3\5\0\1\3\1\200"+
    "\6\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\6\3"+
    "\1\201\1\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\10\3\4\0\2\3\2\0\1\3\3\0\1\202\2\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\3\3\1\130"+
    "\3\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\4\3\1\203\3\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\2\3\1\204\4\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\5\0\77\205"+
    "\1\206\40\205\1\0\2\3\1\0\7\3\5\0\5\3"+
    "\1\207\2\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\1\3\1\210\6\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\211\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\1\3\1\212\6\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\11\0\1\213"+
    "\62\0\1\214\51\0\2\3\1\0\2\3\1\215\4\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\7\3\1\216\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\2\3\1\217"+
    "\4\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\220\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\10\3\1\221\2\0\1\222\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\2\3\1\223\4\3\5\0\10\3\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\7\3\5\0\7\3\1\224\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\7\3\5\0\2\3\1\225\5\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\2\3\1\226\4\3\5\0\10\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\1\3\1\227"+
    "\6\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\3\3\1\230\3\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\1\231\6\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\1\232\6\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\2\3\1\233"+
    "\4\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\12\0\1\234\2\0\1\235"+
    "\7\0\1\236\2\0\1\237\35\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\240\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\1\241\6\3\5\0\10\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\45\0\1\242\23\0"+
    "\1\243\54\0\2\3\1\0\7\3\5\0\5\3\1\244"+
    "\2\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\10\3"+
    "\4\0\2\3\2\0\1\3\3\0\1\245\2\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\5\3"+
    "\1\246\2\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\7\3\1\247\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\10\3\4\0\1\3\1\250\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\5\0\16\205\1\251\41\205\1\0"+
    "\2\3\1\0\7\3\5\0\4\3\1\252\3\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\7\3\5\0\2\3\1\253\5\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\254\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\255\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\26\0\1\256\37\0\2\3\1\0\7\3\5\0"+
    "\5\3\1\257\2\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\10\3\4\0\1\3\1\260\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\30\0\1\261\10\0\1\262"+
    "\27\0\1\263\54\0\2\3\1\0\7\3\5\0\5\3"+
    "\1\264\2\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\6\3\1\265\1\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\7\3\1\266\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\4\3\1\267\3\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\10\3\4\0\1\3\1\270\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\2\3\1\271\4\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\1\272\7\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\1\3\1\273\6\3\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\6\0"+
    "\2\3\1\0\4\3\1\274\2\3\5\0\10\3\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\51\0\1\275\17\0\1\276\1\0\1\277\55\0\1\300"+
    "\1\0\1\301\100\0\1\302\31\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\303\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\51\0\1\304\20\0"+
    "\1\305\53\0\2\3\1\0\7\3\5\0\6\3\1\306"+
    "\1\3\4\0\2\3\2\0\1\3\3\0\3\3\1\47"+
    "\1\0\2\3\6\0\2\3\1\0\7\3\5\0\4\3"+
    "\1\307\3\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\10\3\1\310\3\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\5\0\16\205\1\251\1\206\40\205"+
    "\1\0\2\3\1\0\7\3\5\0\10\3\4\0\1\3"+
    "\1\311\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\6\0\2\3\1\0\7\3\5\0\1\3\1\312\6\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\1\313"+
    "\3\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\35\0\1\314\30\0\2\3\1\0\7\3\5\0"+
    "\6\3\1\315\1\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\1\3\1\316\6\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\34\0\1\317\57\0"+
    "\1\320\55\0\1\321\33\0\2\3\1\0\7\3\5\0"+
    "\7\3\1\316\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\7\3\5\0"+
    "\4\3\1\322\3\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\2\3\1\323\5\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\1\324\6\3\5\0\10\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\5\3\1\325\2\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\7\3\1\326\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\1\327\6\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\7\3\1\330\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\32\0\1\331"+
    "\72\0\1\332\25\0\1\333\75\0\1\334\70\0\1\335"+
    "\23\0\2\3\1\0\7\3\5\0\5\3\1\336\2\3"+
    "\4\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\34\0\1\337\36\0\1\340\52\0\2\3\1\0"+
    "\2\3\1\341\4\3\5\0\10\3\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\6\0\2\3"+
    "\1\0\7\3\5\0\7\3\1\342\4\0\2\3\2\0"+
    "\1\3\3\0\3\3\1\47\1\0\2\3\52\0\1\343"+
    "\13\0\2\3\1\0\7\3\5\0\7\3\1\344\4\0"+
    "\2\3\2\0\1\3\3\0\3\3\1\47\1\0\2\3"+
    "\26\0\1\345\64\0\1\346\32\0\2\3\1\0\1\347"+
    "\6\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\42\0\1\350\31\0\1\351"+
    "\76\0\1\352\32\0\2\3\1\0\2\3\1\353\4\3"+
    "\5\0\10\3\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\6\0\2\3\1\0\2\3\1\354"+
    "\4\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\10\3\4\0\1\3\1\355\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\7\3\1\356\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\5\3\1\316\2\3\4\0\2\3\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\10\3\4\0\1\3\1\357\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\6\0\2\3\1\0"+
    "\7\3\5\0\10\3\4\0\1\3\1\360\2\0\1\3"+
    "\3\0\3\3\1\47\1\0\2\3\33\0\1\361\75\0"+
    "\1\362\40\0\1\363\53\0\1\364\65\0\1\365\37\0"+
    "\1\366\105\0\1\367\23\0\2\3\1\0\4\3\1\370"+
    "\2\3\5\0\10\3\4\0\2\3\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\6\0\2\3\1\0\7\3"+
    "\5\0\10\3\4\0\1\3\1\371\2\0\1\3\3\0"+
    "\3\3\1\47\1\0\2\3\51\0\1\372\14\0\2\3"+
    "\1\0\4\3\1\373\2\3\5\0\10\3\4\0\2\3"+
    "\2\0\1\3\3\0\3\3\1\47\1\0\2\3\35\0"+
    "\1\374\50\0\1\375\37\0\2\3\1\0\7\3\5\0"+
    "\7\3\1\376\4\0\2\3\2\0\1\3\3\0\3\3"+
    "\1\47\1\0\2\3\34\0\1\377\51\0\1\u0100\73\0"+
    "\1\u0101\23\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\316\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\174\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\4\0"+
    "\1\3\1\u0102\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\6\0\2\3\1\0\7\3\5\0\10\3\1\u0103"+
    "\3\0\2\3\2\0\1\3\3\0\3\3\1\47\1\0"+
    "\2\3\11\0\1\u0104\100\0\1\u0105\56\0\1\u0106\55\0"+
    "\1\u0107\43\0\1\u0108\57\0\1\u0109\55\0\1\176\100\0"+
    "\1\u010a\52\0\1\u010b\74\0\1\u010c\30\0\1\u010d\76\0"+
    "\1\u010e\53\0\1\u010f\73\0\1\u0110\43\0\1\u0111\63\0"+
    "\1\u0112\56\0\1\u0113\41\0\1\u0114\71\0\1\u0115\46\0"+
    "\1\u0116\75\0\1\u0117\61\0\1\u0118\54\0\1\u0119\70\0"+
    "\1\u011a\46\0\1\u011b\41\0\1\u011c\61\0\1\u011d\55\0"+
    "\1\366\100\0\1\u011e\65\0\1\u011f\47\0\1\u0120\67\0"+
    "\1\u0121\43\0\1\u0122\62\0\1\u0123\37\0\1\u0124\63\0"+
    "\1\u0125\76\0\1\u0126\51\0\1\u0127\45\0\1\u0128\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\20\1\4\11\2\1\4\11"+
    "\2\0\16\1\3\11\2\0\4\1\1\0\11\1\2\0"+
    "\2\1\1\0\1\1\1\11\10\1\1\0\6\1\2\0"+
    "\6\1\2\0\10\1\1\11\3\1\1\11\4\1\1\0"+
    "\2\1\2\0\5\1\1\0\5\1\1\11\1\0\4\1"+
    "\2\0\11\1\4\0\2\1\2\0\5\1\1\0\4\1"+
    "\1\0\2\1\3\0\11\1\1\0\1\11\4\0\1\1"+
    "\2\0\2\1\1\0\2\1\2\0\2\1\3\0\7\1"+
    "\5\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\3\0\6\1\4\0\2\11\1\0\2\1\1\0\1\1"+
    "\2\0\1\1\3\0\1\1\2\0\1\11\3\0\1\11"+
    "\2\0\1\11\4\0\1\11\4\0\2\11\5\0\1\11"+
    "\7\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    String resultado="";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return new Symbol(sym.Incremental, yychar, yyline, yytext());
          }
        case 60: break;
        case 8: 
          { resultado += yytext();
    return new Symbol(sym.ParentesisA, yychar, yyline, yytext());
          }
        case 61: break;
        case 28: 
          { return new Symbol(sym.Para, yychar, yyline, yytext());
          }
        case 62: break;
        case 42: 
          { return new Symbol(sym.Imprimir, yychar, yyline, yytext());
          }
        case 63: break;
        case 57: 
          { return new Symbol(sym.Parametros, yychar, yyline, yytext());
          }
        case 64: break;
        case 46: 
          { return new Symbol(sym.Ejecutar, yychar, yyline, yytext());
          }
        case 65: break;
        case 44: 
          { return new Symbol(sym.FinPara, yychar, yyline, yytext());
          }
        case 66: break;
        case 36: 
          { System.out.println("INICIA PYTHON");
    return new Symbol(sym.Global, yychar, yyline, yytext());
          }
        case 67: break;
        case 1: 
          { System.out.println("ERROR Lexico :"+ yytext()+ "  Linea: " + (yyline+1) +" Columna: "+(yycolumn +1) );
        return new Symbol(sym.ERROR,yyline, yycolumn, yytext());
          }
        case 68: break;
        case 35: 
          { resultado += ">";
    return new Symbol(sym.OperadorRelacional, yychar, yyline, yytext());
          }
        case 69: break;
        case 55: 
          { return new Symbol(sym.FinFuncion, yychar, yyline, yytext());
          }
        case 70: break;
        case 17: 
          { return new Symbol(sym.OperadorIncremento, yychar, yyline, yytext());
          }
        case 71: break;
        case 11: 
          { return new Symbol(sym.LLaveC, yychar, yyline, yytext());
          }
        case 72: break;
        case 43: 
          { return new Symbol(sym.Ingresar, yychar, yyline, yytext());
          }
        case 73: break;
        case 50: 
          { return new Symbol(sym.FinSegun, yychar, yyline, yytext());
          }
        case 74: break;
        case 21: 
          { System.out.println(resultado);    
    return new Symbol(sym.Global, yychar, yyline, yytext());
          }
        case 75: break;
        case 2: 
          { resultado += yytext();
    return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 76: break;
        case 3: 
          { resultado += yytext();
          }
        case 77: break;
        case 40: 
          { return new Symbol(sym.Funcion, yychar, yyline, yytext());
          }
        case 78: break;
        case 41: 
          { return new Symbol(sym.Repetir, yychar, yyline, yytext());
          }
        case 79: break;
        case 27: 
          { resultado += "elif ";
    return new Symbol(sym.OSi, yychar, yyline, yytext());
          }
        case 80: break;
        case 45: 
          { resultado += " : ";
    return new Symbol(sym.Entonces, yychar, yyline, yytext());
          }
        case 81: break;
        case 7: 
          { resultado += yytext();
    return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 82: break;
        case 58: 
          { resultado += "else: ";
    return new Symbol(sym.DeloContrario, yychar, yyline, yytext());
          }
        case 83: break;
        case 33: 
          { return new Symbol(sym.Hacer, yychar, yyline, yytext());
          }
        case 84: break;
        case 15: 
          { resultado += "if ";
    return new Symbol(sym.Si, yychar, yyline, yytext());
          }
        case 85: break;
        case 29: 
          { return new Symbol(sym.Como, yychar, yyline, yytext());
          }
        case 86: break;
        case 14: 
          { return new Symbol(sym.Reservadas, yychar, yyline, yytext());
          }
        case 87: break;
        case 9: 
          { resultado += yytext();
    return new Symbol(sym.ParentesisC, yychar, yyline, yytext());
          }
        case 88: break;
        case 30: 
          { return new Symbol(sym.Booleano, yychar, yyline, yytext());
          }
        case 89: break;
        case 24: 
          { resultado += yytext();
    return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 90: break;
        case 6: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 91: break;
        case 32: 
          { return new Symbol(sym.Hasta, yychar, yyline, yytext());
          }
        case 92: break;
        case 18: 
          { resultado += "=";
    return new Symbol(sym.Asignacion, yychar, yyline, yytext());
          }
        case 93: break;
        case 12: 
          { return new Symbol(sym.CorcheteA, yychar, yyline, yytext());
          }
        case 94: break;
        case 38: 
          { return new Symbol(sym.Metodo, yychar, yyline, yytext());
          }
        case 95: break;
        case 26: 
          { return new Symbol(sym.ComentarioMultilinea, yychar, yyline, yytext());
          }
        case 96: break;
        case 54: 
          { return new Symbol(sym.ImprimirSalto, yychar, yyline, yytext());
          }
        case 97: break;
        case 16: 
          { resultado += yytext();
                                    return new Symbol(sym.OperadorAtribucion, yychar, yyline, yytext());
          }
        case 98: break;
        case 20: 
          { return new Symbol(sym.LLamada, yychar, yyline, yytext());
          }
        case 99: break;
        case 47: 
          { return new Symbol(sym.Mientras, yychar, yyline, yytext());
          }
        case 100: break;
        case 34: 
          { return new Symbol(sym.OperadorRelacional, yychar, yyline, yytext());
          }
        case 101: break;
        case 22: 
          { return new Symbol(sym.Comentario, yychar, yyline, yytext());
          }
        case 102: break;
        case 5: 
          { return new Symbol(sym.OperadorAritmetico, yychar, yyline, yytext());
          }
        case 103: break;
        case 48: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 104: break;
        case 23: 
          { resultado += yytext();
    return new Symbol(sym.Variable, yychar, yyline, yytext());
          }
        case 105: break;
        case 56: 
          { return new Symbol(sym.FinMientras, yychar, yyline, yytext());
          }
        case 106: break;
        case 31: 
          { return new Symbol(sym.Segun, yychar, yyline, yytext());
          }
        case 107: break;
        case 25: 
          { return new Symbol(sym.Caracter, yychar, yyline, yytext());
          }
        case 108: break;
        case 13: 
          { return new Symbol(sym.CorcheteC, yychar, yyline, yytext());
          }
        case 109: break;
        case 39: 
          { return new Symbol(sym.TipoDato, yychar, yyline, yytext());
          }
        case 110: break;
        case 19: 
          { return new Symbol(sym.OperadorLogico, yychar, yyline, yytext());
          }
        case 111: break;
        case 51: 
          { return new Symbol(sym.HastaQue, yychar, yyline, yytext());
          }
        case 112: break;
        case 10: 
          { return new Symbol(sym.LLaveA, yychar, yyline, yytext());
          }
        case 113: break;
        case 49: 
          { resultado += "return";
    return new Symbol(sym.Retornar, yychar, yyline, yytext());
          }
        case 114: break;
        case 4: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 115: break;
        case 37: 
          { return new Symbol(sym.FinSi, yychar, yyline, yytext());
          }
        case 116: break;
        case 53: 
          { return new Symbol(sym.FinMetodo, yychar, yyline, yytext());
          }
        case 117: break;
        case 52: 
          { return new Symbol(sym.ConValor, yychar, yyline, yytext());
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
