/* The following code was generated by JFlex 1.4.3 on 19/09/22 08:19 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/09/22 08:19 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\40\2\0\1\3\22\0\1\47\1\0\1\25\1\0"+
    "\1\34\1\56\1\0\1\33\1\52\1\53\1\7\1\5\1\44\1\6"+
    "\1\24\1\10\1\2\11\36\1\0\1\43\1\0\1\4\1\42\1\62"+
    "\1\0\1\22\1\54\1\20\1\13\1\16\1\30\1\41\1\46\1\21"+
    "\1\51\1\1\1\31\1\11\1\17\1\12\1\14\1\50\1\27\1\32"+
    "\1\15\1\45\1\26\2\1\1\55\1\1\1\57\1\0\1\60\1\0"+
    "\1\23\1\0\1\22\1\54\1\20\1\13\1\16\1\30\1\41\1\46"+
    "\1\21\1\51\1\1\1\31\1\11\1\17\1\12\1\14\1\50\1\27"+
    "\1\32\1\15\1\45\1\26\2\1\1\55\1\1\1\35\1\0\1\37"+
    "\101\0\1\61\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\4\4\20\1\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\2\1\1\13"+
    "\1\14\1\15\1\16\3\0\1\17\1\20\1\21\1\0"+
    "\1\1\5\0\1\22\17\0\1\23\6\0\1\24\4\0"+
    "\1\25\1\2\1\0\1\26\13\0\1\27\10\0\1\30"+
    "\3\0\1\31\3\0\1\32\10\0\1\33\2\0\1\34"+
    "\5\0\1\35\23\0\1\36\1\0\1\37\26\0\1\40"+
    "\1\0\1\41\1\0\1\42\1\43\1\0\1\44\11\0"+
    "\1\45\3\0\1\46\2\0\1\47\11\0\1\50\24\0"+
    "\1\51\6\0\1\52\1\0\1\53\1\0\1\54\2\0"+
    "\1\55\1\56\1\0\1\57\1\60\3\0\1\61\1\62"+
    "\1\63\1\0\1\64\2\0\1\65\10\0\1\66\2\0"+
    "\1\67\3\0\1\70\1\71\7\0\1\72\10\0\1\73"+
    "\1\0\1\74\3\0\1\75\2\0\1\76\1\77\1\100"+
    "\4\0\1\101\1\0\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\63\0\63\0\63\0\63\0\u04fb\0\63"+
    "\0\63\0\u052e\0\u0165\0\63\0\63\0\63\0\63\0\146"+
    "\0\u0561\0\u0594\0\63\0\63\0\63\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\146\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u03c9\0\63\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\146\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\63\0\u0594\0\u0bf4\0\146\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\146"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u09c3\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\63\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\63\0\u12ed\0\u1320\0\146\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\146\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\146"+
    "\0\u1d16\0\146\0\u1d49\0\146\0\u1d7c\0\u1daf\0\146\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\146\0\u1fad\0\u1fe0\0\u2013\0\146\0\u2046\0\u2079\0\146"+
    "\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211"+
    "\0\u2244\0\63\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\146\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\146\0\u27a5\0\146"+
    "\0\u27d8\0\146\0\u280b\0\u283e\0\146\0\146\0\u2871\0\63"+
    "\0\146\0\u28a4\0\u28d7\0\u290a\0\146\0\u293d\0\146\0\u2970"+
    "\0\146\0\u29a3\0\u29d6\0\63\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2"+
    "\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\63\0\u2ba1\0\u2bd4\0\146"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\63\0\63\0\u2ca0\0\u2cd3\0\u2d06"+
    "\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\63\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\63\0\u2f9d\0\63"+
    "\0\u2fd0\0\u3003\0\u3036\0\63\0\u3069\0\u309c\0\63\0\63"+
    "\0\63\0\u30cf\0\u3102\0\u3135\0\u3168\0\63\0\u319b\0\63"+
    "\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\2\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\2\1\33\1\4\1\34"+
    "\1\5\1\3\1\2\1\35\1\36\1\3\1\37\1\5"+
    "\2\3\1\40\1\41\1\42\1\3\1\43\1\44\1\45"+
    "\1\46\1\47\64\0\2\50\6\0\12\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\1\50\1\4\6\0\12\50"+
    "\1\0\1\52\1\0\5\50\3\0\1\4\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\10\0"+
    "\1\5\34\0\1\5\6\0\1\5\17\0\1\53\1\54"+
    "\61\0\1\53\1\0\1\54\33\0\1\55\24\0\1\53"+
    "\62\0\1\53\2\0\1\56\1\57\53\0\2\50\6\0"+
    "\1\50\1\60\3\50\1\61\2\50\1\62\1\63\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\12\50"+
    "\1\64\2\0\1\50\1\65\3\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\5\50\1\66\4\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\50\1\67"+
    "\7\50\1\70\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\6\50\1\71\3\50\3\0\4\50\1\72"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\1\50"+
    "\1\73\1\51\1\0\2\50\6\0\2\50\6\0\1\50"+
    "\1\74\10\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\1\75\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\1\50\1\76\7\50\1\77\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\1\100"+
    "\5\50\1\101\3\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\6\50\1\102\3\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\103\6\0\13\103\2\0"+
    "\5\103\3\0\1\103\2\0\1\103\3\0\2\103\1\0"+
    "\2\103\2\0\2\103\5\0\25\104\1\105\35\104\1\0"+
    "\2\50\6\0\5\50\1\106\4\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\5\50\1\107\4\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\10\50\1\110\1\111\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\1\112\1\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\5\50\1\113\2\50\1\114"+
    "\1\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\1\115"+
    "\7\0\12\115\3\0\5\115\1\0\1\116\4\0\1\115"+
    "\3\0\2\115\1\0\2\115\2\0\2\115\6\0\2\50"+
    "\6\0\11\50\1\117\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\1\50\1\120\10\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\60\0\1\121\11\0\1\122\33\0"+
    "\1\122\24\0\7\56\1\123\1\0\52\56\40\57\1\0"+
    "\22\57\1\0\2\50\6\0\2\50\1\124\7\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\4\50"+
    "\1\125\1\50\1\126\3\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\5\50\1\127\4\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\12\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\1\50\1\130\37\0\1\131"+
    "\31\0\2\50\6\0\12\50\1\132\2\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\4\50\1\133\5\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\12\50\3\0\1\50\1\134\3\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\4\50\1\135\5\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\12\50\1\136"+
    "\2\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\5\50\1\137\4\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\4\50\1\140\5\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\141\11\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\1\142\5\50\1\143\3\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\2\50\1\144\7\50\3\0"+
    "\1\50\1\145\3\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\3\50\1\146\6\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\10\50\1\147\1\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\150\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\2\50"+
    "\1\65\7\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\103\6\0\12\103\1\151\2\0\5\103\3\0\1\103"+
    "\2\0\1\103\3\0\2\103\1\0\2\103\2\0\2\103"+
    "\6\0\2\50\6\0\12\50\3\0\1\50\1\152\3\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\3\50\1\153"+
    "\1\154\5\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\6\50\1\155\3\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\12\50\3\0\3\50"+
    "\1\156\1\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\6\50\1\157\3\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\12\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\160\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\40\0\1\161\64\0\1\162\26\0\2\50\6\0"+
    "\7\50\1\163\2\50\3\0\4\50\1\164\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\1\50\1\165\10\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\5\0\7\56\1\123\1\2"+
    "\52\56\1\0\2\50\6\0\1\50\1\166\10\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\1\50"+
    "\1\167\10\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\6\50\1\170\3\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\1\50\1\171\10\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\26\0\1\172\72\0"+
    "\1\173\32\0\2\50\6\0\5\50\1\174\4\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\11\50"+
    "\1\175\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\1\50\1\176\10\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\20\0\1\177\5\0\1\200\42\0\2\50\6\0"+
    "\7\50\1\201\2\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\5\50\1\202\4\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\50\1\203"+
    "\10\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\1\204\2\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\205\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\5\50\1\206\4\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\11\50\1\207"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\12\50\3\0\1\50\1\210\3\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\7\50\1\211\2\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\12\50\3\0"+
    "\1\50\1\212\3\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\2\50\1\213\7\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\5\50\1\214\4\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\1\50"+
    "\1\215\10\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\12\50\1\216\2\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\12\50\3\0\4\50\1\217"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\7\50\1\220"+
    "\2\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\1\221\1\50\1\0\2\50\1\51\1\0\2\50"+
    "\43\0\1\222\25\0\2\50\6\0\5\50\1\223\4\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\4\50\1\224\5\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\12\50\3\0\3\50\1\225\1\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\2\50\1\226"+
    "\7\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\3\0\1\50\1\227\3\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\4\50\1\230\5\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\12\50"+
    "\3\0\1\50\1\231\3\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\17\0"+
    "\1\232\51\0\2\50\6\0\6\50\1\233\3\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\6\50"+
    "\1\234\3\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\26\0"+
    "\1\235\102\0\1\236\22\0\2\50\6\0\12\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\1\237\1\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\12\50\3\0\1\50\1\240\3\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\21\0\1\241\11\0\1\242\55\0\1\243\42\0\2\50"+
    "\6\0\6\50\1\244\3\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\7\50\1\245\2\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\10\50"+
    "\1\246\1\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\10\50\1\247\1\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\5\50\1\250\4\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\11\50\1\251\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\4\50\1\252\5\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\12\50\3\0\1\50"+
    "\1\253\3\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\16\0\1\254\2\0"+
    "\1\255\13\0\1\256\1\0\1\257\31\0\2\50\6\0"+
    "\1\50\1\260\10\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\10\50\1\261\1\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\6\50\1\262"+
    "\3\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\7\0\1\263"+
    "\33\0\1\263\25\0\2\50\6\0\12\50\3\0\1\50"+
    "\1\264\3\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\11\50\1\265\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\5\50\1\266\4\50\3\0\5\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\1\50\1\267\10\50"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\6\0\2\50\6\0"+
    "\12\50\1\270\2\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\12\50\3\0\1\50\1\271\3\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\6\0\2\50\6\0\12\50\1\272\2\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\30\0\1\273\40\0\2\50"+
    "\6\0\7\50\1\274\2\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\7\50\1\275\2\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\35\0\1\276\77\0\1\277"+
    "\16\0\2\50\6\0\4\50\1\300\5\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\50\1\301"+
    "\10\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\27\0\1\302"+
    "\62\0\1\303\57\0\1\304\44\0\2\50\6\0\11\50"+
    "\1\305\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\4\50\1\306\5\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\1\307\11\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\50\1\310"+
    "\10\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\3\0\4\50\1\311\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\6\0\2\50\6\0\2\50\1\312\7\50\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\10\50\1\313"+
    "\1\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\6\50\1\314\3\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\23\0\1\315\2\0\1\316\63\0\1\317\105\0"+
    "\1\320\33\0\1\321\2\0\1\322\42\0\2\50\6\0"+
    "\1\50\1\323\10\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\7\0\1\324\33\0\1\324\1\115\24\0\2\50\6\0"+
    "\12\50\1\325\2\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\6\0"+
    "\2\50\6\0\11\50\1\326\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\17\0\1\327\51\0\2\50\6\0\11\50\1\330"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\17\0\1\331\70\0"+
    "\1\332\43\0\2\50\6\0\10\50\1\333\1\50\3\0"+
    "\5\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\5\50"+
    "\1\334\4\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\23\0"+
    "\1\335\66\0\1\336\41\0\2\50\6\0\11\50\1\337"+
    "\3\0\5\50\3\0\1\50\2\0\1\50\3\0\2\50"+
    "\1\0\2\50\1\51\1\0\2\50\34\0\1\340\64\0"+
    "\1\341\51\0\1\342\43\0\2\50\6\0\5\50\1\343"+
    "\4\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\10\50\1\344\1\50\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\11\50\1\345\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\5\50\1\346"+
    "\4\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\3\0\1\50\1\347\3\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\11\50\1\350\3\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\22\0\1\351\63\0\1\352\73\0"+
    "\1\353\52\0\1\354\104\0\1\355\22\0\2\50\6\0"+
    "\6\50\1\356\3\50\3\0\5\50\3\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\2\50\1\51\1\0\2\50"+
    "\44\0\1\115\73\0\1\357\13\0\2\50\6\0\6\50"+
    "\1\360\3\50\3\0\5\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\30\0"+
    "\1\361\40\0\2\50\6\0\12\50\3\0\4\50\1\362"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\30\0\1\363\51\0\1\364\51\0"+
    "\2\50\6\0\11\50\1\365\3\0\5\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\12\50\3\0\4\50\1\366"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\34\0\1\367\64\0\1\370\32\0"+
    "\2\50\6\0\12\50\3\0\1\50\1\371\3\50\3\0"+
    "\1\50\2\0\1\50\3\0\2\50\1\0\2\50\1\51"+
    "\1\0\2\50\27\0\1\372\52\0\1\373\77\0\1\374"+
    "\34\0\2\50\6\0\12\50\3\0\1\50\1\375\3\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\12\50\3\0"+
    "\1\50\1\376\3\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\6\0\2\50"+
    "\6\0\12\50\3\0\1\50\1\377\3\50\3\0\1\50"+
    "\2\0\1\50\3\0\2\50\1\0\2\50\1\51\1\0"+
    "\2\50\6\0\2\50\6\0\12\50\3\0\1\50\1\u0100"+
    "\3\50\3\0\1\50\2\0\1\50\3\0\2\50\1\0"+
    "\2\50\1\51\1\0\2\50\6\0\2\50\6\0\12\50"+
    "\3\0\1\50\1\u0101\3\50\3\0\1\50\2\0\1\50"+
    "\3\0\2\50\1\0\2\50\1\51\1\0\2\50\17\0"+
    "\1\u0102\67\0\1\u0103\65\0\1\u0104\60\0\1\u0105\107\0"+
    "\1\u0106\62\0\1\u0107\36\0\1\u0108\62\0\1\u0109\60\0"+
    "\1\u010a\61\0\1\u010b\55\0\1\u010c\100\0\1\u010d\51\0"+
    "\1\u010e\45\0\2\50\6\0\12\50\1\u010f\2\0\5\50"+
    "\3\0\1\50\2\0\1\50\3\0\2\50\1\0\2\50"+
    "\1\51\1\0\2\50\6\0\2\50\6\0\1\50\1\u0110"+
    "\10\50\3\0\5\50\3\0\1\50\2\0\1\50\3\0"+
    "\2\50\1\0\2\50\1\51\1\0\2\50\20\0\1\u0111"+
    "\64\0\1\u0112\66\0\1\u0113\60\0\1\u0114\61\0\1\u0115"+
    "\105\0\1\u0116\62\0\1\u0117\36\0\1\u0118\64\0\1\u0119"+
    "\61\0\1\u011a\55\0\1\u011b\70\0\1\u011c\55\0\1\u011d"+
    "\77\0\1\u011e\45\0\1\u011f\115\0\1\u0120\62\0\1\u0121"+
    "\44\0\1\u0122\50\0\1\u0123\62\0\1\u0124\63\0\1\u0125"+
    "\75\0\1\u0126\53\0\1\u0127\57\0\1\u0128\65\0\1\u0129"+
    "\62\0\1\u012a\62\0\1\u012b\56\0\1\u012c\73\0\1\u012d"+
    "\52\0\1\u012e\75\0\1\u012f\61\0\1\u0130\62\0\1\u0131"+
    "\60\0\1\u0132\45\0\1\u0133\65\0\1\u0134\66\0\1\u0135"+
    "\73\0\1\u0136\52\0\1\u0137\52\0\1\u0138\101\0\1\u0139"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\24\1\4\11\1\1\2\11"+
    "\2\1\4\11\3\0\3\11\1\0\1\1\5\0\1\1"+
    "\17\0\1\11\6\0\1\1\4\0\1\11\1\1\1\0"+
    "\1\1\13\0\1\1\10\0\1\1\3\0\1\1\3\0"+
    "\1\11\10\0\1\11\2\0\1\1\5\0\1\1\23\0"+
    "\1\1\1\0\1\1\26\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\11\0\1\1\3\0\1\1\2\0"+
    "\1\1\11\0\1\11\24\0\1\1\6\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\11\1\1"+
    "\3\0\3\1\1\0\1\1\2\0\1\11\10\0\1\11"+
    "\2\0\1\1\3\0\2\11\7\0\1\11\10\0\1\11"+
    "\1\0\1\11\3\0\1\11\2\0\3\11\4\0\1\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return new Symbol(sym.ParentesisC, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 35: 
          { return new Symbol(sym.Hasta, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 19: 
          { return new Symbol(sym.Cadena, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 8: 
          { return new Symbol(sym.Coma, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 46: 
          { return new Symbol(sym.Entonces, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 25: 
          { return new Symbol(sym.Global2, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 31: 
          { return new Symbol(sym.OperadorRelacionalM, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 18: 
          { return new Symbol(sym.OperadorLogico, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 63: 
          { return new Symbol(sym.OperadorRelacionalMMMM, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 53: 
          { return new Symbol(sym.FinPara, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 61: 
          { return new Symbol(sym.OperadorRelacional, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 56: 
          { return new Symbol(sym.FinSegun, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 64: 
          { return new Symbol(sym.OperadorRelacionalMMM, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 24: 
          { return new Symbol(sym.Variable, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 38: 
          { return new Symbol(sym.TipoDato2, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 36: 
          { return new Symbol(sym.Metodo, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 15: 
          { return new Symbol(sym.OperadorAtribucion, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 41: 
          { return new Symbol(sym.Repetir, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 44: 
          { return new Symbol(sym.Mientras, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 26: 
          { return new Symbol(sym.Caracter, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 30: 
          { return new Symbol(sym.OperadorRelacionalMM, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 7: 
          { return new Symbol(sym.PuntoComa, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 67: 
          { return new Symbol(sym.Incremental, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 62: 
          { return new Symbol(sym.FinMientras, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 43: 
          { return new Symbol(sym.TipoDato3, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 33: 
          { return new Symbol(sym.Segun, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 32: 
          { return new Symbol(sym.Booleano, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 65: 
          { return new Symbol(sym.Parametros, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 48: 
          { return new Symbol(sym.Ejecutar, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 11: 
          { return new Symbol(sym.CorcheteA, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 58: 
          { return new Symbol(sym.FinMetodo, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 49: 
          { return new Symbol(sym.TipoDato4, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 23: 
          { return new Symbol(sym.Not, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 59: 
          { return new Symbol(sym.ImprimirSalto, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 42: 
          { return new Symbol(sym.Funcion, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 45: 
          { return new Symbol(sym.Potencia, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 2: 
          { return new Symbol(sym.Numero, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 50: 
          { return new Symbol(sym.Imprimir, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 5: 
          { return new Symbol(sym.LLaveA, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 12: 
          { return new Symbol(sym.CorcheteC, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 51: 
          { return new Symbol(sym.Ingresar, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 37: 
          { return new Symbol(sym.TipoDato, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 4: 
          { return new Symbol(sym.OperadorAritmetico, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 52: 
          { return new Symbol(sym.Retornar, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 40: 
          { return new Symbol(sym.FinSi, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 20: 
          { return new Symbol(sym.Si, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 29: 
          { return new Symbol(sym.Como, yycolumn, yycolumn, yytext());
          }
        case 114: break;
        case 54: 
          { return new Symbol(sym.ConValor, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 21: 
          { return new Symbol(sym.LLamada, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 28: 
          { return new Symbol(sym.Para, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 6: 
          { return new Symbol(sym.LLaveC, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 39: 
          { return new Symbol(sym.Global, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 27: 
          { return new Symbol(sym.OSi, yycolumn, yyline, yytext());
          }
        case 120: break;
        case 3: 
          { return new Symbol(sym.Igual, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 47: 
          { return new Symbol(sym.OperadorRelacionalMMMMM, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 9: 
          { return new Symbol(sym.ParentesisA, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 60: 
          { return new Symbol(sym.FinFuncion, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 34: 
          { return new Symbol(sym.Hacer, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 22: 
          { return new Symbol(sym.OperadorAritmeticoM, yycolumn, yyline, yytext());
          }
        case 126: break;
        case 16: 
          { return new Symbol(sym.OperadorIncremento, yycolumn, yyline, yytext());
          }
        case 127: break;
        case 17: 
          { return new Symbol(sym.Asignacion, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 55: 
          { return new Symbol(sym.Booleano1, yycolumn, yyline, yytext());
          }
        case 129: break;
        case 13: 
          { return new Symbol(sym.Interrogacion1, yycolumn, yyline, yytext());
          }
        case 130: break;
        case 1: 
          { /*Ignore*/
          }
        case 131: break;
        case 66: 
          { return new Symbol(sym.DeloContrario, yycolumn, yyline, yytext());
          }
        case 132: break;
        case 14: 
          { return new Symbol(sym.Interrogacion2, yycolumn, yyline, yytext());
          }
        case 133: break;
        case 57: 
          { return new Symbol(sym.HastaQue, yycolumn, yyline, yytext());
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
