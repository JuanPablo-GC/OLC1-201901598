/* The following code was generated by JFlex 1.4.3 on 12/09/22 01:53 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/09/22 01:53 PM from the specification file
 * <tt>D:/Descargas/SEMESTRE 2022/COMPILADORES 1/LAB/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\40\2\0\1\3\22\0\1\33\1\0\1\32\2\0"+
    "\1\55\1\0\1\37\1\51\1\52\1\16\1\14\1\45\1\15\1\31"+
    "\1\17\12\2\1\0\1\44\1\0\1\13\1\43\2\0\5\1\1\36"+
    "\17\1\1\34\4\1\1\60\1\0\1\61\1\0\1\30\1\0\1\27"+
    "\1\53\1\26\1\22\1\6\1\5\1\41\1\12\1\4\1\50\1\1"+
    "\1\7\1\20\1\25\1\21\1\23\1\47\1\35\1\10\1\24\1\46"+
    "\1\42\1\11\1\1\1\54\1\1\1\56\1\0\1\57\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\7\2\1\5\1\6"+
    "\1\7\1\10\1\11\7\2\2\1\3\2\1\1\1\12"+
    "\1\13\1\14\1\15\1\2\1\1\1\16\1\17\1\20"+
    "\1\21\1\1\1\0\1\3\1\22\12\1\1\23\4\1"+
    "\1\24\1\25\1\26\2\0\4\1\1\0\1\27\10\1"+
    "\2\0\3\1\1\0\1\1\1\30\2\1\1\31\1\1"+
    "\1\32\3\1\1\0\10\1\2\0\1\33\3\1\1\34"+
    "\2\0\6\1\1\35\1\36\4\1\1\37\4\1\1\0"+
    "\2\1\2\0\5\1\1\0\1\40\3\1\1\41\1\0"+
    "\2\1\1\42\1\43\2\0\7\1\4\0\1\1\2\0"+
    "\2\1\1\44\1\45\1\46\1\0\2\1\1\47\1\0"+
    "\1\1\3\0\3\1\1\50\1\1\1\32\1\1\1\0"+
    "\1\51\4\0\1\1\2\0\2\1\1\0\1\1\1\52"+
    "\2\0\1\1\3\0\5\1\5\0\1\53\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\3\0\1\1\1\54\1\1"+
    "\1\55\1\56\4\0\1\57\1\47\1\0\1\60\1\61"+
    "\1\0\1\62\2\0\1\63\3\0\1\64\2\0\1\65"+
    "\3\0\1\66\2\0\1\67\4\0\1\70\4\0\1\71"+
    "\1\72\5\0\1\73\7\0\1\74\1\0\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\62\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\62\0\62"+
    "\0\62\0\62\0\u05aa\0\u02bc\0\62\0\62\0\62\0\62"+
    "\0\144\0\u05dc\0\u060e\0\144\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\144\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\62\0\62\0\62\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\144\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\62\0\u0d48\0\u0d7a"+
    "\0\144\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u092e\0\u10cc\0\u10fe\0\u1130\0\144\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u0bea\0\62"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\62\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\62\0\u173e\0\u1770\0\u17a2\0\144\0\144\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\144\0\u1b58\0\144\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\144"+
    "\0\u1de2\0\144\0\u1e14\0\u1e46\0\62\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\144\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\144\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\144"+
    "\0\u2648\0\u267a\0\144\0\u26ac\0\u26de\0\u2710\0\u2742\0\62"+
    "\0\62\0\u2774\0\144\0\144\0\u27a6\0\144\0\u27d8\0\u280a"+
    "\0\144\0\u283c\0\u286e\0\u28a0\0\144\0\u28d2\0\u2904\0\62"+
    "\0\u2936\0\u2968\0\u299a\0\62\0\u29cc\0\u29fe\0\62\0\u2a30"+
    "\0\u2a62\0\u2a94\0\u2ac6\0\62\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e"+
    "\0\62\0\62\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\62"+
    "\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\62"+
    "\0\u2e18\0\62\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\3\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\1\5\1\33\1\34\1\35\1\36"+
    "\1\5\2\3\1\2\1\37\1\40\3\3\1\41\1\42"+
    "\1\43\1\3\1\44\1\45\1\46\1\47\1\50\63\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\1\51"+
    "\1\4\1\0\7\51\5\0\10\51\1\0\1\53\2\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\10\0\1\5\27\0\1\5\4\0\1\5\22\0\2\51"+
    "\1\0\1\51\1\54\5\51\5\0\1\55\4\51\1\56"+
    "\2\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\1\57\2\51\1\60"+
    "\3\51\5\0\10\51\4\0\3\51\2\0\2\51\3\0"+
    "\1\61\2\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\3\51\1\62\1\63\2\51\5\0\5\51\1\64\2\51"+
    "\4\0\3\51\2\0\2\51\3\0\2\51\1\65\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\1\51"+
    "\1\66\6\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\1\67\1\51"+
    "\1\70\4\51\5\0\4\51\1\71\3\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\6\51\1\72\5\0\10\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\7\51\1\73\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\20\0"+
    "\1\74\1\75\60\0\1\74\1\0\1\75\25\0\1\76"+
    "\31\0\1\74\61\0\1\74\2\0\1\77\1\100\43\0"+
    "\2\51\1\0\1\101\1\51\1\102\4\51\5\0\1\51"+
    "\1\103\5\51\1\104\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\10\51\1\105\3\0\1\51\1\106\1\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\2\51\1\107\4\51\5\0\1\51\1\110\6\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\1\51\1\111"+
    "\5\51\1\112\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\1\51\1\113\6\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\6\51"+
    "\1\114\5\0\1\51\1\115\6\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\5\51\1\116\2\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\117\1\0\7\117\5\0\11\117\3\0\3\117\2\0"+
    "\2\117\3\0\3\117\2\0\2\117\6\0\2\120\1\0"+
    "\7\120\5\0\10\120\3\0\4\120\2\0\2\120\3\0"+
    "\3\120\2\0\2\120\6\0\2\51\1\0\2\51\1\121"+
    "\4\51\5\0\10\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\2\51"+
    "\1\122\4\51\5\0\10\51\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\7\51\1\123\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\1\124\2\0"+
    "\7\124\5\0\10\124\4\0\3\124\2\0\2\124\3\0"+
    "\3\124\2\0\2\124\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\1\51\1\125\57\0\1\126\11\0\1\53\60\0"+
    "\2\51\1\0\7\51\5\0\3\51\1\127\4\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\1\130\6\51\5\0\4\51\1\131"+
    "\3\51\4\0\3\51\2\0\1\132\1\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\5\51\1\133\2\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\1\51\1\134\6\51\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\5\51\1\135\2\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\4\51\1\136\2\51\5\0\10\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\10\51\1\137\3\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\4\51\1\140\3\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\2\51\1\141\4\51\5\0\10\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\5\51\1\142"+
    "\2\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\4\0\3\51\2\0\1\143\1\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\4\0\1\51\1\144\1\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\1\145\6\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\4\51\1\146"+
    "\2\51\5\0\6\51\1\147\1\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\5\0\16\150"+
    "\1\151\43\150\40\152\1\0\21\152\1\0\2\51\1\0"+
    "\2\51\1\153\4\51\5\0\10\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\4\51\1\154\1\155\2\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\2\51\1\156\5\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\1\51"+
    "\1\155\15\0\1\157\52\0\2\51\1\0\7\51\5\0"+
    "\10\51\1\160\3\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\4\0\3\51\2\0\2\51\3\0\1\161\2\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\4\51\1\162\3\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\10\51\4\0\1\51\1\163\1\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\4\51\1\106\3\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\7\51\1\164\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\1\165\4\51\1\166\2\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\2\51\1\106\5\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\117\1\0\7\117\5\0\10\117\1\167"+
    "\3\0\3\117\2\0\2\117\3\0\3\117\2\0\2\117"+
    "\6\0\2\120\1\0\7\120\5\0\10\120\2\0\1\170"+
    "\4\120\2\0\2\120\3\0\3\120\2\0\2\120\6\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\1\51\1\171"+
    "\1\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\3\51\1\172\1\173"+
    "\3\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\3\51\1\174\3\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\44\0\1\175\23\0\2\51\1\0"+
    "\7\51\5\0\4\51\1\176\3\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\10\51\4\0\1\51\1\177\1\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\6\51\1\200\1\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\10\51\4\0\1\51"+
    "\1\201\1\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\1\202"+
    "\3\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\7\51\1\203"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\6\51\1\204"+
    "\1\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\2\51\1\54\4\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\11\0\1\205\15\0\1\206\40\0"+
    "\2\51\1\0\7\51\5\0\1\51\1\207\6\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\6\51\1\210\1\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\4\0"+
    "\3\51\2\0\1\131\1\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\1\211\2\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\1\66\6\51\5\0\10\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\3\51\1\136\3\51\5\0"+
    "\10\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\4\51"+
    "\1\212\3\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\2\51\1\213"+
    "\4\51\5\0\10\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\5\0\101\214\1\215\42\214"+
    "\1\0\2\51\1\0\7\51\5\0\5\51\1\216\2\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\1\51\1\217"+
    "\6\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\1\51"+
    "\1\220\6\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\11\0\1\221\64\0\1\222\53\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\1\223\1\51\6\0"+
    "\2\51\1\0\2\51\1\224\4\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\7\51\1\225\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\10\51\4\0\1\51"+
    "\1\131\1\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\1\51\1\226"+
    "\6\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\1\227\2\0\1\230\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\2\51\1\231\5\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\2\51"+
    "\1\232\4\51\5\0\10\51\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\1\51\1\233\6\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\4\51\1\234\2\51\5\0\10\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\2\51\1\131\4\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\1\235\6\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\1\236\6\51\5\0\10\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\2\51\1\237\4\51\5\0\10\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\12\0\1\240\2\0\1\241\7\0\1\242\2\0"+
    "\1\243\37\0\2\51\1\0\7\51\5\0\4\51\1\131"+
    "\3\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\1\244\6\51\5\0"+
    "\10\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\46\0\1\245\24\0\1\246\56\0\2\51"+
    "\1\0\7\51\5\0\5\51\1\247\2\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\3\51\2\0"+
    "\2\51\3\0\1\250\2\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\5\51\1\251\2\51\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\7\51\1\252\4\0"+
    "\3\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\10\51\4\0\1\51"+
    "\1\253\1\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\5\0\16\214\1\254\43\214\1\0\2\51\1\0"+
    "\7\51\5\0\4\51\1\255\3\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\7\51\5\0\2\51\1\256\5\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\6\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\1\51\1\257"+
    "\1\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\26\0\1\260\41\0\2\51\1\0\3\51\1\176\3\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\5\51\1\261\2\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\30\0\1\262\16\0\1\263"+
    "\23\0\1\264\56\0\2\51\1\0\7\51\5\0\7\51"+
    "\1\265\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\4\51"+
    "\1\266\3\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\4\0\1\51\1\267\1\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\1\51\1\270\6\51\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\1\271\7\51\4\0\3\51\2\0\2\51"+
    "\3\0\3\51\1\52\1\0\2\51\6\0\2\51\1\0"+
    "\7\51\5\0\1\51\1\272\6\51\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\6\0\2\51"+
    "\1\0\4\51\1\273\2\51\5\0\10\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\53\0"+
    "\1\274\17\0\1\275\1\0\1\276\57\0\1\277\1\0"+
    "\1\300\102\0\1\301\33\0\2\51\1\0\7\51\5\0"+
    "\1\51\1\302\6\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\53\0\1\303\20\0\1\304"+
    "\55\0\2\51\1\0\7\51\5\0\6\51\1\305\1\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\4\51\1\306"+
    "\3\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\1\307\3\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\5\0\16\214\1\254\1\215\42\214\1\0"+
    "\2\51\1\0\7\51\5\0\10\51\4\0\1\51\1\310"+
    "\1\51\2\0\2\51\3\0\3\51\1\52\1\0\2\51"+
    "\6\0\2\51\1\0\7\51\5\0\1\51\1\311\6\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\1\312"+
    "\3\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\35\0\1\313\32\0\2\51\1\0\7\51\5\0"+
    "\6\51\1\314\1\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\34\0\1\315\61\0\1\316"+
    "\57\0\1\317\35\0\2\51\1\0\7\51\5\0\2\51"+
    "\1\320\5\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\1\321\6\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\5\51\1\322\2\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\1\323"+
    "\6\51\5\0\10\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\7\51\1\324\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\32\0\1\325\75\0\1\326"+
    "\26\0\1\327\77\0\1\330\72\0\1\331\25\0\2\51"+
    "\1\0\7\51\5\0\5\51\1\332\2\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\34\0"+
    "\1\333\40\0\1\334\54\0\2\51\1\0\2\51\1\335"+
    "\4\51\5\0\10\51\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\6\0\2\51\1\0\7\51"+
    "\5\0\7\51\1\336\4\0\3\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\54\0\1\337\13\0\2\51"+
    "\1\0\7\51\5\0\7\51\1\340\4\0\3\51\2\0"+
    "\2\51\3\0\3\51\1\52\1\0\2\51\26\0\1\341"+
    "\66\0\1\342\34\0\2\51\1\0\1\343\6\51\5\0"+
    "\10\51\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\42\0\1\344\33\0\1\345\100\0\1\346"+
    "\34\0\2\51\1\0\2\51\1\347\4\51\5\0\10\51"+
    "\4\0\3\51\2\0\2\51\3\0\3\51\1\52\1\0"+
    "\2\51\6\0\2\51\1\0\7\51\5\0\10\51\4\0"+
    "\1\51\1\350\1\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\7\51"+
    "\1\351\4\0\3\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\4\0\1\51\1\352\1\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\4\0\1\51\1\353\1\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\33\0\1\354\101\0\1\355"+
    "\40\0\1\356\55\0\1\357\67\0\1\360\41\0\1\361"+
    "\107\0\1\362\25\0\2\51\1\0\4\51\1\363\2\51"+
    "\5\0\10\51\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\4\0\1\51\1\364\1\51\2\0\2\51\3\0"+
    "\3\51\1\52\1\0\2\51\53\0\1\365\14\0\2\51"+
    "\1\0\4\51\1\366\2\51\5\0\10\51\4\0\3\51"+
    "\2\0\2\51\3\0\3\51\1\52\1\0\2\51\35\0"+
    "\1\367\52\0\1\370\41\0\2\51\1\0\7\51\5\0"+
    "\7\51\1\371\4\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\34\0\1\372\53\0\1\373\75\0"+
    "\1\374\25\0\2\51\1\0\7\51\5\0\10\51\4\0"+
    "\1\51\1\234\1\51\2\0\2\51\3\0\3\51\1\52"+
    "\1\0\2\51\6\0\2\51\1\0\7\51\5\0\10\51"+
    "\4\0\1\51\1\375\1\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\6\0\2\51\1\0\7\51\5\0"+
    "\10\51\1\376\3\0\3\51\2\0\2\51\3\0\3\51"+
    "\1\52\1\0\2\51\11\0\1\377\102\0\1\u0100\60\0"+
    "\1\u0101\57\0\1\u0102\45\0\1\u0103\61\0\1\u0104\57\0"+
    "\1\205\102\0\1\u0105\54\0\1\u0106\76\0\1\u0107\32\0"+
    "\1\u0108\100\0\1\u0109\55\0\1\u010a\75\0\1\u010b\45\0"+
    "\1\u010c\65\0\1\u010d\60\0\1\u010e\43\0\1\u010f\73\0"+
    "\1\u0110\50\0\1\u0111\77\0\1\u0112\63\0\1\u0113\56\0"+
    "\1\u0114\72\0\1\u0115\50\0\1\u0116\43\0\1\u0117\63\0"+
    "\1\u0118\57\0\1\361\102\0\1\u0119\67\0\1\u011a\51\0"+
    "\1\u011b\71\0\1\u011c\45\0\1\u011d\64\0\1\u011e\41\0"+
    "\1\u011f\65\0\1\u0120\100\0\1\u0121\53\0\1\u0122\47\0"+
    "\1\u0123\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\21\1\4\11\2\1\4\11"+
    "\1\1\1\0\21\1\3\11\2\0\4\1\1\0\11\1"+
    "\2\0\3\1\1\0\1\1\1\11\10\1\1\0\10\1"+
    "\2\0\5\1\2\0\7\1\1\11\4\1\1\11\4\1"+
    "\1\0\2\1\2\0\5\1\1\0\4\1\1\11\1\0"+
    "\4\1\2\0\7\1\4\0\1\1\2\0\5\1\1\0"+
    "\3\1\1\0\1\1\3\0\7\1\1\0\1\11\4\0"+
    "\1\1\2\0\2\1\1\0\2\1\2\0\1\1\3\0"+
    "\5\1\5\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\3\0\5\1\4\0\2\11\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\2\0\1\11\3\0"+
    "\1\11\2\0\1\11\4\0\1\11\4\0\2\11\5\0"+
    "\1\11\7\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { lexeme=yytext(); return Parametros;
          }
        case 63: break;
        case 34: 
          { lexeme=yytext(); return Para;
          }
        case 64: break;
        case 43: 
          { lexeme=yytext(); return Funcion;
          }
        case 65: break;
        case 57: 
          { lexeme=yytext(); return ImprimirSalto;
          }
        case 66: break;
        case 53: 
          { lexeme=yytext(); return FinSegun;
          }
        case 67: break;
        case 50: 
          { lexeme=yytext(); return Mientras;
          }
        case 68: break;
        case 33: 
          { lexeme=yytext(); return OSi;
          }
        case 69: break;
        case 16: 
          { lexeme = yytext(); return CorcheteA;
          }
        case 70: break;
        case 45: 
          { lexeme=yytext(); return Imprimir;
          }
        case 71: break;
        case 15: 
          { lexeme = yytext(); return LLaveC;
          }
        case 72: break;
        case 28: 
          { lexeme=yytext(); return Módulo;
          }
        case 73: break;
        case 32: 
          { lexeme=yytext(); return ComentarioMultilinea;
          }
        case 74: break;
        case 2: 
          { lexeme=yytext(); return Letra;
          }
        case 75: break;
        case 38: 
          { lexeme=yytext(); return Hacer;
          }
        case 76: break;
        case 56: 
          { lexeme=yytext(); return FinMetodo;
          }
        case 77: break;
        case 24: 
          { lexeme=yytext(); return LLamada;
          }
        case 78: break;
        case 59: 
          { lexeme=yytext(); return FinMientras;
          }
        case 79: break;
        case 12: 
          { lexeme = yytext(); return ParentesisA;
          }
        case 80: break;
        case 18: 
          { lexeme=yytext(); return Reservadas;
          }
        case 81: break;
        case 9: 
          { lexeme=yytext(); return Division;
          }
        case 82: break;
        case 35: 
          { lexeme=yytext(); return Como;
          }
        case 83: break;
        case 44: 
          { lexeme=yytext(); return Repetir;
          }
        case 84: break;
        case 22: 
          { lexeme=yytext(); return Asignacion;
          }
        case 85: break;
        case 62: 
          { lexeme=yytext(); return Incremental;
          }
        case 86: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 87: break;
        case 27: 
          { lexeme=yytext(); return Comentario;
          }
        case 88: break;
        case 55: 
          { lexeme=yytext(); return ConValor;
          }
        case 89: break;
        case 54: 
          { lexeme=yytext(); return HastaQue;
          }
        case 90: break;
        case 4: 
          { /*ignore*/
          }
        case 91: break;
        case 17: 
          { lexeme = yytext(); return CorcheteC;
          }
        case 92: break;
        case 61: 
          { lexeme=yytext(); return DeloContrario;
          }
        case 93: break;
        case 41: 
          { lexeme=yytext(); return FinSi;
          }
        case 94: break;
        case 23: 
          { lexeme=yytext(); return OperadorLogico;
          }
        case 95: break;
        case 30: 
          { lexeme=yytext(); return Cadena;
          }
        case 96: break;
        case 37: 
          { lexeme=yytext(); return Hasta;
          }
        case 97: break;
        case 10: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 98: break;
        case 7: 
          { lexeme=yytext(); return Resta;
          }
        case 99: break;
        case 51: 
          { lexeme=yytext(); return Potencia;
          }
        case 100: break;
        case 48: 
          { lexeme=yytext(); return Entonces;
          }
        case 101: break;
        case 13: 
          { lexeme = yytext(); return ParentesisC;
          }
        case 102: break;
        case 29: 
          { lexeme=yytext(); return Variable;
          }
        case 103: break;
        case 46: 
          { lexeme=yytext(); return Ingresar;
          }
        case 104: break;
        case 52: 
          { lexeme=yytext(); return Retornar;
          }
        case 105: break;
        case 58: 
          { lexeme=yytext(); return FinFuncion;
          }
        case 106: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 107: break;
        case 40: 
          { lexeme=yytext(); return Booleano;
          }
        case 108: break;
        case 19: 
          { lexeme=yytext(); return Si;
          }
        case 109: break;
        case 8: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 110: break;
        case 14: 
          { lexeme = yytext(); return LLaveA;
          }
        case 111: break;
        case 47: 
          { lexeme=yytext(); return FinPara;
          }
        case 112: break;
        case 31: 
          { lexeme=yytext(); return Caracter;
          }
        case 113: break;
        case 36: 
          { lexeme=yytext(); return Segun;
          }
        case 114: break;
        case 26: 
          { lexeme=yytext(); return Global;
          }
        case 115: break;
        case 5: 
          { lexeme=yytext(); return Igual;
          }
        case 116: break;
        case 11: 
          { lexeme=yytext(); return Coma;
          }
        case 117: break;
        case 25: 
          { lexeme=yytext(); return TipoDato;
          }
        case 118: break;
        case 39: 
          { lexeme = yytext(); return OperadorRelacional;
          }
        case 119: break;
        case 49: 
          { lexeme=yytext(); return Ejecutar;
          }
        case 120: break;
        case 42: 
          { lexeme=yytext(); return Metodo;
          }
        case 121: break;
        case 20: 
          { lexeme = yytext(); return OperadorAtribucion;
          }
        case 122: break;
        case 21: 
          { lexeme = yytext(); return OperadorIncremento;
          }
        case 123: break;
        case 6: 
          { lexeme=yytext(); return Suma;
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
